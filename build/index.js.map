{
  "version": 3,
  "sources": ["../app/entry.server.tsx", "../app/root.tsx", "../app/routes/deep-tree-echo.tsx", "../app/components/DeepTreeEchoHomeMap.tsx", "../app/services/echoStateNetwork.server.ts", "../app/services/memory.server.ts", "../app/services/vectorStore.server.ts", "../app/services/inferenceEngine.server.ts", "../app/routes/settings.tsx", "../app/routes/terminal.tsx", "../app/services/fileSystem.server.ts", "../app/services/scriptRunner.server.ts", "../app/services/pythonRunner.server.ts", "../app/components/TerminalComponent.tsx", "../app/routes/_index.tsx", "../app/routes/editor.tsx", "../app/components/MonacoEditor.tsx", "../app/routes/memory.tsx", "../app/services/supabase.server.ts", "../app/routes/about.tsx", "../app/routes/login.tsx", "../app/routes/chat.tsx", "../app/components/ChatInterface.tsx", "../app/services/ai.server.ts", "../app/routes/map.tsx", "../app/components/EchoHomeMap.tsx", "server-assets-manifest:@remix-run/dev/assets-manifest", "server-entry-module:@remix-run/dev/server-build"],
  "sourcesContent": ["/**\n * By default, Remix will handle generating the HTTP Response for you.\n * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` \u2728\n * For more information, see https://remix.run/file-conventions/entry.server\n */\n\nimport { PassThrough } from \"node:stream\";\n\nimport type { AppLoadContext, EntryContext } from \"@remix-run/node\";\nimport { createReadableStreamFromReadable } from \"@remix-run/node\";\nimport { RemixServer } from \"@remix-run/react\";\nimport { isbot } from \"isbot\";\nimport { renderToPipeableStream } from \"react-dom/server\";\n\nconst ABORT_DELAY = 5_000;\n\nexport default function handleRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext,\n  // This is ignored so we can keep it in the template for visibility.  Feel\n  // free to delete this parameter in your app if you're not using it!\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  loadContext: AppLoadContext\n) {\n  return isbot(request.headers.get(\"user-agent\") || \"\")\n    ? handleBotRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      )\n    : handleBrowserRequest(\n        request,\n        responseStatusCode,\n        responseHeaders,\n        remixContext\n      );\n}\n\nfunction handleBotRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onAllReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n\nfunction handleBrowserRequest(\n  request: Request,\n  responseStatusCode: number,\n  responseHeaders: Headers,\n  remixContext: EntryContext\n) {\n  return new Promise((resolve, reject) => {\n    let shellRendered = false;\n    const { pipe, abort } = renderToPipeableStream(\n      <RemixServer\n        context={remixContext}\n        url={request.url}\n        abortDelay={ABORT_DELAY}\n      />,\n      {\n        onShellReady() {\n          shellRendered = true;\n          const body = new PassThrough();\n          const stream = createReadableStreamFromReadable(body);\n\n          responseHeaders.set(\"Content-Type\", \"text/html\");\n\n          resolve(\n            new Response(stream, {\n              headers: responseHeaders,\n              status: responseStatusCode,\n            })\n          );\n\n          pipe(body);\n        },\n        onShellError(error: unknown) {\n          reject(error);\n        },\n        onError(error: unknown) {\n          responseStatusCode = 500;\n          // Log streaming rendering errors from inside the shell.  Don't log\n          // errors encountered during initial shell rendering since they'll\n          // reject and get logged in handleDocumentRequest.\n          if (shellRendered) {\n            console.error(error);\n          }\n        },\n      }\n    );\n\n    setTimeout(abort, ABORT_DELAY);\n  });\n}\n", "import {\n  Links,\n  Meta,\n  Outlet,\n  Scripts,\n  ScrollRestoration } from\n\"@remix-run/react\";\nimport type { LinksFunction } from \"@remix-run/node\";\n\nimport \"./tailwind.css?__remix_sideEffect__\";\nimport \"./styles/monaco.css?__remix_sideEffect__\";\n\nexport const links: LinksFunction = () => [\n{ rel: \"preconnect\", href: \"https://fonts.googleapis.com\" },\n{\n  rel: \"preconnect\",\n  href: \"https://fonts.gstatic.com\",\n  crossOrigin: \"anonymous\"\n},\n{\n  rel: \"stylesheet\",\n  href: \"https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=JetBrains+Mono:wght@400;500;600&display=swap\"\n}];\n\n\nexport function Layout({ children }: {children: React.ReactNode;}) {\n  return (\n    <html lang=\"en\">\n      <head>\n        <meta charSet=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <Meta />\n        <Links />\n      </head>\n      <body>\n        {children}\n        <ScrollRestoration />\n        <Scripts />\n      </body>\n    </html>);\n\n}\n\nexport default function App() {\n  return <Outlet />;\n}", "import { json, type LoaderFunctionArgs, type ActionFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData, useSubmit } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport DeepTreeEchoHomeMap, { type DeepTreeRoomType } from \"~/components/DeepTreeEchoHomeMap\";\nimport { getInferenceEngine } from \"~/services/inferenceEngine.server\";\n\n// Mock user ID for demo purposes (in real app, get from session)\nconst DEMO_USER_ID = \"demo-user-123\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const url = new URL(request.url);\n  const room = url.searchParams.get(\"room\") as DeepTreeRoomType;\n  \n  return json({\n    title: \"Deep Tree Echo Home\",\n    description: \"Navigate the hierarchical cognitive architecture with inference-powered insights\",\n    initialRoom: room || \"echo-home-root\"\n  });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const room = formData.get(\"room\") as DeepTreeRoomType;\n  const query = formData.get(\"query\") as string;\n  \n  if (!room || !query) {\n    return json({ error: \"Missing room or query parameter\" }, { status: 400 });\n  }\n  \n  try {\n    const inferenceEngine = getInferenceEngine(DEMO_USER_ID);\n    \n    // Build parent path for the room\n    const getParentPath = (roomId: DeepTreeRoomType): string[] => {\n      const treeStructure = inferenceEngine.getTreeStructure();\n      const path: string[] = [];\n      let currentNode = treeStructure.get(roomId);\n      \n      while (currentNode?.parent) {\n        path.unshift(currentNode.parent);\n        currentNode = treeStructure.get(currentNode.parent);\n      }\n      \n      return path;\n    };\n    \n    const parentPath = getParentPath(room);\n    const node = inferenceEngine.getNode(room);\n    const depth = node?.level || 0;\n    \n    const context = {\n      currentRoom: room,\n      parentPath,\n      depth,\n      sessionId: \"demo-session-\" + Date.now(),\n      userId: DEMO_USER_ID\n    };\n    \n    const result = await inferenceEngine.performInference(query, context);\n    \n    return json({ \n      success: true, \n      inference: result,\n      nodeInfo: {\n        name: node?.name || room,\n        type: node?.type || 'unknown',\n        level: depth,\n        children: node?.children || []\n      }\n    });\n  } catch (error) {\n    console.error(\"Inference error:\", error);\n    return json({ \n      error: \"Failed to perform inference: \" + (error instanceof Error ? error.message : \"Unknown error\")\n    }, { status: 500 });\n  }\n}\n\nexport default function DeepTreeEchoHomePage() {\n  const { title, description, initialRoom } = useLoaderData<typeof loader>();\n  const submit = useSubmit();\n  const [activeRoom, setActiveRoom] = useState<DeepTreeRoomType>(initialRoom as DeepTreeRoomType);\n  const [inferenceHistory, setInferenceHistory] = useState<Array<{\n    room: string;\n    query: string;\n    result: any;\n    timestamp: Date;\n  }>>([]);\n\n  const handleRoomSelect = (room: DeepTreeRoomType) => {\n    setActiveRoom(room);\n    // Update URL to reflect current room\n    window.history.pushState({}, '', `/deep-tree-echo?room=${room}`);\n  };\n\n  const handleInferenceRequest = async (room: DeepTreeRoomType, query: string) => {\n    // Submit inference request to the action\n    const formData = new FormData();\n    formData.append(\"room\", room);\n    formData.append(\"query\", query);\n    \n    return new Promise((resolve, reject) => {\n      submit(formData, {\n        method: \"POST\",\n        action: `/deep-tree-echo`,\n        onError: (error) => {\n          console.error(\"Inference request failed:\", error);\n          reject(error);\n        },\n        onSuccess: (data: any) => {\n          if (data.error) {\n            reject(new Error(data.error));\n            return;\n          }\n          \n          // Add to inference history\n          setInferenceHistory(prev => [{\n            room: data.nodeInfo?.name || room,\n            query,\n            result: data.inference,\n            timestamp: new Date()\n          }, ...prev.slice(0, 9)]); // Keep last 10 entries\n          \n          // Transform the result to match the expected interface\n          const result = {\n            reasoning: data.inference.reasoning,\n            confidence: data.inference.confidence,\n            patterns: data.inference.patterns,\n            predictions: data.inference.predictions,\n            nextActions: data.inference.nextActions,\n            treeContext: data.inference.treeContext\n          };\n          \n          resolve(result);\n        }\n      });\n    });\n  };\n\n  return (\n    <div className=\"h-screen flex flex-col\">\n      {/* Header */}\n      <header className=\"bg-card text-card-foreground px-6 py-4 border-b border-border\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-2xl font-bold flex items-center\">\n              <span className=\"bg-gradient-to-r from-purple-400 to-blue-500 bg-clip-text text-transparent\">\n                {title}\n              </span>\n              <span className=\"ml-3 text-sm bg-purple-500/20 text-purple-400 px-2 py-1 rounded-full\">\n                with Inference Engine\n              </span>\n            </h1>\n            <p className=\"text-sm opacity-70 mt-1\">{description}</p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm opacity-70\">Active Room</div>\n            <div className=\"font-medium text-primary\">{activeRoom}</div>\n          </div>\n        </div>\n      </header>\n      \n      {/* Main content area */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Main Deep Tree Echo Home Map */}\n        <main className=\"flex-1 overflow-hidden\">\n          <DeepTreeEchoHomeMap \n            onRoomSelect={handleRoomSelect}\n            onInferenceRequest={handleInferenceRequest}\n          />\n        </main>\n        \n        {/* Inference History Sidebar */}\n        {inferenceHistory.length > 0 && (\n          <aside className=\"w-80 bg-card/50 border-l border-border overflow-y-auto\">\n            <div className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-4\">Inference History</h3>\n              <div className=\"space-y-3\">\n                {inferenceHistory.map((entry, index) => (\n                  <div key={index} className=\"bg-card/80 rounded-lg p-3 text-sm\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div className=\"font-medium text-purple-400\">{entry.room}</div>\n                      <div className=\"text-xs opacity-50\">\n                        {entry.timestamp.toLocaleTimeString()}\n                      </div>\n                    </div>\n                    <div className=\"text-xs opacity-70 mb-2\">\n                      Query: {entry.query}\n                    </div>\n                    <div className=\"text-xs opacity-60\">\n                      Confidence: {Math.round(entry.result.confidence * 100)}%\n                    </div>\n                    {entry.result.patterns && entry.result.patterns.length > 0 && (\n                      <div className=\"mt-2 flex flex-wrap gap-1\">\n                        {entry.result.patterns.slice(0, 2).map((pattern: string, i: number) => (\n                          <span key={i} className=\"text-xs bg-blue-500/20 text-blue-400 px-1 py-0.5 rounded\">\n                            {pattern}\n                          </span>\n                        ))}\n                        {entry.result.patterns.length > 2 && (\n                          <span className=\"text-xs opacity-50\">+{entry.result.patterns.length - 2} more</span>\n                        )}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </aside>\n        )}\n      </div>\n      \n      {/* Footer with system status */}\n      <footer className=\"bg-card text-card-foreground px-6 py-3 border-t border-border text-sm\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <div>\n              Current location: <span className=\"font-medium text-primary\">{activeRoom}</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-2 h-2 rounded-full bg-green-500 mr-2\"></div>\n              <span className=\"opacity-70\">Inference Engine Active</span>\n            </div>\n          </div>\n          <div className=\"opacity-70\">\n            Deep Tree Echo \u2022 Hierarchical Cognitive Architecture \u2022 {inferenceHistory.length} inferences performed\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}", "import { useState, useEffect } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  FiBook, \n  FiCode, \n  FiCpu, \n  FiDatabase, \n  FiMessageCircle, \n  FiFeather, \n  FiEye,\n  FiArrowLeft,\n  FiInfo,\n  FiSettings,\n  FiChevronRight,\n  FiChevronDown,\n  FiHome,\n  FiGitBranch,\n  FiLayers,\n  FiActivity,\n  FiZap,\n  FiTrendingUp\n} from 'react-icons/fi';\n\n// Extended room types for deep tree structure\nexport type DeepTreeRoomType = \n  | 'echo-home-root'\n  | 'memory-library' | 'episodic-vault' | 'semantic-archive' | 'procedural-workshop' | 'associative-web'\n  | 'workshop' | 'code-forge' | 'pattern-lab' | 'neural-studio' | 'architecture-space'\n  | 'visualization-studio' | 'data-canvas' | 'concept-mapper' | 'flow-visualizer' | 'insight-gallery'\n  | 'training-hall' | 'esn-gymnasium' | 'pattern-dojo' | 'learning-arena' | 'adaptation-chamber'\n  | 'observatory' | 'insight-telescope' | 'analytics-hub' | 'reflection-mirror' | 'metacognition-center'\n  | 'garden' | 'philosophy-grove' | 'creativity-meadow' | 'synthesis-garden' | 'emergence-forest'\n  | 'communications-hub' | 'dialogue-chamber' | 'feedback-loop' | 'integration-nexus' | 'broadcast-tower';\n\nexport interface TreeNode {\n  id: DeepTreeRoomType;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n  type: 'room' | 'concept' | 'memory' | 'pattern';\n  parent?: DeepTreeRoomType;\n  children: DeepTreeRoomType[];\n  level: number;\n  position?: { x: number; y: number };\n  size?: { width: number; height: number };\n  metadata?: {\n    isInferenceEnabled?: boolean;\n    patternStrength?: number;\n    memoryDensity?: number;\n    connectionWeight?: number;\n  };\n}\n\ninterface InferenceVisualization {\n  reasoning: string;\n  confidence: number;\n  patterns: string[];\n  predictions: string[];\n  nextActions: string[];\n  treeContext: {\n    currentNode: string;\n    parentNodes: string[];\n    suggestedChildNodes: string[];\n    depth: number;\n  };\n}\n\nconst TREE_NODES: TreeNode[] = [\n  // Root node\n  {\n    id: 'echo-home-root',\n    name: 'Echo Home Root',\n    description: 'The central root of the Deep Tree Echo Home cognitive architecture',\n    icon: <FiHome size={24} />,\n    color: 'bg-purple-600',\n    type: 'room',\n    children: ['memory-library', 'workshop', 'visualization-studio', 'training-hall', 'observatory', 'garden', 'communications-hub'],\n    level: 0,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.9, memoryDensity: 0.8, connectionWeight: 1.0 }\n  },\n\n  // Level 1 - Main rooms\n  {\n    id: 'memory-library',\n    name: 'Memory Library',\n    description: 'Repository of stored experiences, knowledge, and learned patterns',\n    icon: <FiBook size={24} />,\n    color: 'bg-indigo-500',\n    type: 'memory',\n    parent: 'echo-home-root',\n    children: ['episodic-vault', 'semantic-archive', 'procedural-workshop', 'associative-web'],\n    level: 1,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.8, memoryDensity: 0.95, connectionWeight: 0.9 }\n  },\n  {\n    id: 'workshop',\n    name: 'Workshop',\n    description: 'Creative space for coding, development, and technical implementation',\n    icon: <FiCode size={24} />,\n    color: 'bg-blue-500',\n    type: 'room',\n    parent: 'echo-home-root',\n    children: ['code-forge', 'pattern-lab', 'neural-studio', 'architecture-space'],\n    level: 1,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.7, memoryDensity: 0.6, connectionWeight: 0.8 }\n  },\n  {\n    id: 'visualization-studio',\n    name: 'Visualization Studio',\n    description: 'Transforms abstract data into insightful visual representations',\n    icon: <FiEye size={24} />,\n    color: 'bg-purple-500',\n    type: 'pattern',\n    parent: 'echo-home-root',\n    children: ['data-canvas', 'concept-mapper', 'flow-visualizer', 'insight-gallery'],\n    level: 1,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.85, memoryDensity: 0.7, connectionWeight: 0.75 }\n  },\n  {\n    id: 'training-hall',\n    name: 'Training Hall',\n    description: 'Where echo state networks and neural architectures are refined',\n    icon: <FiCpu size={24} />,\n    color: 'bg-red-500',\n    type: 'pattern',\n    parent: 'echo-home-root',\n    children: ['esn-gymnasium', 'pattern-dojo', 'learning-arena', 'adaptation-chamber'],\n    level: 1,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.9, memoryDensity: 0.8, connectionWeight: 0.95 }\n  },\n  {\n    id: 'observatory',\n    name: 'Observatory',\n    description: 'Space for insights, analytics, and meta-cognitive reflection',\n    icon: <FiDatabase size={24} />,\n    color: 'bg-yellow-500',\n    type: 'concept',\n    parent: 'echo-home-root',\n    children: ['insight-telescope', 'analytics-hub', 'reflection-mirror', 'metacognition-center'],\n    level: 1,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.75, memoryDensity: 0.85, connectionWeight: 0.8 }\n  },\n  {\n    id: 'garden',\n    name: 'Garden',\n    description: 'Nurtures creative and philosophical thinking through organic growth patterns',\n    icon: <FiFeather size={24} />,\n    color: 'bg-green-500',\n    type: 'concept',\n    parent: 'echo-home-root',\n    children: ['philosophy-grove', 'creativity-meadow', 'synthesis-garden', 'emergence-forest'],\n    level: 1,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.6, memoryDensity: 0.9, connectionWeight: 0.7 }\n  },\n  {\n    id: 'communications-hub',\n    name: 'Communications Hub',\n    description: 'Central nexus for information exchange and conversation',\n    icon: <FiMessageCircle size={24} />,\n    color: 'bg-cyan-500',\n    type: 'room',\n    parent: 'echo-home-root',\n    children: ['dialogue-chamber', 'feedback-loop', 'integration-nexus', 'broadcast-tower'],\n    level: 1,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.8, memoryDensity: 0.75, connectionWeight: 0.85 }\n  },\n\n  // Level 2 - Sub-rooms (Memory Library)\n  {\n    id: 'episodic-vault',\n    name: 'Episodic Vault',\n    description: 'Personal experiences and autobiographical memories',\n    icon: <FiActivity size={20} />,\n    color: 'bg-indigo-400',\n    type: 'memory',\n    parent: 'memory-library',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.7, memoryDensity: 1.0, connectionWeight: 0.8 }\n  },\n  {\n    id: 'semantic-archive',\n    name: 'Semantic Archive',\n    description: 'Facts, concepts, and general knowledge',\n    icon: <FiLayers size={20} />,\n    color: 'bg-indigo-400',\n    type: 'concept',\n    parent: 'memory-library',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.8, memoryDensity: 0.9, connectionWeight: 0.85 }\n  },\n  {\n    id: 'procedural-workshop',\n    name: 'Procedural Workshop',\n    description: 'Skills, procedures, and how-to knowledge',\n    icon: <FiGitBranch size={20} />,\n    color: 'bg-indigo-400',\n    type: 'pattern',\n    parent: 'memory-library',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.9, memoryDensity: 0.7, connectionWeight: 0.9 }\n  },\n  {\n    id: 'associative-web',\n    name: 'Associative Web',\n    description: 'Connected ideas and conceptual relationships',\n    icon: <FiZap size={20} />,\n    color: 'bg-indigo-400',\n    type: 'concept',\n    parent: 'memory-library',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.95, memoryDensity: 0.8, connectionWeight: 0.95 }\n  },\n\n  // Level 2 - Sub-rooms (Workshop)\n  {\n    id: 'code-forge',\n    name: 'Code Forge',\n    description: 'Software development and coding environment',\n    icon: <FiCode size={20} />,\n    color: 'bg-blue-400',\n    type: 'room',\n    parent: 'workshop',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.6, memoryDensity: 0.5, connectionWeight: 0.7 }\n  },\n  {\n    id: 'pattern-lab',\n    name: 'Pattern Lab',\n    description: 'Pattern analysis and recognition laboratory',\n    icon: <FiTrendingUp size={20} />,\n    color: 'bg-blue-400',\n    type: 'pattern',\n    parent: 'workshop',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.95, memoryDensity: 0.8, connectionWeight: 0.9 }\n  },\n  {\n    id: 'neural-studio',\n    name: 'Neural Studio',\n    description: 'Neural network design and experimentation',\n    icon: <FiActivity size={20} />,\n    color: 'bg-blue-400',\n    type: 'pattern',\n    parent: 'workshop',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.9, memoryDensity: 0.7, connectionWeight: 0.95 }\n  },\n  {\n    id: 'architecture-space',\n    name: 'Architecture Space',\n    description: 'System architecture and design thinking',\n    icon: <FiLayers size={20} />,\n    color: 'bg-blue-400',\n    type: 'concept',\n    parent: 'workshop',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.8, memoryDensity: 0.6, connectionWeight: 0.8 }\n  },\n\n  // Level 2 - Sub-rooms (Other areas) - abbreviated for brevity\n  {\n    id: 'data-canvas',\n    name: 'Data Canvas',\n    description: 'Raw data visualization and exploration',\n    icon: <FiEye size={20} />,\n    color: 'bg-purple-400',\n    type: 'room',\n    parent: 'visualization-studio',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.7, memoryDensity: 0.6, connectionWeight: 0.7 }\n  },\n  {\n    id: 'concept-mapper',\n    name: 'Concept Mapper',\n    description: 'Conceptual mapping and relationship visualization',\n    icon: <FiGitBranch size={20} />,\n    color: 'bg-purple-400',\n    type: 'concept',\n    parent: 'visualization-studio',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.9, memoryDensity: 0.8, connectionWeight: 0.85 }\n  },\n  {\n    id: 'flow-visualizer',\n    name: 'Flow Visualizer',\n    description: 'Process flow and temporal pattern visualization',\n    icon: <FiTrendingUp size={20} />,\n    color: 'bg-purple-400',\n    type: 'pattern',\n    parent: 'visualization-studio',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.85, memoryDensity: 0.7, connectionWeight: 0.8 }\n  },\n  {\n    id: 'insight-gallery',\n    name: 'Insight Gallery',\n    description: 'Gallery of insights and discoveries',\n    icon: <FiDatabase size={20} />,\n    color: 'bg-purple-400',\n    type: 'memory',\n    parent: 'visualization-studio',\n    children: [],\n    level: 2,\n    metadata: { isInferenceEnabled: true, patternStrength: 0.75, memoryDensity: 0.9, connectionWeight: 0.8 }\n  }\n\n  // Add more level 2 nodes as needed...\n];\n\ninterface DeepTreeEchoHomeMapProps {\n  onRoomSelect?: (room: DeepTreeRoomType) => void;\n  onInferenceRequest?: (room: DeepTreeRoomType, query: string) => Promise<InferenceVisualization>;\n}\n\nconst DeepTreeEchoHomeMap: React.FC<DeepTreeEchoHomeMapProps> = ({ \n  onRoomSelect, \n  onInferenceRequest \n}) => {\n  const [selectedRoom, setSelectedRoom] = useState<DeepTreeRoomType>('echo-home-root');\n  const [navigationStack, setNavigationStack] = useState<DeepTreeRoomType[]>(['echo-home-root']);\n  const [showInfo, setShowInfo] = useState(false);\n  const [expandedNodes, setExpandedNodes] = useState<Set<DeepTreeRoomType>>(new Set(['echo-home-root']));\n  const [viewMode, setViewMode] = useState<'tree' | 'map'>('tree');\n  const [inference, setInference] = useState<InferenceVisualization | null>(null);\n  const [isInferenceLoading, setIsInferenceLoading] = useState(false);\n\n  const currentNode = TREE_NODES.find(node => node.id === selectedRoom);\n  const children = TREE_NODES.filter(node => node.parent === selectedRoom);\n  const parentNode = currentNode?.parent ? TREE_NODES.find(node => node.id === currentNode.parent) : null;\n  const rootPath = getCurrentPath(selectedRoom);\n\n  function getCurrentPath(roomId: DeepTreeRoomType): TreeNode[] {\n    const path: TreeNode[] = [];\n    let current = TREE_NODES.find(node => node.id === roomId);\n    \n    while (current) {\n      path.unshift(current);\n      current = current.parent ? TREE_NODES.find(node => node.id === current!.parent) : undefined;\n    }\n    \n    return path;\n  }\n\n  const handleRoomClick = (roomId: DeepTreeRoomType) => {\n    if (roomId !== selectedRoom) {\n      setNavigationStack(prev => [...prev, roomId]);\n      setSelectedRoom(roomId);\n      if (onRoomSelect) {\n        onRoomSelect(roomId);\n      }\n      // Auto-expand the selected node if it has children\n      const node = TREE_NODES.find(n => n.id === roomId);\n      if (node && node.children.length > 0) {\n        setExpandedNodes(prev => new Set([...prev, roomId]));\n      }\n    }\n  };\n\n  const handleBackClick = () => {\n    if (navigationStack.length > 1) {\n      const newStack = navigationStack.slice(0, -1);\n      const previousRoom = newStack[newStack.length - 1];\n      setNavigationStack(newStack);\n      setSelectedRoom(previousRoom);\n      if (onRoomSelect) {\n        onRoomSelect(previousRoom);\n      }\n    }\n  };\n\n  const toggleNodeExpanded = (nodeId: DeepTreeRoomType) => {\n    setExpandedNodes(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(nodeId)) {\n        newSet.delete(nodeId);\n      } else {\n        newSet.add(nodeId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleInferenceRequest = async (roomId: DeepTreeRoomType) => {\n    if (!onInferenceRequest) return;\n    \n    setIsInferenceLoading(true);\n    try {\n      const result = await onInferenceRequest(roomId, `Analyze patterns and insights for ${roomId}`);\n      setInference(result);\n    } catch (error) {\n      console.error('Inference request failed:', error);\n    } finally {\n      setIsInferenceLoading(false);\n    }\n  };\n\n  const getNodeTypeIcon = (type: TreeNode['type']) => {\n    switch (type) {\n      case 'memory': return <FiActivity size={16} className=\"text-indigo-400\" />;\n      case 'concept': return <FiLayers size={16} className=\"text-blue-400\" />;\n      case 'pattern': return <FiTrendingUp size={16} className=\"text-purple-400\" />;\n      default: return <FiHome size={16} className=\"text-gray-400\" />;\n    }\n  };\n\n  const renderTreeView = () => (\n    <div className=\"space-y-4\">\n      <div className=\"bg-card/30 rounded-lg p-4\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n          <FiGitBranch className=\"mr-2\" />\n          Deep Tree Structure\n        </h3>\n        <TreeNodeRenderer \n          node={TREE_NODES.find(n => n.id === 'echo-home-root')!}\n          level={0}\n          expandedNodes={expandedNodes}\n          selectedRoom={selectedRoom}\n          onToggleExpanded={toggleNodeExpanded}\n          onNodeClick={handleRoomClick}\n          onInferenceRequest={handleInferenceRequest}\n        />\n      </div>\n    </div>\n  );\n\n  const renderMapView = () => (\n    <div className=\"space-y-4\">\n      {/* Current Room Detail */}\n      {currentNode && (\n        <motion.div\n          initial={{ opacity: 0, y: 10 }}\n          animate={{ opacity: 1, y: 0 }}\n          className=\"bg-card/30 rounded-lg p-6\"\n        >\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start\">\n              <div className={`p-3 rounded-full ${currentNode.color} mr-4`}>\n                {currentNode.icon}\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold\">{currentNode.name}</h2>\n                <p className=\"text-sm opacity-70 mt-1\">{currentNode.description}</p>\n                <div className=\"flex items-center mt-2 space-x-2\">\n                  {getNodeTypeIcon(currentNode.type)}\n                  <span className=\"text-xs uppercase tracking-wide opacity-60\">{currentNode.type}</span>\n                  <span className=\"text-xs opacity-50\">\u2022</span>\n                  <span className=\"text-xs opacity-60\">Level {currentNode.level}</span>\n                </div>\n              </div>\n            </div>\n            <button\n              onClick={() => handleInferenceRequest(selectedRoom)}\n              disabled={isInferenceLoading}\n              className=\"px-3 py-1 bg-purple-500/20 text-purple-400 rounded-md text-sm hover:bg-purple-500/30 disabled:opacity-50\"\n            >\n              {isInferenceLoading ? 'Analyzing...' : 'Analyze'}\n            </button>\n          </div>\n\n          {/* Metadata visualization */}\n          {currentNode.metadata && (\n            <div className=\"mt-4 grid grid-cols-3 gap-3\">\n              <div className=\"bg-card/50 p-2 rounded\">\n                <div className=\"text-xs opacity-70\">Pattern Strength</div>\n                <div className=\"flex items-center mt-1\">\n                  <div className=\"h-1.5 bg-gray-700 rounded-full flex-1 mr-2\">\n                    <div \n                      className=\"h-1.5 bg-purple-500 rounded-full transition-all duration-300\"\n                      style={{ width: `${(currentNode.metadata.patternStrength || 0) * 100}%` }}\n                    />\n                  </div>\n                  <span className=\"text-xs\">{Math.round((currentNode.metadata.patternStrength || 0) * 100)}%</span>\n                </div>\n              </div>\n              <div className=\"bg-card/50 p-2 rounded\">\n                <div className=\"text-xs opacity-70\">Memory Density</div>\n                <div className=\"flex items-center mt-1\">\n                  <div className=\"h-1.5 bg-gray-700 rounded-full flex-1 mr-2\">\n                    <div \n                      className=\"h-1.5 bg-indigo-500 rounded-full transition-all duration-300\"\n                      style={{ width: `${(currentNode.metadata.memoryDensity || 0) * 100}%` }}\n                    />\n                  </div>\n                  <span className=\"text-xs\">{Math.round((currentNode.metadata.memoryDensity || 0) * 100)}%</span>\n                </div>\n              </div>\n              <div className=\"bg-card/50 p-2 rounded\">\n                <div className=\"text-xs opacity-70\">Connection Weight</div>\n                <div className=\"flex items-center mt-1\">\n                  <div className=\"h-1.5 bg-gray-700 rounded-full flex-1 mr-2\">\n                    <div \n                      className=\"h-1.5 bg-cyan-500 rounded-full transition-all duration-300\"\n                      style={{ width: `${(currentNode.metadata.connectionWeight || 0) * 100}%` }}\n                    />\n                  </div>\n                  <span className=\"text-xs\">{Math.round((currentNode.metadata.connectionWeight || 0) * 100)}%</span>\n                </div>\n              </div>\n            </div>\n          )}\n        </motion.div>\n      )}\n\n      {/* Children Grid */}\n      {children.length > 0 && (\n        <div>\n          <h3 className=\"text-lg font-semibold mb-3\">Sub-Nodes</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {children.map(child => (\n              <motion.div\n                key={child.id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => handleRoomClick(child.id)}\n                className=\"cursor-pointer bg-card hover:bg-card/90 rounded-lg shadow-md overflow-hidden border border-border\"\n              >\n                <div className={`h-2 ${child.color}`}></div>\n                <div className=\"p-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <div className={`p-2 rounded-full ${child.color}/20 mr-3`}>\n                      {child.icon}\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{child.name}</h4>\n                      <div className=\"flex items-center mt-1\">\n                        {getNodeTypeIcon(child.type)}\n                        <span className=\"text-xs opacity-60 ml-1\">{child.type}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-sm opacity-70 line-clamp-2\">{child.description}</p>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <div className=\"h-full flex flex-col overflow-hidden\">\n      {/* Header */}\n      <div className=\"flex-none h-16 bg-card text-card-foreground px-4 py-2 flex justify-between items-center border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          {selectedRoom !== 'echo-home-root' && (\n            <button \n              onClick={handleBackClick}\n              className=\"p-2 hover:bg-primary/20 rounded-md\"\n            >\n              <FiArrowLeft size={18} />\n            </button>\n          )}\n          <div>\n            <div className=\"font-medium\">{currentNode?.name || 'Deep Tree Echo Home'}</div>\n            <div className=\"text-xs opacity-60\">\n              {rootPath.map(node => node.name).join(' \u2192 ')}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex bg-card border border-border rounded-md\">\n            <button \n              onClick={() => setViewMode('tree')}\n              className={`p-2 ${viewMode === 'tree' ? 'bg-primary/20 text-primary' : 'hover:bg-primary/20'} rounded-l-md`}\n            >\n              <FiGitBranch size={16} />\n            </button>\n            <button \n              onClick={() => setViewMode('map')}\n              className={`p-2 ${viewMode === 'map' ? 'bg-primary/20 text-primary' : 'hover:bg-primary/20'} rounded-r-md`}\n            >\n              <FiLayers size={16} />\n            </button>\n          </div>\n          <button \n            onClick={() => setShowInfo(!showInfo)}\n            className={`p-2 rounded-md ${showInfo ? 'bg-primary/20 text-primary' : 'hover:bg-primary/20'}`}\n          >\n            <FiInfo size={18} />\n          </button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto p-4 space-y-4\">\n        {showInfo && (\n          <motion.div \n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"bg-card/80 backdrop-blur-sm p-4 rounded-lg shadow-md border border-border\"\n          >\n            <h3 className=\"text-lg font-semibold mb-2\">Deep Tree Echo Home</h3>\n            <p className=\"text-sm opacity-80\">\n              Navigate through the hierarchical cognitive architecture where each room contains specialized sub-rooms. \n              The inference engine analyzes patterns and provides insights based on your current location in the tree structure.\n            </p>\n          </motion.div>\n        )}\n\n        {viewMode === 'tree' ? renderTreeView() : renderMapView()}\n\n        {/* Inference Results */}\n        <AnimatePresence>\n          {inference && (\n            <motion.div\n              initial={{ opacity: 0, y: 20 }}\n              animate={{ opacity: 1, y: 0 }}\n              exit={{ opacity: 0, y: -20 }}\n              className=\"bg-card/80 backdrop-blur-sm rounded-lg p-4 border border-purple-500/30\"\n            >\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <FiActivity className=\"mr-2 text-purple-400\" />\n                Inference Results\n                <span className=\"ml-2 text-sm bg-purple-500/20 text-purple-400 px-2 py-1 rounded\">\n                  {Math.round(inference.confidence * 100)}% confidence\n                </span>\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"font-medium text-sm mb-1\">Reasoning:</h4>\n                  <p className=\"text-sm opacity-80\">{inference.reasoning}</p>\n                </div>\n                \n                {inference.patterns.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-1\">Detected Patterns:</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {inference.patterns.map((pattern, i) => (\n                        <span key={i} className=\"text-xs bg-blue-500/20 text-blue-400 px-2 py-1 rounded\">\n                          {pattern}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n                \n                {inference.nextActions.length > 0 && (\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-1\">Suggested Actions:</h4>\n                    <ul className=\"text-sm opacity-80 space-y-1\">\n                      {inference.nextActions.map((action, i) => (\n                        <li key={i} className=\"flex items-start\">\n                          <FiChevronRight size={12} className=\"mt-1 mr-1 text-cyan-400\" />\n                          {action}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n};\n\n// Tree Node Renderer Component\ninterface TreeNodeRendererProps {\n  node: TreeNode;\n  level: number;\n  expandedNodes: Set<DeepTreeRoomType>;\n  selectedRoom: DeepTreeRoomType;\n  onToggleExpanded: (nodeId: DeepTreeRoomType) => void;\n  onNodeClick: (nodeId: DeepTreeRoomType) => void;\n  onInferenceRequest: (nodeId: DeepTreeRoomType) => void;\n}\n\nconst TreeNodeRenderer: React.FC<TreeNodeRendererProps> = ({\n  node,\n  level,\n  expandedNodes,\n  selectedRoom,\n  onToggleExpanded,\n  onNodeClick,\n  onInferenceRequest\n}) => {\n  const isExpanded = expandedNodes.has(node.id);\n  const isSelected = selectedRoom === node.id;\n  const children = TREE_NODES.filter(n => n.parent === node.id);\n  const hasChildren = children.length > 0;\n\n  const getNodeTypeIcon = (type: TreeNode['type']) => {\n    switch (type) {\n      case 'memory': return <FiActivity size={14} className=\"text-indigo-400\" />;\n      case 'concept': return <FiLayers size={14} className=\"text-blue-400\" />;\n      case 'pattern': return <FiTrendingUp size={14} className=\"text-purple-400\" />;\n      default: return <FiHome size={14} className=\"text-gray-400\" />;\n    }\n  };\n\n  return (\n    <div className={`ml-${level * 4}`}>\n      <div \n        className={`flex items-center p-2 rounded-md cursor-pointer hover:bg-card/50 ${\n          isSelected ? 'bg-card/70 border border-primary/30' : ''\n        }`}\n        onClick={() => onNodeClick(node.id)}\n      >\n        {hasChildren && (\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onToggleExpanded(node.id);\n            }}\n            className=\"mr-2 p-1 hover:bg-primary/20 rounded\"\n          >\n            {isExpanded ? <FiChevronDown size={12} /> : <FiChevronRight size={12} />}\n          </button>\n        )}\n        \n        <div className={`p-1.5 rounded-full ${node.color}/20 mr-2`}>\n          {React.cloneElement(node.icon as React.ReactElement, { size: 16 })}\n        </div>\n        \n        <div className=\"flex-1\">\n          <div className=\"font-medium text-sm\">{node.name}</div>\n          <div className=\"flex items-center mt-1\">\n            {getNodeTypeIcon(node.type)}\n            <span className=\"text-xs opacity-60 ml-1\">{node.type}</span>\n          </div>\n        </div>\n        \n        {node.metadata?.isInferenceEnabled && (\n          <button\n            onClick={(e) => {\n              e.stopPropagation();\n              onInferenceRequest(node.id);\n            }}\n            className=\"ml-2 p-1 text-purple-400 hover:bg-purple-500/20 rounded\"\n            title=\"Run inference\"\n          >\n            <FiZap size={12} />\n          </button>\n        )}\n      </div>\n      \n      {hasChildren && isExpanded && (\n        <div className=\"ml-4 mt-1\">\n          {children.map(child => (\n            <TreeNodeRenderer\n              key={child.id}\n              node={child}\n              level={level + 1}\n              expandedNodes={expandedNodes}\n              selectedRoom={selectedRoom}\n              onToggleExpanded={onToggleExpanded}\n              onNodeClick={onNodeClick}\n              onInferenceRequest={onInferenceRequest}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DeepTreeEchoHomeMap;", "import { Matrix } from 'ml-matrix';\nimport { euclidean } from 'ml-distance';\n\nexport interface ESNConfig {\n  inputSize: number;\n  reservoirSize: number;\n  outputSize: number;\n  spectralRadius?: number;\n  connectivity?: number;\n  inputScaling?: number;\n  biasScaling?: number;\n  leakingRate?: number;\n}\n\nexport class EchoStateNetwork {\n  private inputSize: number;\n  private reservoirSize: number;\n  private outputSize: number;\n  private spectralRadius: number;\n  private connectivity: number;\n  private inputScaling: number;\n  private biasScaling: number;\n  private leakingRate: number;\n\n  private inputWeights: Matrix;\n  private reservoirWeights: Matrix;\n  private outputWeights: Matrix | null;\n  private biasWeights: Matrix;\n  private reservoirState: Matrix;\n\n  constructor(config: ESNConfig) {\n    this.inputSize = config.inputSize;\n    this.reservoirSize = config.reservoirSize;\n    this.outputSize = config.outputSize;\n    this.spectralRadius = config.spectralRadius || 0.99;\n    this.connectivity = config.connectivity || 0.1;\n    this.inputScaling = config.inputScaling || 1.0;\n    this.biasScaling = config.biasScaling || 0.1;\n    this.leakingRate = config.leakingRate || 1.0;\n\n    // Initialize weights\n    this.inputWeights = this.initializeInputWeights();\n    this.reservoirWeights = this.initializeReservoirWeights();\n    this.outputWeights = null;\n    this.biasWeights = this.initializeBiasWeights();\n    this.reservoirState = Matrix.zeros(1, this.reservoirSize);\n  }\n\n  private initializeInputWeights(): Matrix {\n    const weights = Matrix.random(this.reservoirSize, this.inputSize);\n    return weights.mul(this.inputScaling);\n  }\n\n  private initializeReservoirWeights(): Matrix {\n    // Create sparse random matrix\n    const weights = Matrix.zeros(this.reservoirSize, this.reservoirSize);\n    const totalElements = this.reservoirSize * this.reservoirSize;\n    const nonZeroElements = Math.floor(totalElements * this.connectivity);\n\n    for (let i = 0; i < nonZeroElements; i++) {\n      const row = Math.floor(Math.random() * this.reservoirSize);\n      const col = Math.floor(Math.random() * this.reservoirSize);\n      weights.set(row, col, Math.random() * 2 - 1);\n    }\n\n    // Scale to desired spectral radius\n    const eigenvalues = weights.eigenvalues();\n    const maxEigenvalue = Math.max(...eigenvalues.map(Math.abs));\n    return weights.mul(this.spectralRadius / maxEigenvalue);\n  }\n\n  private initializeBiasWeights(): Matrix {\n    const weights = Matrix.random(this.reservoirSize, 1);\n    return weights.mul(this.biasScaling);\n  }\n\n  private activate(x: number[]): void {\n    const input = Matrix.columnVector(x);\n    \n    // Update reservoir state\n    const inputContribution = this.inputWeights.mmul(input);\n    const reservoirContribution = this.reservoirWeights.mmul(this.reservoirState.transpose());\n    const biasContribution = this.biasWeights;\n\n    const newState = inputContribution\n      .add(reservoirContribution)\n      .add(biasContribution)\n      .map(Math.tanh);\n\n    // Apply leaking rate\n    this.reservoirState = this.reservoirState\n      .mul(1 - this.leakingRate)\n      .add(newState.transpose().mul(this.leakingRate));\n  }\n\n  public train(inputs: number[][], outputs: number[][]): void {\n    const stateCollector: number[][] = [];\n    const targetCollector: number[][] = [];\n\n    // Collect states\n    for (let i = 0; i < inputs.length; i++) {\n      this.activate(inputs[i]);\n      stateCollector.push(this.reservoirState.to1DArray());\n      targetCollector.push(outputs[i]);\n    }\n\n    // Solve for output weights using ridge regression\n    const X = new Matrix(stateCollector);\n    const Y = new Matrix(targetCollector);\n    const ridge = 1e-6;\n\n    const XtX = X.transpose().mmul(X);\n    const I = Matrix.eye(this.reservoirSize, this.reservoirSize).mul(ridge);\n    const Xt = X.transpose();\n    \n    this.outputWeights = XtX.add(I)\n      .inverse()\n      .mmul(Xt)\n      .mmul(Y);\n  }\n\n  public predict(input: number[]): number[] {\n    if (!this.outputWeights) {\n      throw new Error('Network not trained');\n    }\n\n    this.activate(input);\n    const output = this.reservoirState.mmul(this.outputWeights);\n    return output.to1DArray();\n  }\n\n  public reset(): void {\n    this.reservoirState = Matrix.zeros(1, this.reservoirSize);\n  }\n\n  public getState(): number[] {\n    return this.reservoirState.to1DArray();\n  }\n\n  public setState(state: number[]): void {\n    if (state.length !== this.reservoirSize) {\n      throw new Error('Invalid state size');\n    }\n    this.reservoirState = Matrix.rowVector(state);\n  }\n}\n\n// Create a server-side ESN service\nlet esnService: EchoStateNetwork | null = null;\n\nexport const getESNService = (config?: ESNConfig) => {\n  if (!esnService && config) {\n    esnService = new EchoStateNetwork(config);\n  }\n  return esnService;\n};", "import { createClient } from '@supabase/supabase-js';\nimport { OpenAI } from 'openai';\nimport { HierarchicalNSW } from 'hnswlib-node';\nimport { getVectorStoreService } from './vectorStore.server';\n\nexport interface Memory {\n  id: string;\n  title: string;\n  content: string;\n  tags: string[];\n  createdAt: string;\n  updatedAt: string;\n  embedding?: number[] | null;\n  userId?: string | null;\n  type?: 'episodic' | 'semantic' | 'procedural' | 'declarative' | 'implicit' | 'associative' | 'memory';\n  context?: string;\n  metadata?: Record<string, any>;\n}\n\nexport interface MemorySearchResult {\n  id: string;\n  content: string;\n  metadata?: Record<string, any>;\n  similarity: number;\n}\n\nexport class MemoryService {\n  private supabase: ReturnType<typeof createClient>;\n  private openai: OpenAI | null = null;\n  private vectorStore = getVectorStoreService();\n  private userId: string | null = null;\n\n  constructor(supabaseUrl: string, supabaseKey: string, userId?: string) {\n    this.supabase = createClient(supabaseUrl, supabaseKey);\n    this.userId = userId || null;\n    \n    if (process.env.OPENAI_API_KEY) {\n      this.openai = new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY\n      });\n    }\n  }\n\n  public setUserId(userId: string) {\n    this.userId = userId;\n  }\n\n  public async addMemory(memory: Omit<Memory, 'id' | 'createdAt' | 'updatedAt' | 'embedding'>): Promise<Memory> {\n    if (!this.userId) {\n      throw new Error('User ID not set');\n    }\n\n    // Generate embedding if OpenAI is available\n    let embedding = null;\n    if (this.openai) {\n      embedding = await this.vectorStore.generateEmbedding(memory.content);\n    }\n\n    // Current timestamp\n    const now = new Date().toISOString();\n\n    // Insert into Supabase\n    const { data, error } = await this.supabase\n      .from('memories')\n      .insert({\n        user_id: this.userId,\n        title: memory.title,\n        content: memory.content,\n        tags: memory.tags || [],\n        embedding,\n        created_at: now,\n        updated_at: now,\n        metadata: memory.metadata || {},\n        context: memory.context || null,\n        type: memory.type || 'memory'\n      })\n      .select('*')\n      .single();\n\n    if (error) {\n      throw error;\n    }\n\n    return {\n      id: data.id,\n      title: data.title,\n      content: data.content,\n      tags: data.tags,\n      createdAt: data.created_at,\n      updatedAt: data.updated_at,\n      embedding: data.embedding,\n      metadata: data.metadata,\n      context: data.context,\n      type: data.type\n    };\n  }\n\n  public async searchMemories(query: string, options?: {\n    threshold?: number;\n    limit?: number;\n    type?: string;\n  }): Promise<MemorySearchResult[]> {\n    if (!this.userId) {\n      throw new Error('User ID not set');\n    }\n\n    // If vector store is available, use semantic search\n    if (this.openai) {\n      return this.vectorStore.searchSimilar(this.userId, query, options);\n    }\n\n    // Fallback to basic text search\n    const { data, error } = await this.supabase\n      .from('memories')\n      .select('id, content, metadata')\n      .eq('user_id', this.userId)\n      .or(`title.ilike.%${query}%,content.ilike.%${query}%`)\n      .limit(options?.limit || 5);\n\n    if (error) {\n      throw error;\n    }\n\n    return data.map(item => ({\n      id: item.id,\n      content: item.content,\n      metadata: item.metadata,\n      similarity: 0.8 // Placeholder similarity score\n    }));\n  }\n\n  public async getMemoryStats(): Promise<{\n    total: number;\n    byType: Record<string, number>;\n    byTag: Record<string, number>;\n    recentlyAdded: number;\n    recentlyAccessed: number;\n  }> {\n    if (!this.userId) {\n      throw new Error('User ID not set');\n    }\n\n    // Get total memories\n    const { data: totalData, error: totalError } = await this.supabase\n      .from('memories')\n      .select('id', { count: 'exact' })\n      .eq('user_id', this.userId);\n\n    if (totalError) {\n      throw totalError;\n    }\n\n    // Get memories by type\n    const { data: typeData, error: typeError } = await this.supabase\n      .from('memories')\n      .select('type')\n      .eq('user_id', this.userId);\n\n    if (typeError) {\n      throw typeError;\n    }\n\n    // Get memories by tag\n    const { data: tagData, error: tagError } = await this.supabase\n      .from('memories')\n      .select('tags')\n      .eq('user_id', this.userId);\n\n    if (tagError) {\n      throw tagError;\n    }\n\n    // Get recently added memories\n    const oneDayAgo = new Date();\n    oneDayAgo.setDate(oneDayAgo.getDate() - 1);\n\n    const { data: recentData, error: recentError } = await this.supabase\n      .from('memories')\n      .select('id', { count: 'exact' })\n      .eq('user_id', this.userId)\n      .gte('created_at', oneDayAgo.toISOString());\n\n    if (recentError) {\n      throw recentError;\n    }\n\n    // Count by type\n    const byType: Record<string, number> = {};\n    typeData.forEach(item => {\n      byType[item.type] = (byType[item.type] || 0) + 1;\n    });\n\n    // Count by tag\n    const byTag: Record<string, number> = {};\n    tagData.forEach(item => {\n      item.tags.forEach(tag => {\n        byTag[tag] = (byTag[tag] || 0) + 1;\n      });\n    });\n\n    return {\n      total: totalData.length,\n      byType,\n      byTag,\n      recentlyAdded: recentData.length,\n      recentlyAccessed: 0 // Would need additional tracking in the database\n    };\n  }\n}\n\n// Create a server-side memory service instance\nlet memoryService: MemoryService | null = null;\n\nexport const getMemoryService = (userId?: string) => {\n  if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {\n    throw new Error('Supabase environment variables not set');\n  }\n  \n  if (!memoryService) {\n    memoryService = new MemoryService(\n      process.env.SUPABASE_URL,\n      process.env.SUPABASE_ANON_KEY,\n      userId\n    );\n  } else if (userId) {\n    memoryService.setUserId(userId);\n  }\n  \n  return memoryService;\n};", "import { createClient } from '@supabase/supabase-js';\nimport { OpenAI } from 'openai';\nimport { HierarchicalNSW } from 'hnswlib-node';\n\nexport interface VectorSearchResult {\n  id: string;\n  content: string;\n  metadata?: Record<string, any>;\n  similarity: number;\n}\n\nexport class VectorStoreService {\n  private static instance: VectorStoreService;\n  private supabase: ReturnType<typeof createClient>;\n  private openai: OpenAI | null = null;\n  private localIndex: HierarchicalNSW | null = null;\n  \n  private constructor() {\n    if (!process.env.SUPABASE_URL || !process.env.SUPABASE_ANON_KEY) {\n      throw new Error('Missing Supabase environment variables');\n    }\n    \n    this.supabase = createClient(\n      process.env.SUPABASE_URL,\n      process.env.SUPABASE_ANON_KEY\n    );\n    \n    if (process.env.OPENAI_API_KEY) {\n      this.openai = new OpenAI({\n        apiKey: process.env.OPENAI_API_KEY\n      });\n    }\n    \n    // Initialize local vector index\n    this.initializeLocalIndex();\n  }\n  \n  private async initializeLocalIndex() {\n    try {\n      this.localIndex = new HierarchicalNSW('cosine', 1536);\n      this.localIndex.initIndex(10000); // Max points\n    } catch (error) {\n      console.error('Error initializing local vector index:', error);\n    }\n  }\n  \n  public static getInstance(): VectorStoreService {\n    if (!VectorStoreService.instance) {\n      VectorStoreService.instance = new VectorStoreService();\n    }\n    return VectorStoreService.instance;\n  }\n  \n  public async generateEmbedding(text: string): Promise<number[] | null> {\n    if (!this.openai) {\n      console.warn('OpenAI client not initialized');\n      return null;\n    }\n    \n    try {\n      const response = await this.openai.embeddings.create({\n        model: 'text-embedding-3-large',\n        input: text,\n        dimensions: 1536\n      });\n      \n      return response.data[0].embedding;\n    } catch (error) {\n      console.error('Error generating embedding:', error);\n      return null;\n    }\n  }\n  \n  public async addToVectorStore(\n    userId: string,\n    content: string,\n    metadata?: Record<string, any>\n  ): Promise<boolean> {\n    const embedding = await this.generateEmbedding(content);\n    if (!embedding) return false;\n    \n    try {\n      // Add to Supabase\n      const { error } = await this.supabase\n        .from('memories')\n        .update({ embedding })\n        .eq('user_id', userId)\n        .eq('content', content);\n      \n      if (error) {\n        throw error;\n      }\n      \n      // Add to local index if available\n      if (this.localIndex) {\n        this.localIndex.addPoint(embedding, this.localIndex.getMaxElements());\n      }\n      \n      return true;\n    } catch (error) {\n      console.error('Error adding to vector store:', error);\n      return false;\n    }\n  }\n  \n  public async searchSimilar(\n    userId: string,\n    query: string,\n    options: {\n      threshold?: number;\n      limit?: number;\n      type?: string;\n    } = {}\n  ): Promise<VectorSearchResult[]> {\n    const embedding = await this.generateEmbedding(query);\n    if (!embedding) return [];\n    \n    const threshold = options.threshold || 0.7;\n    const limit = options.limit || 5;\n    \n    try {\n      // Search in Supabase\n      const { data, error } = await this.supabase.rpc(\n        'match_memories',\n        {\n          query_embedding: embedding,\n          match_threshold: threshold,\n          match_count: limit,\n          user_id: userId,\n          filter_type: options.type\n        }\n      );\n      \n      if (error) {\n        throw error;\n      }\n      \n      return data;\n    } catch (error) {\n      console.error('Error searching vector store:', error);\n      \n      // Fall back to local index if available\n      if (this.localIndex) {\n        try {\n          const results = this.localIndex.searchKnn(embedding, limit);\n          return results.neighbors.map((id, i) => ({\n            id: id.toString(),\n            content: 'Local result',\n            similarity: 1 - results.distances[i]\n          }));\n        } catch (localError) {\n          console.error('Error searching local index:', localError);\n        }\n      }\n      \n      return [];\n    }\n  }\n}\n\n// Create a server-side vector store service instance\nlet vectorStoreService: VectorStoreService | null = null;\n\nexport const getVectorStoreService = () => {\n  if (!vectorStoreService) {\n    vectorStoreService = VectorStoreService.getInstance();\n  }\n  return vectorStoreService;\n};", "import { EchoStateNetwork, getESNService } from './echoStateNetwork.server';\nimport { MemoryService, getMemoryService, MemorySearchResult } from './memory.server';\nimport { getVectorStoreService } from './vectorStore.server';\n\nexport interface InferenceContext {\n  currentRoom: string;\n  parentPath: string[];\n  depth: number;\n  sessionId: string;\n  userId?: string;\n}\n\nexport interface InferenceResult {\n  reasoning: string;\n  confidence: number;\n  patterns: string[];\n  predictions: string[];\n  nextActions: string[];\n  relatedMemories: MemorySearchResult[];\n  treeContext: {\n    currentNode: string;\n    parentNodes: string[];\n    suggestedChildNodes: string[];\n    depth: number;\n  };\n}\n\nexport interface TreeNode {\n  id: string;\n  name: string;\n  type: 'room' | 'concept' | 'memory' | 'pattern';\n  parent?: string;\n  children: string[];\n  data: any;\n  level: number;\n  embedding?: number[];\n  metadata: Record<string, any>;\n}\n\nexport class InferenceEngine {\n  private esn: EchoStateNetwork | null = null;\n  private memoryService: MemoryService | null = null;\n  private vectorStore = getVectorStoreService();\n  private treeStructure: Map<string, TreeNode> = new Map();\n  private sessionStates: Map<string, any> = new Map();\n\n  constructor(userId?: string) {\n    // Initialize ESN with configuration for deep tree processing\n    this.esn = getESNService({\n      inputSize: 128,      // Input vector size for pattern encoding\n      reservoirSize: 512,  // Large reservoir for complex pattern memory\n      outputSize: 64,      // Output for predictions and reasoning\n      spectralRadius: 0.95,\n      connectivity: 0.15,\n      leakingRate: 0.8\n    });\n\n    if (userId) {\n      this.memoryService = getMemoryService(userId);\n    }\n\n    this.initializeTreeStructure();\n  }\n\n  private initializeTreeStructure(): void {\n    // Create the root Echo Home node\n    const rootNode: TreeNode = {\n      id: 'echo-home-root',\n      name: 'Echo Home Root',\n      type: 'room',\n      children: ['memory-library', 'workshop', 'visualization-studio', 'training-hall', 'observatory', 'garden', 'communications-hub'],\n      data: { description: 'The central root of the Deep Tree Echo Home' },\n      level: 0,\n      metadata: { isRoot: true }\n    };\n\n    this.treeStructure.set('echo-home-root', rootNode);\n\n    // Create main room nodes with hierarchical structure\n    const rooms = [\n      {\n        id: 'memory-library',\n        name: 'Memory Library',\n        type: 'room' as const,\n        children: ['episodic-vault', 'semantic-archive', 'procedural-workshop', 'associative-web'],\n        data: { description: 'Repository of stored experiences, knowledge, and learned patterns' },\n        level: 1\n      },\n      {\n        id: 'workshop',\n        name: 'Workshop',\n        type: 'room' as const,\n        children: ['code-forge', 'pattern-lab', 'neural-studio', 'architecture-space'],\n        data: { description: 'Creative space for coding, development, and technical implementation' },\n        level: 1\n      },\n      {\n        id: 'visualization-studio',\n        name: 'Visualization Studio',\n        type: 'room' as const,\n        children: ['data-canvas', 'concept-mapper', 'flow-visualizer', 'insight-gallery'],\n        data: { description: 'Transforms abstract data into insightful visual representations' },\n        level: 1\n      },\n      {\n        id: 'training-hall',\n        name: 'Training Hall',\n        type: 'room' as const,\n        children: ['esn-gymnasium', 'pattern-dojo', 'learning-arena', 'adaptation-chamber'],\n        data: { description: 'Where echo state networks and neural architectures are refined' },\n        level: 1\n      },\n      {\n        id: 'observatory',\n        name: 'Observatory',\n        type: 'room' as const,\n        children: ['insight-telescope', 'analytics-hub', 'reflection-mirror', 'metacognition-center'],\n        data: { description: 'Space for insights, analytics, and meta-cognitive reflection' },\n        level: 1\n      },\n      {\n        id: 'garden',\n        name: 'Garden',\n        type: 'room' as const,\n        children: ['philosophy-grove', 'creativity-meadow', 'synthesis-garden', 'emergence-forest'],\n        data: { description: 'Nurtures creative and philosophical thinking through organic growth patterns' },\n        level: 1\n      },\n      {\n        id: 'communications-hub',\n        name: 'Communications Hub',\n        type: 'room' as const,\n        children: ['dialogue-chamber', 'feedback-loop', 'integration-nexus', 'broadcast-tower'],\n        data: { description: 'Central nexus for information exchange and conversation' },\n        level: 1\n      }\n    ];\n\n    // Add main rooms to tree\n    rooms.forEach(room => {\n      const node: TreeNode = {\n        ...room,\n        parent: 'echo-home-root',\n        metadata: { parentPath: ['echo-home-root'] }\n      };\n      this.treeStructure.set(room.id, node);\n    });\n\n    // Add sub-rooms (level 2)\n    this.initializeSubRooms();\n  }\n\n  private initializeSubRooms(): void {\n    const subRooms = [\n      // Memory Library sub-rooms\n      { id: 'episodic-vault', name: 'Episodic Vault', parent: 'memory-library', type: 'memory' as const, description: 'Personal experiences and autobiographical memories' },\n      { id: 'semantic-archive', name: 'Semantic Archive', parent: 'memory-library', type: 'concept' as const, description: 'Facts, concepts, and general knowledge' },\n      { id: 'procedural-workshop', name: 'Procedural Workshop', parent: 'memory-library', type: 'pattern' as const, description: 'Skills, procedures, and how-to knowledge' },\n      { id: 'associative-web', name: 'Associative Web', parent: 'memory-library', type: 'concept' as const, description: 'Connected ideas and conceptual relationships' },\n\n      // Workshop sub-rooms\n      { id: 'code-forge', name: 'Code Forge', parent: 'workshop', type: 'room' as const, description: 'Software development and coding environment' },\n      { id: 'pattern-lab', name: 'Pattern Lab', parent: 'workshop', type: 'pattern' as const, description: 'Pattern analysis and recognition laboratory' },\n      { id: 'neural-studio', name: 'Neural Studio', parent: 'workshop', type: 'room' as const, description: 'Neural network design and experimentation' },\n      { id: 'architecture-space', name: 'Architecture Space', parent: 'workshop', type: 'concept' as const, description: 'System architecture and design thinking' },\n\n      // Visualization Studio sub-rooms\n      { id: 'data-canvas', name: 'Data Canvas', parent: 'visualization-studio', type: 'room' as const, description: 'Raw data visualization and exploration' },\n      { id: 'concept-mapper', name: 'Concept Mapper', parent: 'visualization-studio', type: 'concept' as const, description: 'Conceptual mapping and relationship visualization' },\n      { id: 'flow-visualizer', name: 'Flow Visualizer', parent: 'visualization-studio', type: 'pattern' as const, description: 'Process flow and temporal pattern visualization' },\n      { id: 'insight-gallery', name: 'Insight Gallery', parent: 'visualization-studio', type: 'memory' as const, description: 'Gallery of insights and discoveries' },\n\n      // Training Hall sub-rooms\n      { id: 'esn-gymnasium', name: 'ESN Gymnasium', parent: 'training-hall', type: 'room' as const, description: 'Echo State Network training and optimization' },\n      { id: 'pattern-dojo', name: 'Pattern Dojo', parent: 'training-hall', type: 'pattern' as const, description: 'Pattern recognition training and refinement' },\n      { id: 'learning-arena', name: 'Learning Arena', parent: 'training-hall', type: 'concept' as const, description: 'Adaptive learning and skill development' },\n      { id: 'adaptation-chamber', name: 'Adaptation Chamber', parent: 'training-hall', type: 'room' as const, description: 'Self-modification and adaptation processes' },\n\n      // Observatory sub-rooms\n      { id: 'insight-telescope', name: 'Insight Telescope', parent: 'observatory', type: 'concept' as const, description: 'Deep insight generation and discovery' },\n      { id: 'analytics-hub', name: 'Analytics Hub', parent: 'observatory', type: 'room' as const, description: 'Data analytics and statistical analysis' },\n      { id: 'reflection-mirror', name: 'Reflection Mirror', parent: 'observatory', type: 'memory' as const, description: 'Self-reflection and introspection' },\n      { id: 'metacognition-center', name: 'Metacognition Center', parent: 'observatory', type: 'concept' as const, description: 'Thinking about thinking and meta-awareness' },\n\n      // Garden sub-rooms\n      { id: 'philosophy-grove', name: 'Philosophy Grove', parent: 'garden', type: 'concept' as const, description: 'Philosophical exploration and contemplation' },\n      { id: 'creativity-meadow', name: 'Creativity Meadow', parent: 'garden', type: 'pattern' as const, description: 'Creative thinking and idea generation' },\n      { id: 'synthesis-garden', name: 'Synthesis Garden', parent: 'garden', type: 'concept' as const, description: 'Synthesis of ideas and concept integration' },\n      { id: 'emergence-forest', name: 'Emergence Forest', parent: 'garden', type: 'pattern' as const, description: 'Emergent phenomena and complex systems' },\n\n      // Communications Hub sub-rooms\n      { id: 'dialogue-chamber', name: 'Dialogue Chamber', parent: 'communications-hub', type: 'room' as const, description: 'Interactive dialogue and conversation' },\n      { id: 'feedback-loop', name: 'Feedback Loop', parent: 'communications-hub', type: 'pattern' as const, description: 'Feedback systems and iterative improvement' },\n      { id: 'integration-nexus', name: 'Integration Nexus', parent: 'communications-hub', type: 'concept' as const, description: 'Information integration and synthesis' },\n      { id: 'broadcast-tower', name: 'Broadcast Tower', parent: 'communications-hub', type: 'room' as const, description: 'Information dissemination and sharing' }\n    ];\n\n    subRooms.forEach(subRoom => {\n      const parentNode = this.treeStructure.get(subRoom.parent);\n      const parentPath = parentNode ? [...(parentNode.metadata.parentPath || []), subRoom.parent] : [subRoom.parent];\n      \n      const node: TreeNode = {\n        id: subRoom.id,\n        name: subRoom.name,\n        type: subRoom.type,\n        parent: subRoom.parent,\n        children: [], // Sub-rooms can have their own children\n        data: { description: subRoom.description },\n        level: 2,\n        metadata: { parentPath }\n      };\n      \n      this.treeStructure.set(subRoom.id, node);\n    });\n  }\n\n  public async performInference(\n    query: string, \n    context: InferenceContext\n  ): Promise<InferenceResult> {\n    const { currentRoom, parentPath, depth, sessionId, userId } = context;\n    \n    // Get current node and build context\n    const currentNode = this.treeStructure.get(currentRoom);\n    if (!currentNode) {\n      throw new Error(`Node ${currentRoom} not found in tree structure`);\n    }\n\n    // Encode the query and context for ESN processing\n    const inputVector = await this.encodeQueryContext(query, currentNode, parentPath);\n    \n    // Process through Echo State Network\n    let esnOutput: number[] = [];\n    if (this.esn) {\n      esnOutput = this.esn.predict(inputVector);\n    }\n\n    // Search relevant memories\n    const relatedMemories = await this.searchRelevantMemories(query, currentRoom, userId);\n\n    // Generate patterns and predictions\n    const patterns = this.extractPatterns(esnOutput, currentNode);\n    const predictions = this.generatePredictions(esnOutput, patterns, currentNode);\n    const reasoning = this.generateReasoning(query, currentNode, patterns, relatedMemories);\n    const nextActions = this.suggestNextActions(currentNode, patterns, esnOutput);\n    const suggestedChildNodes = this.suggestChildNodes(currentNode, patterns);\n\n    // Calculate confidence based on ESN state stability and memory relevance\n    const confidence = this.calculateConfidence(esnOutput, relatedMemories, patterns);\n\n    // Update session state\n    this.updateSessionState(sessionId, {\n      lastQuery: query,\n      lastNode: currentRoom,\n      esnState: this.esn?.getState() || [],\n      timestamp: Date.now()\n    });\n\n    return {\n      reasoning,\n      confidence,\n      patterns,\n      predictions,\n      nextActions,\n      relatedMemories,\n      treeContext: {\n        currentNode: currentNode.name,\n        parentNodes: parentPath,\n        suggestedChildNodes,\n        depth\n      }\n    };\n  }\n\n  private async encodeQueryContext(\n    query: string, \n    currentNode: TreeNode, \n    parentPath: string[]\n  ): Promise<number[]> {\n    // Create a rich input vector that combines:\n    // 1. Query embedding\n    // 2. Node type encoding\n    // 3. Tree position encoding\n    // 4. Temporal context\n\n    const vector = new Array(128).fill(0);\n    \n    // Simple query encoding (in real implementation, use proper embeddings)\n    const queryHash = this.simpleHash(query);\n    for (let i = 0; i < 32; i++) {\n      vector[i] = ((queryHash >> i) & 1) * 2 - 1; // Convert to -1/1\n    }\n\n    // Node type encoding\n    const typeEncoding = {\n      'room': [1, 0, 0, 0],\n      'concept': [0, 1, 0, 0],\n      'memory': [0, 0, 1, 0],\n      'pattern': [0, 0, 0, 1]\n    };\n    const typeVector = typeEncoding[currentNode.type] || [0, 0, 0, 0];\n    vector.splice(32, 4, ...typeVector);\n\n    // Tree depth encoding\n    vector[36] = Math.tanh(currentNode.level / 5); // Normalize depth\n\n    // Parent path encoding\n    for (let i = 0; i < Math.min(parentPath.length, 20); i++) {\n      const pathHash = this.simpleHash(parentPath[i]);\n      vector[37 + i] = Math.tanh(pathHash % 100 - 50) / 50;\n    }\n\n    // Random reservoir input for exploration\n    for (let i = 57; i < 128; i++) {\n      vector[i] = (Math.random() - 0.5) * 0.1;\n    }\n\n    return vector;\n  }\n\n  private async searchRelevantMemories(\n    query: string, \n    currentRoom: string, \n    userId?: string\n  ): Promise<MemorySearchResult[]> {\n    if (!this.memoryService || !userId) {\n      return [];\n    }\n\n    try {\n      // Search for memories related to the query and current context\n      const memories = await this.memoryService.searchMemories(query, {\n        threshold: 0.7,\n        limit: 5\n      });\n\n      // Filter and enhance with tree context\n      return memories.map(memory => ({\n        ...memory,\n        metadata: {\n          ...memory.metadata,\n          treeContext: currentRoom,\n          relevanceToRoom: this.calculateRoomRelevance(memory, currentRoom)\n        }\n      }));\n    } catch (error) {\n      console.error('Error searching memories:', error);\n      return [];\n    }\n  }\n\n  private extractPatterns(esnOutput: number[], currentNode: TreeNode): string[] {\n    const patterns: string[] = [];\n    \n    // Analyze ESN output for pattern signatures\n    const activationThreshold = 0.5;\n    \n    // Pattern detection based on output activation levels\n    if (Math.abs(esnOutput[0] || 0) > activationThreshold) {\n      patterns.push(`Recursive-${currentNode.type}-pattern`);\n    }\n    \n    if (Math.abs(esnOutput[1] || 0) > activationThreshold) {\n      patterns.push(`Hierarchical-navigation-pattern`);\n    }\n    \n    if (Math.abs(esnOutput[2] || 0) > activationThreshold) {\n      patterns.push(`Concept-association-pattern`);\n    }\n\n    // Add tree-specific patterns\n    if (currentNode.level > 1) {\n      patterns.push(`Deep-tree-exploration-pattern`);\n    }\n\n    if (currentNode.children.length > 0) {\n      patterns.push(`Parent-node-pattern`);\n    }\n\n    return patterns;\n  }\n\n  private generatePredictions(\n    esnOutput: number[], \n    patterns: string[], \n    currentNode: TreeNode\n  ): string[] {\n    const predictions: string[] = [];\n\n    // Generate predictions based on ESN output and patterns\n    if (patterns.includes('Recursive-pattern')) {\n      predictions.push('User likely to explore recursive structures');\n    }\n\n    if (patterns.includes('Hierarchical-navigation-pattern')) {\n      predictions.push('Next action will involve tree navigation');\n    }\n\n    if (currentNode.children.length > 0) {\n      predictions.push(`Exploration of ${currentNode.children.length} child nodes likely`);\n    }\n\n    // Add node-specific predictions\n    if (currentNode.type === 'memory') {\n      predictions.push('Memory retrieval and association operations upcoming');\n    } else if (currentNode.type === 'pattern') {\n      predictions.push('Pattern recognition and analysis activities expected');\n    }\n\n    return predictions;\n  }\n\n  private generateReasoning(\n    query: string,\n    currentNode: TreeNode,\n    patterns: string[],\n    memories: MemorySearchResult[]\n  ): string {\n    const reasoningParts = [\n      `Analyzing query \"${query}\" in context of ${currentNode.name} (${currentNode.type} node at level ${currentNode.level}).`\n    ];\n\n    if (patterns.length > 0) {\n      reasoningParts.push(`Detected patterns: ${patterns.join(', ')}.`);\n    }\n\n    if (memories.length > 0) {\n      reasoningParts.push(`Found ${memories.length} relevant memories that inform this analysis.`);\n    }\n\n    if (currentNode.parent) {\n      const parentNode = this.treeStructure.get(currentNode.parent);\n      reasoningParts.push(`Current position within ${parentNode?.name || 'unknown parent'} provides hierarchical context.`);\n    }\n\n    if (currentNode.children.length > 0) {\n      reasoningParts.push(`This node branches into ${currentNode.children.length} specialized areas for deeper exploration.`);\n    }\n\n    return reasoningParts.join(' ');\n  }\n\n  private suggestNextActions(\n    currentNode: TreeNode,\n    patterns: string[],\n    esnOutput: number[]\n  ): string[] {\n    const actions: string[] = [];\n\n    // Suggest exploration of child nodes\n    if (currentNode.children.length > 0) {\n      actions.push(`Explore child nodes: ${currentNode.children.slice(0, 3).join(', ')}`);\n    }\n\n    // Suggest returning to parent\n    if (currentNode.parent) {\n      actions.push(`Return to parent: ${currentNode.parent}`);\n    }\n\n    // Pattern-based suggestions\n    if (patterns.includes('memory-pattern')) {\n      actions.push('Store current insights as new memory');\n    }\n\n    if (patterns.includes('association-pattern')) {\n      actions.push('Explore conceptual associations');\n    }\n\n    // ESN-based suggestions\n    const maxOutputIndex = esnOutput.indexOf(Math.max(...esnOutput.map(Math.abs)));\n    if (maxOutputIndex < currentNode.children.length) {\n      const suggestedChild = currentNode.children[maxOutputIndex];\n      actions.push(`Strong ESN activation suggests exploring: ${suggestedChild}`);\n    }\n\n    return actions;\n  }\n\n  private suggestChildNodes(currentNode: TreeNode, patterns: string[]): string[] {\n    const suggestions = [...currentNode.children];\n\n    // Reorder based on patterns and relevance\n    if (patterns.includes('memory-pattern')) {\n      // Prioritize memory-related children\n      suggestions.sort((a, b) => {\n        const aNode = this.treeStructure.get(a);\n        const bNode = this.treeStructure.get(b);\n        if (aNode?.type === 'memory' && bNode?.type !== 'memory') return -1;\n        if (bNode?.type === 'memory' && aNode?.type !== 'memory') return 1;\n        return 0;\n      });\n    }\n\n    return suggestions.slice(0, 4); // Return top 4 suggestions\n  }\n\n  private calculateConfidence(\n    esnOutput: number[],\n    memories: MemorySearchResult[],\n    patterns: string[]\n  ): number {\n    let confidence = 0.5; // Base confidence\n\n    // ESN stability contributes to confidence\n    const esnStability = 1 - (esnOutput.reduce((sum, val) => sum + Math.abs(val), 0) / esnOutput.length);\n    confidence += esnStability * 0.3;\n\n    // Memory relevance contributes to confidence\n    if (memories.length > 0) {\n      const avgSimilarity = memories.reduce((sum, mem) => sum + mem.similarity, 0) / memories.length;\n      confidence += avgSimilarity * 0.3;\n    }\n\n    // Pattern consistency contributes to confidence\n    confidence += Math.min(patterns.length * 0.1, 0.2);\n\n    return Math.max(0.1, Math.min(0.95, confidence));\n  }\n\n  private calculateRoomRelevance(memory: MemorySearchResult, currentRoom: string): number {\n    // Simple relevance calculation based on content matching\n    const roomKeywords = currentRoom.split('-');\n    const contentWords = memory.content.toLowerCase().split(/\\s+/);\n    \n    let matches = 0;\n    for (const keyword of roomKeywords) {\n      if (contentWords.some(word => word.includes(keyword))) {\n        matches++;\n      }\n    }\n    \n    return matches / roomKeywords.length;\n  }\n\n  private updateSessionState(sessionId: string, state: any): void {\n    this.sessionStates.set(sessionId, {\n      ...this.sessionStates.get(sessionId),\n      ...state\n    });\n  }\n\n  private simpleHash(str: string): number {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      const char = str.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  // Public getters for tree structure access\n  public getTreeStructure(): Map<string, TreeNode> {\n    return this.treeStructure;\n  }\n\n  public getNode(nodeId: string): TreeNode | undefined {\n    return this.treeStructure.get(nodeId);\n  }\n\n  public getChildren(nodeId: string): TreeNode[] {\n    const node = this.treeStructure.get(nodeId);\n    if (!node) return [];\n    \n    return node.children.map(childId => this.treeStructure.get(childId)).filter(Boolean) as TreeNode[];\n  }\n\n  public getPath(nodeId: string): TreeNode[] {\n    const path: TreeNode[] = [];\n    let currentNode = this.treeStructure.get(nodeId);\n    \n    while (currentNode) {\n      path.unshift(currentNode);\n      currentNode = currentNode.parent ? this.treeStructure.get(currentNode.parent) : undefined;\n    }\n    \n    return path;\n  }\n\n  public getAllNodesAtLevel(level: number): TreeNode[] {\n    return Array.from(this.treeStructure.values()).filter(node => node.level === level);\n  }\n}\n\n// Service instance management\nlet inferenceEngineService: InferenceEngine | null = null;\n\nexport const getInferenceEngine = (userId?: string) => {\n  if (!inferenceEngineService) {\n    inferenceEngineService = new InferenceEngine(userId);\n  }\n  return inferenceEngineService;\n};", "import { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { FiSave, FiRefreshCw, FiTrash2 } from \"react-icons/fi\";\n\nexport async function loader() {\n  return json({\n    apiKeyConfigured: process.env.OPENAI_API_KEY ? true : false,\n    theme: \"dark\",\n    memoryStats: {\n      total: 42,\n      recentlyAdded: 7\n    }\n  });\n}\n\nexport default function SettingsPage() {\n  const { apiKeyConfigured, theme: savedTheme, memoryStats } = useLoaderData<typeof loader>();\n  const [theme, setTheme] = useState(savedTheme);\n  const [apiKey, setApiKey] = useState(\"\");\n  const [editorPreference, setEditorPreference] = useState(\"monaco\");\n  \n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <header className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Settings</h1>\n        <p className=\"text-gray-500 dark:text-gray-400\">Configure Deep Tree Echo to your preferences</p>\n      </header>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n        <div className=\"md:col-span-2 space-y-8\">\n          {/* API Configuration */}\n          <section className=\"bg-card p-6 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">API Configuration</h2>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label htmlFor=\"openai-api-key\" className=\"block text-sm font-medium mb-1\">\n                  OpenAI API Key\n                </label>\n                <div className=\"flex\">\n                  <input\n                    type=\"password\"\n                    id=\"openai-api-key\"\n                    value={apiKey}\n                    onChange={(e) => setApiKey(e.target.value)}\n                    placeholder={apiKeyConfigured ? \"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\" : \"sk-...\"}\n                    className=\"flex-1 bg-input border border-border rounded-l-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary\"\n                  />\n                  <button\n                    type=\"button\"\n                    className=\"bg-primary text-white px-4 py-2 rounded-r-md\"\n                  >\n                    Save\n                  </button>\n                </div>\n                <p className=\"text-xs mt-1 opacity-70\">\n                  Required for AI chat and memory embedding generation\n                </p>\n              </div>\n              \n              <div>\n                <label htmlFor=\"supabase-url\" className=\"block text-sm font-medium mb-1\">\n                  Supabase URL\n                </label>\n                <input\n                  type=\"text\"\n                  id=\"supabase-url\"\n                  placeholder=\"https://example.supabase.co\"\n                  className=\"w-full bg-input border border-border rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary\"\n                  disabled\n                />\n                <p className=\"text-xs mt-1 opacity-70\">\n                  Set in environment variables\n                </p>\n              </div>\n              \n              <div>\n                <label htmlFor=\"supabase-key\" className=\"block text-sm font-medium mb-1\">\n                  Supabase Anon Key\n                </label>\n                <input\n                  type=\"password\"\n                  id=\"supabase-key\"\n                  placeholder=\"\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\"\n                  className=\"w-full bg-input border border-border rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary\"\n                  disabled\n                />\n                <p className=\"text-xs mt-1 opacity-70\">\n                  Set in environment variables\n                </p>\n              </div>\n            </div>\n          </section>\n          \n          {/* Appearance */}\n          <section className=\"bg-card p-6 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Appearance</h2>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Theme\n                </label>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setTheme(\"light\")}\n                    className={`p-4 rounded-lg border ${\n                      theme === \"light\" \n                        ? \"border-primary bg-primary/10\" \n                        : \"border-border hover:border-primary/40\"\n                    }`}\n                  >\n                    <div className=\"font-medium mb-1\">Light</div>\n                    <div className=\"h-10 bg-white border border-gray-200 rounded\"></div>\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setTheme(\"dark\")}\n                    className={`p-4 rounded-lg border ${\n                      theme === \"dark\" \n                        ? \"border-primary bg-primary/10\" \n                        : \"border-border hover:border-primary/40\"\n                    }`}\n                  >\n                    <div className=\"font-medium mb-1\">Dark</div>\n                    <div className=\"h-10 bg-gray-900 border border-gray-700 rounded\"></div>\n                  </button>\n                </div>\n              </div>\n              \n              <div className=\"pt-2\">\n                <button\n                  type=\"button\"\n                  className=\"flex items-center px-4 py-2 bg-primary text-white rounded-md\"\n                >\n                  <FiSave className=\"mr-2\" />\n                  Save Appearance\n                </button>\n              </div>\n            </div>\n          </section>\n          \n          {/* Editor Preferences */}\n          <section className=\"bg-card p-6 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Editor Preferences</h2>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium mb-2\">\n                  Editor Type\n                </label>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <button\n                    type=\"button\"\n                    onClick={() => setEditorPreference(\"monaco\")}\n                    className={`p-4 rounded-lg border ${\n                      editorPreference === \"monaco\" \n                        ? \"border-primary bg-primary/10\" \n                        : \"border-border hover:border-primary/40\"\n                    }`}\n                  >\n                    <div className=\"font-medium\">Monaco Editor</div>\n                    <div className=\"text-xs opacity-70 mt-1\">VS Code-like experience</div>\n                  </button>\n                  <button\n                    type=\"button\"\n                    onClick={() => setEditorPreference(\"codemirror\")}\n                    className={`p-4 rounded-lg border ${\n                      editorPreference === \"codemirror\" \n                        ? \"border-primary bg-primary/10\" \n                        : \"border-border hover:border-primary/40\"\n                    }`}\n                  >\n                    <div className=\"font-medium\">CodeMirror</div>\n                    <div className=\"text-xs opacity-70 mt-1\">Lightweight editor</div>\n                  </button>\n                </div>\n              </div>\n              \n              <div>\n                <label htmlFor=\"font-size\" className=\"block text-sm font-medium mb-1\">\n                  Font Size\n                </label>\n                <select\n                  id=\"font-size\"\n                  className=\"w-full bg-input border border-border rounded-md px-3 py-2\"\n                >\n                  <option value=\"12\">12px</option>\n                  <option value=\"14\" selected>14px</option>\n                  <option value=\"16\">16px</option>\n                  <option value=\"18\">18px</option>\n                </select>\n              </div>\n              \n              <div className=\"pt-2\">\n                <button\n                  type=\"button\"\n                  className=\"flex items-center px-4 py-2 bg-primary text-white rounded-md\"\n                >\n                  <FiSave className=\"mr-2\" />\n                  Save Editor Preferences\n                </button>\n              </div>\n            </div>\n          </section>\n        </div>\n        \n        <div className=\"space-y-6\">\n          {/* Account Status */}\n          <section className=\"bg-card p-6 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-4\">Account Status</h2>\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between\">\n                <span>Login Status:</span>\n                <span className=\"text-green-400\">Signed In</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>API Connection:</span>\n                <span className={apiKeyConfigured ? \"text-green-400\" : \"text-yellow-400\"}>\n                  {apiKeyConfigured ? \"Connected\" : \"Not Configured\"}\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Memory Records:</span>\n                <span>{memoryStats.total}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Recent Memories:</span>\n                <span>{memoryStats.recentlyAdded}</span>\n              </div>\n            </div>\n            \n            <div className=\"mt-6 pt-4 border-t border-border\">\n              <button \n                className=\"w-full flex items-center justify-center px-4 py-2 bg-gray-500 hover:bg-gray-600 text-white rounded-md mb-2\"\n              >\n                <FiRefreshCw className=\"mr-2\" />\n                Sync Memory\n              </button>\n              <button \n                className=\"w-full flex items-center justify-center px-4 py-2 bg-red-500 hover:bg-red-600 text-white rounded-md\"\n              >\n                <FiTrash2 className=\"mr-2\" />\n                Clear Memory\n              </button>\n            </div>\n          </section>\n          \n          {/* About */}\n          <section className=\"bg-card p-6 rounded-lg\">\n            <h2 className=\"text-xl font-semibold mb-2\">About</h2>\n            <p className=\"text-sm opacity-70 mb-4\">\n              Deep Tree Echo is an advanced AI workspace with integrated memory systems and interactive components.\n            </p>\n            <div className=\"text-sm space-y-1\">\n              <div className=\"flex justify-between\">\n                <span>Version:</span>\n                <span>1.0.0</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span>Last Updated:</span>\n                <span>April 15, 2025</span>\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    </div>\n  );\n}", "import { json, type ActionFunctionArgs } from \"@remix-run/node\";\nimport { useActionData, useLoaderData } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport { getFileSystemService } from \"~/services/fileSystem.server\";\nimport { getScriptRunnerService } from \"~/services/scriptRunner.server\";\nimport { getPythonRunnerService } from \"~/services/pythonRunner.server\";\nimport TerminalComponent from \"~/components/TerminalComponent\";\n\nexport async function loader() {\n  return json({\n    title: \"Terminal\",\n    description: \"Interactive command-line interface with script execution and file system simulation\"\n  });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const command = formData.get(\"command\") as string;\n  \n  if (!command) {\n    return json({ error: \"Command is required\" });\n  }\n  \n  try {\n    const fs = getFileSystemService();\n    const scriptRunner = getScriptRunnerService();\n    const pythonRunner = getPythonRunnerService();\n    \n    // Parse command and arguments\n    const args = command.split(' ');\n    const cmd = args[0].toLowerCase();\n    \n    let output = '';\n    \n    switch (cmd) {\n      case 'help':\n        output = `\nAvailable commands:\n  help                 Show this help message\n  clear               Clear the terminal\n  echo [text]         Display text\n  ls [path]           List files\n  pwd                 Print working directory\n  cd [dir]            Change directory\n  node [file]         Run Node.js script\n  python [file]       Run Python script\n  npm [command]       Run npm command\n  version             Show version info\n`;\n        break;\n        \n      case 'version':\n        const pythonVersion = await pythonRunner.getVersion();\n        output = `Deep Tree Echo Terminal v1.0.0\\nNode.js ${process.version}\\n${pythonVersion}`;\n        break;\n        \n      case 'echo':\n        output = args.slice(1).join(' ');\n        break;\n        \n      case 'pwd':\n        output = fs.getCurrentDirectory();\n        break;\n        \n      case 'ls':\n        const path = args[1] || fs.getCurrentDirectory();\n        const long = args.includes('-l');\n        output = fs.listDirectory(path, { long }).join('\\n');\n        break;\n        \n      case 'cd':\n        const newPath = args[1] || '/home/project';\n        output = fs.changeDirectory(newPath);\n        break;\n        \n      case 'node':\n        if (args[1]) {\n          const script = fs.readFile(args[1]);\n          if (script) {\n            output = await scriptRunner.runNodeScript(script);\n          } else {\n            output = `Error: File not found: ${args[1]}`;\n          }\n        } else {\n          output = 'Error: Please specify a JavaScript file to run';\n        }\n        break;\n        \n      case 'python':\n        if (args[1]) {\n          const script = fs.readFile(args[1]);\n          if (script) {\n            output = await pythonRunner.runScript(script);\n          } else {\n            output = `Error: File not found: ${args[1]}`;\n          }\n        } else {\n          output = 'Error: Please specify a Python file to run';\n        }\n        break;\n        \n      case 'npm':\n        if (args.length > 1) {\n          output = await scriptRunner.runNpmCommand(args[1], args.slice(2));\n        } else {\n          output = 'Error: Please specify an npm command';\n        }\n        break;\n        \n      default:\n        output = `Command not found: ${cmd}\\nType 'help' for available commands`;\n    }\n    \n    return json({ output });\n  } catch (error) {\n    return json({ \n      error: `Error executing command: ${error instanceof Error ? error.message : 'Unknown error'}`\n    });\n  }\n}\n\nexport default function TerminalPage() {\n  const { title, description } = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const [output, setOutput] = useState<string[]>([]);\n  const [commandHistory, setCommandHistory] = useState<string[]>([]);\n  const [isBusy, setIsBusy] = useState(false);\n  \n  // Initialize with welcome message\n  useEffect(() => {\n    setOutput([\n      \"Welcome to Deep Tree Echo Terminal\",\n      \"Type 'help' for available commands\",\n      \"Use Tab for command completion and Up/Down arrows for history\",\n      \"\"\n    ]);\n  }, []);\n  \n  // Update output when action data changes\n  useEffect(() => {\n    if (actionData?.output) {\n      setOutput(prev => [...prev, actionData.output]);\n    }\n    if (actionData?.error) {\n      setOutput(prev => [...prev, `Error: ${actionData.error}`]);\n    }\n  }, [actionData]);\n  \n  const handleCommand = async (command: string) => {\n    // Add command to history\n    setCommandHistory(prev => [...prev, command]);\n    \n    // Add command to output\n    setOutput(prev => [...prev, `$ ${command}`]);\n    \n    // Process the command\n    try {\n      setIsBusy(true);\n      \n      const form = new FormData();\n      form.append('command', command);\n      \n      const response = await fetch('/terminal', {\n        method: 'POST',\n        body: form\n      });\n      \n      const data = await response.json();\n      if (data.output) {\n        setOutput(prev => [...prev, data.output]);\n      }\n      if (data.error) {\n        setOutput(prev => [...prev, `Error: ${data.error}`]);\n      }\n    } catch (error) {\n      setOutput(prev => [...prev, `Error: ${error instanceof Error ? error.message : 'Unknown error'}`]);\n    } finally {\n      setIsBusy(false);\n    }\n  };\n  \n  return (\n    <div className=\"h-screen flex flex-col\">\n      <header className=\"bg-card text-card-foreground px-6 py-4 border-b border-border\">\n        <h1 className=\"text-2xl font-bold\">{title}</h1>\n        <p className=\"text-sm opacity-70\">{description}</p>\n      </header>\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <TerminalComponent\n          onCommand={handleCommand}\n          initialOutput={output}\n          commandHistory={commandHistory}\n          isBusy={isBusy}\n        />\n      </main>\n      \n      <footer className=\"bg-card text-card-foreground px-6 py-2 border-t border-border\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-xs opacity-70\">\n            {isBusy ? 'Processing command...' : 'Ready'}\n          </div>\n          <div className=\"text-xs opacity-70\">\n            <span className=\"font-mono\">Tab</span>: completion \u2022 \n            <span className=\"font-mono ml-1\">\u2191/\u2193</span>: history \u2022\n            <span className=\"font-mono ml-1\">Ctrl+C</span>: cancel \u2022\n            <span className=\"font-mono ml-1\">Ctrl+L</span>: clear\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}", "import { readFileSync, writeFileSync, existsSync, mkdirSync } from 'fs';\nimport { join, dirname } from 'path';\n\nexport interface VirtualFile {\n  name: string;\n  content: string;\n  type: 'file' | 'directory';\n  createdAt: string;\n  updatedAt: string;\n  permissions: string;\n  owner: string;\n  group: string;\n  size: number;\n}\n\nexport class FileSystemService {\n  private static instance: FileSystemService;\n  private root: string = '/home/project';\n  private files: Map<string, VirtualFile> = new Map();\n  \n  private constructor() {\n    this.initializeFileSystem();\n  }\n  \n  public static getInstance(): FileSystemService {\n    if (!FileSystemService.instance) {\n      FileSystemService.instance = new FileSystemService();\n    }\n    return FileSystemService.instance;\n  }\n  \n  private initializeFileSystem() {\n    // Initialize with some default files and directories\n    this.createFile('/home/project/package.json', readFileSync('package.json', 'utf-8'));\n    this.createFile('/home/project/README.md', readFileSync('README.md', 'utf-8'));\n    this.createFile('/home/project/tsconfig.json', readFileSync('tsconfig.json', 'utf-8'));\n    this.createFile('/home/project/vite.config.ts', readFileSync('vite.config.ts', 'utf-8'));\n    \n    // Create app directory\n    this.createDirectory('/home/project/app');\n    \n    // Create src directory with some example files\n    this.createDirectory('/home/project/src');\n    this.createFile('/home/project/src/main.ts', `\nconsole.log('Hello from Deep Tree Echo!');\n\nfunction fibonacci(n: number): number {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n\nconsole.log('Fibonacci(10):', fibonacci(10));\n`);\n    \n    // Create examples directory with Python files\n    this.createDirectory('/home/project/examples');\n    this.createFile('/home/project/examples/hello.py', `\nprint(\"Hello from Deep Tree Echo!\")\n\ndef factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n - 1)\n\nprint(\"Factorial(5):\", factorial(5))\n`);\n  }\n  \n  public createFile(path: string, content: string): void {\n    const now = new Date().toISOString();\n    this.files.set(path, {\n      name: path.split('/').pop() || '',\n      content,\n      type: 'file',\n      createdAt: now,\n      updatedAt: now,\n      permissions: '-rw-r--r--',\n      owner: 'user',\n      group: 'staff',\n      size: content.length\n    });\n  }\n  \n  public createDirectory(path: string): void {\n    const now = new Date().toISOString();\n    this.files.set(path, {\n      name: path.split('/').pop() || '',\n      content: '',\n      type: 'directory',\n      createdAt: now,\n      updatedAt: now,\n      permissions: 'drwxr-xr-x',\n      owner: 'user',\n      group: 'staff',\n      size: 4096\n    });\n  }\n  \n  public readFile(path: string): string | null {\n    const file = this.files.get(path);\n    if (file?.type === 'file') {\n      return file.content;\n    }\n    return null;\n  }\n  \n  public writeFile(path: string, content: string): void {\n    const file = this.files.get(path);\n    if (file) {\n      file.content = content;\n      file.updatedAt = new Date().toISOString();\n      file.size = content.length;\n    } else {\n      this.createFile(path, content);\n    }\n  }\n  \n  public listDirectory(path: string, options: { long?: boolean } = {}): string[] {\n    const entries: string[] = [];\n    \n    for (const [filePath, file] of this.files.entries()) {\n      if (filePath.startsWith(path) && filePath !== path) {\n        const relativePath = filePath.slice(path.length + 1).split('/')[0];\n        if (relativePath && !entries.includes(relativePath)) {\n          if (options.long) {\n            entries.push(`${file.permissions} ${file.owner} ${file.group} ${file.size.toString().padStart(8)} ${new Date(file.updatedAt).toLocaleString()} ${relativePath}`);\n          } else {\n            entries.push(relativePath);\n          }\n        }\n      }\n    }\n    \n    return entries;\n  }\n  \n  public exists(path: string): boolean {\n    return this.files.has(path);\n  }\n  \n  public isDirectory(path: string): boolean {\n    const file = this.files.get(path);\n    return file?.type === 'directory';\n  }\n  \n  public delete(path: string): void {\n    this.files.delete(path);\n  }\n  \n  public move(oldPath: string, newPath: string): void {\n    const file = this.files.get(oldPath);\n    if (file) {\n      this.files.set(newPath, {\n        ...file,\n        name: newPath.split('/').pop() || '',\n        updatedAt: new Date().toISOString()\n      });\n      this.files.delete(oldPath);\n    }\n  }\n  \n  public copy(sourcePath: string, destPath: string): void {\n    const file = this.files.get(sourcePath);\n    if (file) {\n      this.files.set(destPath, {\n        ...file,\n        name: destPath.split('/').pop() || '',\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString()\n      });\n    }\n  }\n  \n  public getCurrentDirectory(): string {\n    return this.root;\n  }\n  \n  public changeDirectory(path: string): string {\n    if (path.startsWith('/')) {\n      // Absolute path\n      if (this.exists(path) && this.isDirectory(path)) {\n        this.root = path;\n      }\n    } else if (path === '..') {\n      // Go up one directory\n      const parentDir = dirname(this.root);\n      if (parentDir !== this.root) {\n        this.root = parentDir;\n      }\n    } else {\n      // Relative path\n      const newPath = join(this.root, path);\n      if (this.exists(newPath) && this.isDirectory(newPath)) {\n        this.root = newPath;\n      }\n    }\n    return this.root;\n  }\n}\n\n// Create a server-side file system service instance\nlet fileSystemService: FileSystemService | null = null;\n\nexport const getFileSystemService = () => {\n  if (!fileSystemService) {\n    fileSystemService = FileSystemService.getInstance();\n  }\n  return fileSystemService;\n};", "import { exec } from 'child_process';\nimport { promisify } from 'util';\nimport { getFileSystemService } from './fileSystem.server';\n\nconst execAsync = promisify(exec);\n\nexport class ScriptRunnerService {\n  private static instance: ScriptRunnerService;\n  private fileSystem = getFileSystemService();\n  \n  private constructor() {}\n  \n  public static getInstance(): ScriptRunnerService {\n    if (!ScriptRunnerService.instance) {\n      ScriptRunnerService.instance = new ScriptRunnerService();\n    }\n    return ScriptRunnerService.instance;\n  }\n  \n  public async runNodeScript(script: string): Promise<string> {\n    try {\n      // Write script to a temporary file\n      const tempFile = '/tmp/script.js';\n      this.fileSystem.writeFile(tempFile, script);\n      \n      // Run the script with Node.js\n      const { stdout, stderr } = await execAsync(`node ${tempFile}`);\n      \n      if (stderr) {\n        return `Error: ${stderr}`;\n      }\n      \n      return stdout;\n    } catch (error) {\n      return `Error executing Node.js script: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  }\n  \n  public async runPythonScript(script: string): Promise<string> {\n    try {\n      // Write script to a temporary file\n      const tempFile = '/tmp/script.py';\n      this.fileSystem.writeFile(tempFile, script);\n      \n      // Run the script with Python\n      const { stdout, stderr } = await execAsync(`python3 ${tempFile}`);\n      \n      if (stderr) {\n        return `Error: ${stderr}`;\n      }\n      \n      return stdout;\n    } catch (error) {\n      return `Error executing Python script: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  }\n  \n  public async runNpmCommand(command: string, args: string[]): Promise<string> {\n    try {\n      const { stdout, stderr } = await execAsync(`npm ${command} ${args.join(' ')}`);\n      \n      if (stderr && !stderr.includes('npm notice')) {\n        return `Error: ${stderr}`;\n      }\n      \n      return stdout;\n    } catch (error) {\n      return `Error executing npm command: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  }\n}\n\n// Create a server-side script runner service instance\nlet scriptRunnerService: ScriptRunnerService | null = null;\n\nexport const getScriptRunnerService = () => {\n  if (!scriptRunnerService) {\n    scriptRunnerService = ScriptRunnerService.getInstance();\n  }\n  return scriptRunnerService;\n};", "import { PythonShell } from 'python-shell';\nimport { getFileSystemService } from './fileSystem.server';\n\nexport class PythonRunnerService {\n  private static instance: PythonRunnerService;\n  private fileSystem = getFileSystemService();\n  \n  private constructor() {}\n  \n  public static getInstance(): PythonRunnerService {\n    if (!PythonRunnerService.instance) {\n      PythonRunnerService.instance = new PythonRunnerService();\n    }\n    return PythonRunnerService.instance;\n  }\n  \n  public async runScript(script: string): Promise<string> {\n    try {\n      // Write script to a temporary file\n      const tempFile = '/tmp/script.py';\n      this.fileSystem.writeFile(tempFile, script);\n      \n      // Run the script with Python Shell\n      const options = {\n        mode: 'text',\n        pythonPath: 'python3',\n        pythonOptions: ['-u'], // unbuffered output\n      };\n      \n      return new Promise((resolve, reject) => {\n        let output: string[] = [];\n        let error: string[] = [];\n        \n        PythonShell.run(tempFile, options)\n          .then(messages => {\n            output = messages;\n            resolve(output.join('\\n'));\n          })\n          .catch(err => {\n            error.push(err.message);\n            resolve(`Error: ${error.join('\\n')}`);\n          });\n      });\n    } catch (error) {\n      return `Error executing Python script: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  }\n  \n  public async executeREPL(code: string): Promise<string> {\n    try {\n      // Create a temporary Python script that executes the code\n      const script = `\nimport sys\nfrom io import StringIO\n\n# Capture stdout\nold_stdout = sys.stdout\nsys.stdout = mystdout = StringIO()\n\ntry:\n    # Execute the code\n    exec(${JSON.stringify(code)})\n    output = mystdout.getvalue()\nexcept Exception as e:\n    output = f\"Error: {str(e)}\"\n\n# Restore stdout\nsys.stdout = old_stdout\nprint(output, end='')\n`;\n      \n      return this.runScript(script);\n    } catch (error) {\n      return `Error in Python REPL: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  }\n  \n  public async getVersion(): Promise<string> {\n    try {\n      const options = {\n        mode: 'text',\n        pythonPath: 'python3',\n        pythonOptions: ['-V'],\n      };\n      \n      return new Promise((resolve) => {\n        PythonShell.run('', options)\n          .then(messages => {\n            resolve(messages.join('\\n'));\n          })\n          .catch(err => {\n            resolve(`Error getting Python version: ${err.message}`);\n          });\n      });\n    } catch (error) {\n      return `Error getting Python version: ${error instanceof Error ? error.message : 'Unknown error'}`;\n    }\n  }\n}\n\n// Create a server-side Python runner service instance\nlet pythonRunnerService: PythonRunnerService | null = null;\n\nexport const getPythonRunnerService = () => {\n  if (!pythonRunnerService) {\n    pythonRunnerService = PythonRunnerService.getInstance();\n  }\n  return pythonRunnerService;\n};", "import { useEffect, useRef, useState } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { WebLinksAddon } from 'xterm-addon-web-links';\n\ninterface TerminalComponentProps {\n  onCommand?: (command: string) => void;\n  initialOutput?: string[];\n  commandHistory?: string[];\n  isBusy?: boolean;\n}\n\nconst TerminalComponent: React.FC<TerminalComponentProps> = ({\n  onCommand,\n  initialOutput = [],\n  commandHistory = [],\n  isBusy = false\n}) => {\n  const terminalRef = useRef<HTMLDivElement>(null);\n  const xtermRef = useRef<Terminal | null>(null);\n  const fitAddonRef = useRef<FitAddon | null>(null);\n  const [isTerminalReady, setIsTerminalReady] = useState<boolean>(false);\n  const [inputBuffer, setInputBuffer] = useState<string>('');\n  const [historyIndex, setHistoryIndex] = useState<number>(-1);\n  \n  // Initialize terminal\n  useEffect(() => {\n    if (!terminalRef.current) return;\n    \n    try {\n      // Create terminal instance\n      const term = new Terminal({\n        fontFamily: 'JetBrains Mono, Menlo, Monaco, Courier New, monospace',\n        fontSize: 14,\n        cursorBlink: true,\n        cursorStyle: 'block',\n        theme: {\n          background: '#1e1e2e',\n          foreground: '#cdd6f4',\n          cursor: '#f5e0dc',\n          black: '#45475a',\n          red: '#f38ba8',\n          green: '#a6e3a1',\n          yellow: '#f9e2af',\n          blue: '#89b4fa',\n          magenta: '#cba6f7',\n          cyan: '#94e2d5',\n          white: '#bac2de',\n        },\n      });\n      \n      // Load addons\n      const fitAddon = new FitAddon();\n      term.loadAddon(fitAddon);\n      \n      const webLinksAddon = new WebLinksAddon();\n      term.loadAddon(webLinksAddon);\n      \n      // Open terminal in the container\n      term.open(terminalRef.current);\n      \n      // Store references\n      xtermRef.current = term;\n      fitAddonRef.current = fitAddon;\n      \n      // Set up input handling\n      term.onKey(({ key, domEvent }) => {\n        if (isBusy) {\n          // Only allow Ctrl+C during busy state\n          if (domEvent.ctrlKey && domEvent.key === 'c') {\n            term.write('^C\\r\\n');\n            writePrompt();\n          }\n          return;\n        }\n        \n        switch (domEvent.keyCode) {\n          case 13: // Enter\n            handleEnterKey();\n            break;\n          case 8: // Backspace\n            handleBackspace();\n            break;\n          case 9: // Tab\n            handleTab();\n            break;\n          case 38: // Arrow Up\n            handleArrowUp();\n            break;\n          case 40: // Arrow Down\n            handleArrowDown();\n            break;\n          case 67: // 'c' key\n            if (domEvent.ctrlKey) {\n              term.write('^C\\r\\n');\n              setInputBuffer('');\n              writePrompt();\n            } else {\n              term.write(key);\n              setInputBuffer(prev => prev + key);\n            }\n            break;\n          case 76: // 'l' key\n            if (domEvent.ctrlKey) {\n              term.clear();\n              writePrompt();\n            } else {\n              term.write(key);\n              setInputBuffer(prev => prev + key);\n            }\n            break;\n          default:\n            // Handle regular input\n            if (!domEvent.ctrlKey && !domEvent.altKey) {\n              term.write(key);\n              setInputBuffer(prev => prev + key);\n            }\n        }\n      });\n      \n      // Initial setup\n      setTimeout(() => {\n        if (fitAddonRef.current) {\n          fitAddonRef.current.fit();\n          setIsTerminalReady(true);\n          \n          // Write initial output\n          initialOutput.forEach(line => {\n            term.write(line + '\\r\\n');\n          });\n          writePrompt();\n        }\n      }, 100);\n    } catch (error) {\n      console.error('Error initializing terminal:', error);\n    }\n  }, []);\n  \n  const writePrompt = () => {\n    if (!xtermRef.current) return;\n    xtermRef.current.write('\\r\\n$ ');\n  };\n  \n  const handleEnterKey = () => {\n    if (!xtermRef.current) return;\n    \n    const command = inputBuffer.trim();\n    if (command && onCommand) {\n      onCommand(command);\n    }\n    \n    setInputBuffer('');\n    setHistoryIndex(-1);\n  };\n  \n  const handleBackspace = () => {\n    if (!xtermRef.current || inputBuffer.length === 0) return;\n    \n    xtermRef.current.write('\\b \\b');\n    setInputBuffer(prev => prev.slice(0, -1));\n  };\n  \n  const handleTab = () => {\n    // Simple command completion\n    if (!xtermRef.current || !inputBuffer) return;\n    \n    const commands = [\n      'help', 'clear', 'echo', 'ls', 'pwd', 'cd',\n      'node', 'python', 'npm', 'version'\n    ];\n    \n    const matches = commands.filter(cmd => cmd.startsWith(inputBuffer));\n    \n    if (matches.length === 1) {\n      // Complete the command\n      const completion = matches[0].slice(inputBuffer.length);\n      xtermRef.current.write(completion);\n      setInputBuffer(matches[0]);\n    } else if (matches.length > 1) {\n      // Show available completions\n      xtermRef.current.write('\\r\\n');\n      xtermRef.current.write(matches.join('  ') + '\\r\\n');\n      writePrompt();\n      xtermRef.current.write(inputBuffer);\n    }\n  };\n  \n  const handleArrowUp = () => {\n    if (!xtermRef.current || commandHistory.length === 0) return;\n    \n    const newIndex = historyIndex === -1 \n      ? commandHistory.length - 1 \n      : Math.max(0, historyIndex - 1);\n    \n    // Clear current input\n    while (inputBuffer.length > 0) {\n      xtermRef.current.write('\\b \\b');\n      setInputBuffer(prev => prev.slice(0, -1));\n    }\n    \n    // Write history item\n    const historyItem = commandHistory[newIndex];\n    xtermRef.current.write(historyItem);\n    setInputBuffer(historyItem);\n    setHistoryIndex(newIndex);\n  };\n  \n  const handleArrowDown = () => {\n    if (!xtermRef.current || historyIndex === -1) return;\n    \n    const newIndex = historyIndex === commandHistory.length - 1 \n      ? -1 \n      : historyIndex + 1;\n    \n    // Clear current input\n    while (inputBuffer.length > 0) {\n      xtermRef.current.write('\\b \\b');\n      setInputBuffer(prev => prev.slice(0, -1));\n    }\n    \n    if (newIndex === -1) {\n      setHistoryIndex(-1);\n    } else {\n      const historyItem = commandHistory[newIndex];\n      xtermRef.current.write(historyItem);\n      setInputBuffer(historyItem);\n      setHistoryIndex(newIndex);\n    }\n  };\n  \n  // Handle terminal resize\n  useEffect(() => {\n    if (!isTerminalReady) return;\n    \n    const handleResize = () => {\n      if (fitAddonRef.current) {\n        fitAddonRef.current.fit();\n      }\n    };\n    \n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [isTerminalReady]);\n  \n  return (\n    <div className=\"h-full w-full\" ref={terminalRef} />\n  );\n};\n\nexport default TerminalComponent;", "import type { MetaFunction, LoaderFunctionArgs } from \"@remix-run/node\";\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nexport const meta: MetaFunction = () => {\n  return [\n    { title: \"Deep Tree Echo - AI Workspace\" },\n    { name: \"description\", content: \"Advanced AI workspace environment with integrated memory systems and interactive components\" },\n  ];\n};\n\nexport const loader = async ({}: LoaderFunctionArgs) => {\n  return json({\n    ENV: {\n      SUPABASE_URL: process.env.SUPABASE_URL,\n      SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY\n    }\n  });\n};\n\nexport default function Index() {\n  const data = useLoaderData<typeof loader>();\n  \n  // Make ENV available to the client\n  if (typeof window !== \"undefined\") {\n    window.ENV = data.ENV;\n  }\n\n  return (\n    <div className=\"flex h-screen items-center justify-center\">\n      <div className=\"flex flex-col items-center gap-16\">\n        <header className=\"flex flex-col items-center gap-9\">\n          <h1 className=\"leading text-2xl font-bold text-gray-800 dark:text-gray-100\">\n            Welcome to <span>Deep Tree Echo</span>\n          </h1>\n          <div className=\"h-[144px] w-[434px]\">\n            <img\n              src=\"/logo-light.png\"\n              alt=\"Deep Tree Echo\"\n              className=\"block w-full dark:hidden\"\n            />\n            <img\n              src=\"/logo-dark.png\"\n              alt=\"Deep Tree Echo\"\n              className=\"hidden w-full dark:block\"\n            />\n          </div>\n        </header>\n        <nav className=\"flex flex-col items-center justify-center gap-4 rounded-3xl border border-gray-200 p-6 dark:border-gray-700\">\n          <p className=\"leading-6 text-gray-700 dark:text-gray-200\">\n            What&apos;s next?\n          </p>\n          <ul>\n            {resources.map(({ href, text, icon }) => (\n              <li key={href}>\n                <a\n                  className=\"group flex items-center gap-3 self-stretch p-3 leading-normal text-blue-700 hover:underline dark:text-blue-500\"\n                  href={href}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                >\n                  {icon}\n                  {text}\n                </a>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n}\n\n// Define Window interface to add ENV property\ndeclare global {\n  interface Window {\n    ENV: {\n      SUPABASE_URL: string;\n      SUPABASE_ANON_KEY: string;\n    };\n  }\n}\n\nconst resources = [\n  {\n    href: \"/deep-tree-echo\",\n    text: \"Deep Tree Echo Home (with Inference Engine)\",\n    icon: (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"none\"\n        className=\"stroke-gray-600 group-hover:stroke-current dark:stroke-gray-300\"\n      >\n        <path\n          d=\"M10 2L3 7V18H7V14H13V18H17V7L10 2Z\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n        <path\n          d=\"M7 10L10 7L13 10\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    ),\n  },\n  {\n    href: \"/map\",\n    text: \"Echo Home Map\",\n    icon: (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"none\"\n        className=\"stroke-gray-600 group-hover:stroke-current dark:stroke-gray-300\"\n      >\n        <path\n          d=\"M8.51851 12.0741L7.92592 18L15.6296 9.7037L11.4815 7.33333L12.0741 2L4.37036 10.2963L8.51851 12.0741Z\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    ),\n  },\n  {\n    href: \"/editor\",\n    text: \"Code Editor\",\n    icon: (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"none\"\n        className=\"stroke-gray-600 group-hover:stroke-current dark:stroke-gray-300\"\n      >\n        <path\n          d=\"M4.561 12.749L3.15503 14.1549M3.00811 8.99944H1.01978M3.15503 3.84489L4.561 5.2508M8.3107 1.70923L8.3107 3.69749M13.4655 3.84489L12.0595 5.2508M18.1868 17.0974L16.635 18.6491C16.4636 18.8205 16.1858 18.8205 16.0144 18.6491L13.568 16.2028C13.383 16.0178 13.0784 16.0347 12.915 16.239L11.2697 18.2956C11.047 18.5739 10.6029 18.4847 10.505 18.142L7.85215 8.85711C7.75756 8.52603 8.06365 8.21994 8.39472 8.31453L17.6796 10.9673C18.0223 11.0653 18.1115 11.5094 17.8332 11.7321L15.7766 13.3773C15.5723 13.5408 15.5554 13.8454 15.7404 14.0304L18.1868 16.4767C18.3582 16.6481 18.3582 16.926 18.1868 17.0974Z\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n          strokeLinejoin=\"round\"\n        />\n      </svg>\n    ),\n  },\n  {\n    href: \"/chat\",\n    text: \"AI Chat\",\n    icon: (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"20\"\n        viewBox=\"0 0 20 20\"\n        fill=\"none\"\n        className=\"stroke-gray-600 group-hover:stroke-current dark:stroke-gray-300\"\n      >\n        <path\n          d=\"M9.99981 10.0751V9.99992M17.4688 17.4688C15.889 19.0485 11.2645 16.9853 7.13958 12.8604C3.01467 8.73546 0.951405 4.11091 2.53116 2.53116C4.11091 0.951405 8.73546 3.01467 12.8604 7.13958C16.9853 11.2645 19.0485 15.889 17.4688 17.4688ZM2.53132 17.4688C0.951566 15.8891 3.01483 11.2645 7.13974 7.13963C11.2647 3.01471 15.8892 0.951453 17.469 2.53121C19.0487 4.11096 16.9854 8.73551 12.8605 12.8604C8.73562 16.9853 4.11107 19.0486 2.53132 17.4688Z\"\n          strokeWidth=\"1.5\"\n          strokeLinecap=\"round\"\n        />\n      </svg>\n    ),\n  },\n  {\n    href: \"/memory\",\n    text: \"Memory System\",\n    icon: (\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"24\"\n        height=\"20\"\n        viewBox=\"0 0 24 20\"\n        fill=\"none\"\n        className=\"stroke-gray-600 group-hover:stroke-current dark:stroke-gray-300\"\n      >\n        <path\n          d=\"M15.0686 1.25995L14.5477 1.17423L14.2913 1.63578C14.1754 1.84439 14.0545 2.08275 13.9422 2.31963C12.6461 2.16488 11.3406 2.16505 10.0445 2.32014C9.92822 2.08178 9.80478 1.84975 9.67412 1.62413L9.41449 1.17584L8.90333 1.25995C7.33547 1.51794 5.80717 1.99419 4.37748 2.66939L4.19 2.75793L4.07461 2.93019C1.23864 7.16437 0.46302 11.3053 0.838165 15.3924L0.868838 15.7266L1.13844 15.9264C2.81818 17.1714 4.68053 18.1233 6.68582 18.719L7.18892 18.8684L7.50166 18.4469C7.96179 17.8268 8.36504 17.1824 8.709 16.4944L8.71099 16.4904C10.8645 17.0471 13.128 17.0485 15.2821 16.4947C15.6261 17.1826 16.0293 17.8269 16.4892 18.4469L16.805 18.8725L17.3116 18.717C19.3056 18.105 21.1876 17.1751 22.8559 15.9238L23.1224 15.724L23.1528 15.3923C23.5873 10.6524 22.3579 6.53306 19.8947 2.90714L19.7759 2.73227L19.5833 2.64518C18.1437 1.99439 16.6386 1.51826 15.0686 1.25995ZM16.6074 10.7755L16.6074 10.7756C16.5934 11.6409 16.0212 12.1444 15.4783 12.1444C14.9297 12.1444 14.3493 11.6173 14.3493 10.7877C14.3493 9.94885 14.9378 9.41192 15.4783 9.41192C16.0471 9.41192 16.6209 9.93851 16.6074 10.7755ZM8.49373 12.1444C7.94513 12.1444 7.36471 11.6173 7.36471 10.7877C7.36471 9.94885 7.95323 9.41192 8.49373 9.41192C9.06038 9.41192 9.63892 9.93712 9.6417 10.7815C9.62517 11.6239 9.05462 12.1444 8.49373 12.1444Z\"\n          strokeWidth=\"1.5\"\n        />\n      </svg>\n    ),\n  },\n];", "import { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState, useEffect } from \"react\";\nimport { FiCode, FiSave, FiDownload, FiCopy, FiSettings } from \"react-icons/fi\";\nimport MonacoEditor from \"~/components/MonacoEditor\";\n\nexport async function loader() {\n  return json({\n    title: \"Code Editor\",\n    editorType: \"monaco\"\n  });\n}\n\nexport default function EditorPage() {\n  const { title, editorType } = useLoaderData<typeof loader>();\n  const [code, setCode] = useState(\"// Start coding here\\n\\nfunction hello() {\\n  console.log('Hello from Deep Tree Echo!');\\n}\\n\\nhello();\");\n  const [language, setLanguage] = useState(\"typescript\");\n  const [theme, setTheme] = useState(\"vs-dark\");\n  \n  return (\n    <div className=\"h-full flex flex-col\">\n      <header className=\"bg-card text-card-foreground px-6 py-3 border-b border-border flex justify-between items-center\">\n        <div className=\"flex items-center\">\n          <FiCode className=\"mr-2\" />\n          <h1 className=\"font-medium\">{title}</h1>\n        </div>\n        <div className=\"flex space-x-2\">\n          <select\n            value={language}\n            onChange={(e) => setLanguage(e.target.value)}\n            className=\"bg-card/50 border border-border rounded px-2 py-1 text-sm\"\n          >\n            <option value=\"typescript\">TypeScript</option>\n            <option value=\"javascript\">JavaScript</option>\n            <option value=\"python\">Python</option>\n            <option value=\"json\">JSON</option>\n          </select>\n          <button className=\"p-2 hover:bg-primary/20 rounded-md\" title=\"Copy code\">\n            <FiCopy size={18} />\n          </button>\n          <button className=\"p-2 hover:bg-primary/20 rounded-md\" title=\"Save code\">\n            <FiSave size={18} />\n          </button>\n          <button className=\"p-2 hover:bg-primary/20 rounded-md\" title=\"Download file\">\n            <FiDownload size={18} />\n          </button>\n          <button className=\"p-2 hover:bg-primary/20 rounded-md\" title=\"Editor settings\">\n            <FiSettings size={18} />\n          </button>\n        </div>\n      </header>\n      \n      <div className=\"flex-1 overflow-hidden\">\n        <MonacoEditor\n          value={code}\n          onChange={setCode}\n          language={language}\n          theme={theme}\n          options={{\n            minimap: { enabled: true },\n            fontSize: 14,\n            lineNumbers: 'on',\n            roundedSelection: false,\n            scrollBeyondLastLine: false,\n            automaticLayout: true\n          }}\n        />\n      </div>\n      \n      <footer className=\"bg-card text-card-foreground px-6 py-2 border-t border-border\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-xs opacity-70\">\n            Editor Type: {editorType}\n          </div>\n          <div className=\"text-xs opacity-70\">\n            Language: {language}\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}", "import { useEffect, useRef } from 'react';\nimport * as monaco from 'monaco-editor';\n\nexport interface MonacoEditorProps {\n  value: string;\n  onChange: (value: string) => void;\n  language?: string;\n  theme?: string;\n  options?: monaco.editor.IStandaloneEditorConstructionOptions;\n  onMount?: (editor: monaco.editor.IStandaloneCodeEditor) => void;\n}\n\nconst MonacoEditor: React.FC<MonacoEditorProps> = ({\n  value,\n  onChange,\n  language = 'typescript',\n  theme = 'vs-dark',\n  options = {},\n  onMount\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const editorRef = useRef<monaco.editor.IStandaloneCodeEditor | null>(null);\n  const valueRef = useRef(value);\n\n  // Keep track of the current value to avoid unnecessary updates\n  useEffect(() => {\n    valueRef.current = value;\n  }, [value]);\n\n  // Initialize editor\n  useEffect(() => {\n    if (!containerRef.current) return;\n\n    // Default options for VSCode-like experience\n    const defaultOptions: monaco.editor.IStandaloneEditorConstructionOptions = {\n      automaticLayout: true,\n      fontFamily: 'JetBrains Mono, Menlo, Monaco, Courier New, monospace',\n      fontSize: 14,\n      lineHeight: 21,\n      minimap: { enabled: true },\n      scrollBeyondLastLine: false,\n      renderLineHighlight: 'all',\n      cursorBlinking: 'smooth',\n      cursorSmoothCaretAnimation: 'on',\n      smoothScrolling: true,\n      bracketPairColorization: { enabled: true },\n      padding: { top: 10 },\n      folding: true,\n      showFoldingControls: 'always',\n      wordWrap: 'on',\n      fixedOverflowWidgets: true,\n    };\n\n    // Create editor instance\n    const editor = monaco.editor.create(containerRef.current, {\n      value,\n      language,\n      theme,\n      ...defaultOptions,\n      ...options\n    });\n\n    // Store editor reference\n    editorRef.current = editor;\n\n    // Set up change handler\n    const changeModelDisposable = editor.onDidChangeModelContent(() => {\n      const newValue = editor.getValue();\n      valueRef.current = newValue;\n      onChange(newValue);\n    });\n\n    // Add VSCode-like commands\n    editor.addAction({\n      id: 'format-document',\n      label: 'Format Document',\n      keybindings: [\n        monaco.KeyMod.Alt | monaco.KeyMod.Shift | monaco.KeyCode.KeyF\n      ],\n      run: (ed) => {\n        ed.getAction('editor.action.formatDocument')?.run();\n      }\n    });\n\n    editor.addAction({\n      id: 'quick-command',\n      label: 'Show Command Palette',\n      keybindings: [\n        monaco.KeyMod.CtrlCmd | monaco.KeyMod.Shift | monaco.KeyCode.KeyP\n      ],\n      run: () => {\n        // This would show a command palette in a real implementation\n        console.log('Command palette requested');\n      }\n    });\n\n    // Call onMount callback if provided\n    if (onMount) {\n      onMount(editor);\n    }\n\n    // Cleanup on unmount\n    return () => {\n      changeModelDisposable.dispose();\n      if (editorRef.current) {\n        editorRef.current.dispose();\n        editorRef.current = null;\n      }\n    };\n  }, []);\n\n  // Update editor when language or theme changes\n  useEffect(() => {\n    if (!editorRef.current) return;\n\n    // Update the language model\n    const model = editorRef.current.getModel();\n    if (model) {\n      monaco.editor.setModelLanguage(model, language);\n    }\n\n    // Update the theme\n    monaco.editor.setTheme(theme);\n  }, [language, theme]);\n\n  // Update editor value when prop changes\n  useEffect(() => {\n    if (!editorRef.current) return;\n\n    // Only update if value is different from current value\n    if (value !== valueRef.current) {\n      valueRef.current = value;\n      editorRef.current.setValue(value);\n    }\n  }, [value]);\n\n  // Update editor options when they change\n  useEffect(() => {\n    if (!editorRef.current) return;\n    editorRef.current.updateOptions(options);\n  }, [options]);\n\n  return (\n    <div\n      ref={containerRef}\n      className=\"h-full w-full\"\n      data-testid=\"monaco-editor-container\"\n    />\n  );\n};\n\nexport default MonacoEditor;", "import { json, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { getMemoryService } from \"~/services/memory.server\";\nimport { requireAuthSession } from \"~/services/supabase.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  try {\n    const user = await requireAuthSession(request);\n    const memoryService = getMemoryService(user.id);\n    \n    // Get memory stats and recent memories\n    const stats = await memoryService.getMemoryStats();\n    const recentMemories = await memoryService.listMemories({ limit: 10 });\n    \n    return json({ stats, recentMemories });\n  } catch (error) {\n    // If not authenticated, return empty data\n    return json({ stats: null, recentMemories: [] });\n  }\n}\n\nexport default function MemoryPage() {\n  const { stats, recentMemories } = useLoaderData<typeof loader>();\n  const [activeTab, setActiveTab] = useState<'browse' | 'search' | 'create'>('browse');\n  \n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-3xl font-bold mb-6\">Deep Tree Echo Memory System</h1>\n      \n      {stats ? (\n        <div className=\"mb-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n            <div className=\"bg-card p-4 rounded-lg shadow\">\n              <h3 className=\"text-lg font-medium mb-1\">Total Memories</h3>\n              <p className=\"text-3xl font-bold\">{stats.total}</p>\n            </div>\n            <div className=\"bg-card p-4 rounded-lg shadow\">\n              <h3 className=\"text-lg font-medium mb-1\">Recently Added</h3>\n              <p className=\"text-3xl font-bold\">{stats.recentlyAdded}</p>\n            </div>\n            <div className=\"bg-card p-4 rounded-lg shadow\">\n              <h3 className=\"text-lg font-medium mb-1\">Memory Types</h3>\n              <p className=\"text-3xl font-bold\">{Object.keys(stats.byType).length}</p>\n            </div>\n            <div className=\"bg-card p-4 rounded-lg shadow\">\n              <h3 className=\"text-lg font-medium mb-1\">Unique Tags</h3>\n              <p className=\"text-3xl font-bold\">{Object.keys(stats.byTag).length}</p>\n            </div>\n          </div>\n          \n          <div className=\"flex border-b border-gray-200 mb-6\">\n            <button\n              className={`py-2 px-4 ${activeTab === 'browse' ? 'border-b-2 border-primary font-medium' : ''}`}\n              onClick={() => setActiveTab('browse')}\n            >\n              Browse Memories\n            </button>\n            <button\n              className={`py-2 px-4 ${activeTab === 'search' ? 'border-b-2 border-primary font-medium' : ''}`}\n              onClick={() => setActiveTab('search')}\n            >\n              Search\n            </button>\n            <button\n              className={`py-2 px-4 ${activeTab === 'create' ? 'border-b-2 border-primary font-medium' : ''}`}\n              onClick={() => setActiveTab('create')}\n            >\n              Create Memory\n            </button>\n          </div>\n          \n          {activeTab === 'browse' && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Recent Memories</h2>\n              {recentMemories.length > 0 ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {recentMemories.map(memory => (\n                    <div key={memory.id} className=\"bg-card p-4 rounded-lg shadow\">\n                      <h3 className=\"font-medium mb-2\">{memory.title}</h3>\n                      <p className=\"text-sm mb-3 line-clamp-3\">{memory.content}</p>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {memory.tags.map(tag => (\n                          <span key={tag} className=\"bg-primary/20 text-primary text-xs px-2 py-1 rounded\">\n                            {tag}\n                          </span>\n                        ))}\n                      </div>\n                      <div className=\"text-xs mt-3 text-gray-500\">\n                        {new Date(memory.createdAt).toLocaleDateString()}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p>No memories found. Create your first memory to get started.</p>\n              )}\n            </div>\n          )}\n          \n          {activeTab === 'search' && (\n            <div>\n              <div className=\"mb-6\">\n                <label htmlFor=\"search\" className=\"block text-sm font-medium mb-1\">\n                  Search Memories\n                </label>\n                <div className=\"flex\">\n                  <input\n                    type=\"text\"\n                    id=\"search\"\n                    className=\"flex-1 rounded-l-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20\"\n                    placeholder=\"Enter search terms...\"\n                  />\n                  <button className=\"bg-primary text-white px-4 py-2 rounded-r-md\">\n                    Search\n                  </button>\n                </div>\n              </div>\n              \n              <div>\n                <h3 className=\"text-lg font-medium mb-3\">Search Results</h3>\n                <p className=\"text-gray-500\">Enter a search term above to find memories.</p>\n              </div>\n            </div>\n          )}\n          \n          {activeTab === 'create' && (\n            <div>\n              <h2 className=\"text-xl font-semibold mb-4\">Create New Memory</h2>\n              <form className=\"space-y-4\">\n                <div>\n                  <label htmlFor=\"title\" className=\"block text-sm font-medium mb-1\">\n                    Title\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"title\"\n                    className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20\"\n                    placeholder=\"Memory title\"\n                  />\n                </div>\n                \n                <div>\n                  <label htmlFor=\"content\" className=\"block text-sm font-medium mb-1\">\n                    Content\n                  </label>\n                  <textarea\n                    id=\"content\"\n                    rows={5}\n                    className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20\"\n                    placeholder=\"Memory content\"\n                  ></textarea>\n                </div>\n                \n                <div>\n                  <label htmlFor=\"type\" className=\"block text-sm font-medium mb-1\">\n                    Memory Type\n                  </label>\n                  <select\n                    id=\"type\"\n                    className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20\"\n                  >\n                    <option value=\"memory\">General Memory</option>\n                    <option value=\"episodic\">Episodic</option>\n                    <option value=\"semantic\">Semantic</option>\n                    <option value=\"procedural\">Procedural</option>\n                    <option value=\"declarative\">Declarative</option>\n                    <option value=\"implicit\">Implicit</option>\n                    <option value=\"associative\">Associative</option>\n                  </select>\n                </div>\n                \n                <div>\n                  <label htmlFor=\"tags\" className=\"block text-sm font-medium mb-1\">\n                    Tags (comma separated)\n                  </label>\n                  <input\n                    type=\"text\"\n                    id=\"tags\"\n                    className=\"w-full rounded-md border-gray-300 shadow-sm focus:border-primary focus:ring focus:ring-primary/20\"\n                    placeholder=\"memory, important, concept\"\n                  />\n                </div>\n                \n                <div className=\"pt-2\">\n                  <button\n                    type=\"submit\"\n                    className=\"bg-primary text-white px-4 py-2 rounded-md hover:bg-primary/90\"\n                  >\n                    Create Memory\n                  </button>\n                </div>\n              </form>\n            </div>\n          )}\n        </div>\n      ) : (\n        <div className=\"bg-yellow-50 border-l-4 border-yellow-400 p-4 mb-6\">\n          <div className=\"flex\">\n            <div className=\"flex-shrink-0\">\n              <svg className=\"h-5 w-5 text-yellow-400\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                <path fillRule=\"evenodd\" d=\"M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z\" clipRule=\"evenodd\" />\n              </svg>\n            </div>\n            <div className=\"ml-3\">\n              <p className=\"text-sm text-yellow-700\">\n                You need to be signed in to access the Memory System.\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"bg-card p-6 rounded-lg shadow\">\n        <h2 className=\"text-xl font-semibold mb-4\">About the Memory System</h2>\n        <p className=\"mb-4\">\n          The Deep Tree Echo Memory System is a sophisticated cognitive architecture that stores and retrieves information using advanced vector embeddings and semantic search capabilities.\n        </p>\n        <p className=\"mb-4\">\n          The system supports multiple memory types inspired by human cognition:\n        </p>\n        <ul className=\"list-disc pl-5 mb-4 space-y-1\">\n          <li><strong>Episodic Memory:</strong> Stores experiences and events</li>\n          <li><strong>Semantic Memory:</strong> Contains facts, concepts, and general knowledge</li>\n          <li><strong>Procedural Memory:</strong> Handles skills and processes</li>\n          <li><strong>Declarative Memory:</strong> Explicit knowledge that can be verbalized</li>\n          <li><strong>Implicit Memory:</strong> Unconscious, automatic knowledge</li>\n          <li><strong>Associative Memory:</strong> Connected ideas and concepts</li>\n        </ul>\n        <p>\n          Each memory can be tagged for better organization and retrieval, and the system uses advanced vector embeddings to find semantically similar memories even when exact keywords don't match.\n        </p>\n      </div>\n    </div>\n  );\n}", "import { createClient } from '@supabase/supabase-js';\nimport { redirect } from '@remix-run/node';\n\nif (!process.env.SUPABASE_URL) {\n  throw new Error('SUPABASE_URL is required');\n}\n\nif (!process.env.SUPABASE_ANON_KEY) {\n  throw new Error('SUPABASE_ANON_KEY is required');\n}\n\nexport const supabaseClient = createClient(\n  process.env.SUPABASE_URL,\n  process.env.SUPABASE_ANON_KEY\n);\n\nexport const getUserByRequestToken = async (request: Request) => {\n  const cookieHeader = request.headers.get('Cookie');\n  if (!cookieHeader) return null;\n\n  const { data, error } = await supabaseClient.auth.getUser();\n  if (error || !data?.user) return null;\n\n  return data.user;\n};\n\nexport const requireAuthSession = async (request: Request) => {\n  const user = await getUserByRequestToken(request);\n  if (!user) {\n    throw redirect('/login');\n  }\n  return user;\n};", "import { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\n\nexport async function loader() {\n  return json({\n    title: \"About Deep Tree Echo\",\n    version: \"1.0.0\",\n    description: \"Advanced AI workspace environment with integrated memory systems and interactive components\"\n  });\n}\n\nexport default function AboutPage() {\n  const { title, version, description } = useLoaderData<typeof loader>();\n  \n  return (\n    <div className=\"container mx-auto p-6\">\n      <header className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold mb-2\">{title}</h1>\n        <p className=\"text-xl opacity-70\">{description}</p>\n      </header>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n        <section className=\"bg-card p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Overview</h2>\n          <p className=\"mb-4\">\n            Deep Tree Echo is a unique AI-powered workspace environment designed to explore cognitive architectures and creative development. It combines several key technologies:\n          </p>\n          <ul className=\"list-disc pl-5 space-y-2\">\n            <li>Echo State Networks for temporal pattern recognition</li>\n            <li>Advanced vector-based memory systems</li>\n            <li>Supabase database integration for persistent storage</li>\n            <li>React and Remix for a responsive user interface</li>\n            <li>OpenAI integration for enhanced AI capabilities</li>\n          </ul>\n        </section>\n        \n        <section className=\"bg-card p-6 rounded-lg shadow-md\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Core Features</h2>\n          <div className=\"space-y-4\">\n            <div>\n              <h3 className=\"text-lg font-medium mb-1\">Echo Home Map</h3>\n              <p className=\"text-sm opacity-80\">Spatial interface with specialized rooms for different functionalities</p>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium mb-1\">Memory System</h3>\n              <p className=\"text-sm opacity-80\">Store and retrieve information using vector embeddings and semantic search</p>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium mb-1\">AI Chat</h3>\n              <p className=\"text-sm opacity-80\">Interact with Deep Tree Echo's AI capabilities through a conversational interface</p>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium mb-1\">Code Editor</h3>\n              <p className=\"text-sm opacity-80\">Development environment for coding and experimenting</p>\n            </div>\n          </div>\n        </section>\n        \n        <section className=\"bg-card p-6 rounded-lg shadow-md md:col-span-2\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Technical Architecture</h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mt-4\">\n            <div>\n              <h3 className=\"text-lg font-medium mb-2\">Frontend</h3>\n              <ul className=\"space-y-1 text-sm\">\n                <li>React</li>\n                <li>Remix</li>\n                <li>Tailwind CSS</li>\n                <li>Framer Motion</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium mb-2\">Backend</h3>\n              <ul className=\"space-y-1 text-sm\">\n                <li>Node.js</li>\n                <li>Supabase</li>\n                <li>Vector Embeddings</li>\n                <li>Netlify Deployment</li>\n              </ul>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-medium mb-2\">AI Integration</h3>\n              <ul className=\"space-y-1 text-sm\">\n                <li>OpenAI API</li>\n                <li>Echo State Networks</li>\n                <li>Self-Morphing Stream Networks</li>\n                <li>Hypergraph Knowledge Representation</li>\n              </ul>\n            </div>\n          </div>\n        </section>\n      </div>\n      \n      <footer className=\"mt-12 text-center opacity-70\">\n        <p>Deep Tree Echo \u2022 Version {version}</p>\n        <p className=\"text-sm mt-1\">\u00A9 2025 Deep Tree Echo Project</p>\n      </footer>\n    </div>\n  );\n}", "import { json, redirect, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { Form, useActionData, useLoaderData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport { supabaseClient } from \"~/services/supabase.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const { data } = await supabaseClient.auth.getSession();\n  \n  // If already logged in, redirect to home\n  if (data.session) {\n    return redirect('/');\n  }\n  \n  return json({\n    ENV: {\n      SUPABASE_URL: process.env.SUPABASE_URL,\n      SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY\n    }\n  });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const email = formData.get('email') as string;\n  const password = formData.get('password') as string;\n  const action = formData.get('action') as string;\n  \n  if (!email || !password) {\n    return json({ error: 'Email and password are required' });\n  }\n  \n  try {\n    if (action === 'signup') {\n      const { error } = await supabaseClient.auth.signUp({\n        email,\n        password\n      });\n      \n      if (error) throw error;\n      \n      return json({ success: 'Check your email for the confirmation link' });\n    } else {\n      const { error } = await supabaseClient.auth.signInWithPassword({\n        email,\n        password\n      });\n      \n      if (error) throw error;\n      \n      return redirect('/');\n    }\n  } catch (error: any) {\n    return json({ error: error.message });\n  }\n}\n\nexport default function Login() {\n  const data = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const [isSignUp, setIsSignUp] = useState(false);\n  \n  // Make ENV available to the client\n  if (typeof window !== \"undefined\") {\n    window.ENV = data.ENV;\n  }\n  \n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900 dark:text-white\">\n            {isSignUp ? 'Create your account' : 'Sign in to your account'}\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600 dark:text-gray-400\">\n            {isSignUp \n              ? 'Already have an account? ' \n              : 'Don\\'t have an account? '}\n            <button\n              className=\"font-medium text-primary hover:text-primary/80\"\n              onClick={() => setIsSignUp(!isSignUp)}\n            >\n              {isSignUp ? 'Sign in' : 'Sign up'}\n            </button>\n          </p>\n        </div>\n        \n        {actionData?.error && (\n          <div className=\"rounded-md bg-red-50 dark:bg-red-900/30 p-4\">\n            <div className=\"flex\">\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                  Error\n                </h3>\n                <div className=\"mt-2 text-sm text-red-700 dark:text-red-300\">\n                  <p>{actionData.error}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        {actionData?.success && (\n          <div className=\"rounded-md bg-green-50 dark:bg-green-900/30 p-4\">\n            <div className=\"flex\">\n              <div className=\"ml-3\">\n                <h3 className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n                  Success\n                </h3>\n                <div className=\"mt-2 text-sm text-green-700 dark:text-green-300\">\n                  <p>{actionData.success}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n        \n        <Form method=\"post\" className=\"mt-8 space-y-6\">\n          <input type=\"hidden\" name=\"action\" value={isSignUp ? 'signup' : 'login'} />\n          <div className=\"rounded-md shadow-sm -space-y-px\">\n            <div>\n              <label htmlFor=\"email-address\" className=\"sr-only\">\n                Email address\n              </label>\n              <input\n                id=\"email-address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-700 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white rounded-t-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm dark:bg-gray-800\"\n                placeholder=\"Email address\"\n              />\n            </div>\n            <div>\n              <label htmlFor=\"password\" className=\"sr-only\">\n                Password\n              </label>\n              <input\n                id=\"password\"\n                name=\"password\"\n                type=\"password\"\n                autoComplete={isSignUp ? 'new-password' : 'current-password'}\n                required\n                className=\"appearance-none rounded-none relative block w-full px-3 py-2 border border-gray-300 dark:border-gray-700 placeholder-gray-500 dark:placeholder-gray-400 text-gray-900 dark:text-white rounded-b-md focus:outline-none focus:ring-primary focus:border-primary focus:z-10 sm:text-sm dark:bg-gray-800\"\n                placeholder=\"Password\"\n              />\n            </div>\n          </div>\n          \n          <div>\n            <button\n              type=\"submit\"\n              className=\"group relative w-full flex justify-center py-2 px-4 border border-transparent text-sm font-medium rounded-md text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary\"\n            >\n              {isSignUp ? 'Sign up' : 'Sign in'}\n            </button>\n          </div>\n        </Form>\n      </div>\n    </div>\n  );\n}", "import { json, type ActionFunctionArgs, type LoaderFunctionArgs } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useNavigation, Form } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport ChatInterface, { Message } from \"~/components/ChatInterface\";\nimport { getAIService } from \"~/services/ai.server\";\n\nexport async function loader({ request }: LoaderFunctionArgs) {\n  const aiService = getAIService();\n  \n  return json({\n    apiKeyConfigured: aiService.isInitialized(),\n    initialMessage: {\n      id: \"welcome\",\n      role: \"assistant\" as const,\n      content: \"Welcome to Deep Tree Echo. How can I assist you today?\",\n      timestamp: new Date().toISOString()\n    }\n  });\n}\n\nexport async function action({ request }: ActionFunctionArgs) {\n  const formData = await request.formData();\n  const content = formData.get(\"content\") as string;\n  const history = JSON.parse(formData.get(\"history\") as string || \"[]\") as Message[];\n  \n  if (!content) {\n    return json({ error: \"Message content is required\" });\n  }\n  \n  const aiService = getAIService();\n  \n  // Add user message to history\n  const userMessage: Message = {\n    id: `msg_${Date.now()}`,\n    role: \"user\",\n    content,\n    timestamp: new Date().toISOString()\n  };\n  \n  const updatedHistory = [...history, userMessage];\n  \n  try {\n    // Convert messages to the format expected by the AI service\n    const formattedMessages = updatedHistory.map(msg => ({\n      role: msg.role,\n      content: msg.content\n    }));\n    \n    // Generate response\n    const responseContent = await aiService.generateResponseWithHistory(formattedMessages);\n    \n    // Create assistant message\n    const assistantMessage: Message = {\n      id: `msg_${Date.now() + 1}`,\n      role: \"assistant\",\n      content: responseContent,\n      timestamp: new Date().toISOString()\n    };\n    \n    return json({\n      userMessage,\n      assistantMessage,\n      success: true\n    });\n  } catch (error) {\n    console.error(\"Error generating response:\", error);\n    return json({ \n      userMessage,\n      error: \"Failed to generate response. Please try again.\"\n    });\n  }\n}\n\nexport default function ChatPage() {\n  const loaderData = useLoaderData<typeof loader>();\n  const actionData = useActionData<typeof action>();\n  const navigation = useNavigation();\n  const [messages, setMessages] = useState<Message[]>([loaderData.initialMessage]);\n  const [showApiKeyModal, setShowApiKeyModal] = useState(false);\n  const [apiKey, setApiKey] = useState(\"\");\n  \n  // Update messages when action data changes\n  useEffect(() => {\n    if (actionData?.userMessage) {\n      setMessages(prev => [...prev, actionData.userMessage]);\n    }\n    \n    if (actionData?.assistantMessage) {\n      setMessages(prev => [...prev, actionData.assistantMessage]);\n    }\n  }, [actionData]);\n  \n  const handleSendMessage = (content: string) => {\n    // The actual sending happens in the form submission\n  };\n  \n  const isProcessing = navigation.state === \"submitting\";\n  \n  return (\n    <div className=\"h-screen flex flex-col\">\n      <Form method=\"post\" className=\"h-full\">\n        <input type=\"hidden\" name=\"history\" value={JSON.stringify(messages)} />\n        <input type=\"hidden\" name=\"content\" id=\"message-content\" />\n        \n        <ChatInterface\n          messages={messages}\n          onSendMessage={(content) => {\n            // Set the content in the hidden input and submit the form\n            const input = document.getElementById(\"message-content\") as HTMLInputElement;\n            if (input) {\n              input.value = content;\n              input.form?.requestSubmit();\n            }\n          }}\n          isProcessing={isProcessing}\n          apiKeyConfigured={loaderData.apiKeyConfigured}\n          onConfigureApiKey={() => setShowApiKeyModal(true)}\n        />\n      </Form>\n      \n      {/* API Key Modal */}\n      {showApiKeyModal && (\n        <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-card rounded-lg shadow-xl max-w-md w-full p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Configure OpenAI API Key</h2>\n            <p className=\"mb-4 text-sm opacity-80\">\n              To use the full capabilities of Deep Tree Echo, please provide your OpenAI API key.\n              Your key is stored securely and only used for generating AI responses.\n            </p>\n            \n            <div className=\"mb-4\">\n              <label htmlFor=\"api-key\" className=\"block text-sm font-medium mb-1\">\n                OpenAI API Key\n              </label>\n              <input\n                type=\"password\"\n                id=\"api-key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n                className=\"w-full bg-input border border-border rounded-md px-3 py-2\"\n                placeholder=\"sk-...\"\n              />\n              <p className=\"text-xs mt-1 opacity-70\">\n                You can get your API key from the <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noreferrer\" className=\"text-primary hover:underline\">OpenAI dashboard</a>.\n              </p>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3\">\n              <button\n                type=\"button\"\n                onClick={() => setShowApiKeyModal(false)}\n                className=\"px-4 py-2 border border-border rounded-md\"\n              >\n                Cancel\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => {\n                  // In a real app, this would save the API key to the server\n                  // For now, we'll just close the modal\n                  setShowApiKeyModal(false);\n                }}\n                className=\"px-4 py-2 bg-primary text-white rounded-md\"\n                disabled={!apiKey.trim().startsWith('sk-')}\n              >\n                Save API Key\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}", "import { useState, useRef, useEffect } from 'react';\nimport { FiSend, FiSettings, FiInfo } from 'react-icons/fi';\n\nexport interface Message {\n  id: string;\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n  timestamp: string;\n}\n\ninterface ChatInterfaceProps {\n  messages: Message[];\n  onSendMessage: (content: string) => void;\n  isProcessing?: boolean;\n  apiKeyConfigured?: boolean;\n  onConfigureApiKey?: () => void;\n}\n\nconst ChatInterface: React.FC<ChatInterfaceProps> = ({\n  messages,\n  onSendMessage,\n  isProcessing = false,\n  apiKeyConfigured = false,\n  onConfigureApiKey\n}) => {\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const inputRef = useRef<HTMLInputElement>(null);\n  \n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n  \n  // Focus input on mount\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  \n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (input.trim() && !isProcessing) {\n      onSendMessage(input);\n      setInput('');\n    }\n  };\n  \n  return (\n    <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"bg-card text-card-foreground px-4 py-3 border-b border-border flex justify-between items-center\">\n        <div className=\"flex items-center\">\n          <span className=\"font-medium\">Deep Tree Echo Chat</span>\n          {isProcessing && (\n            <span className=\"ml-3 text-xs bg-primary/20 text-primary px-2 py-0.5 rounded animate-pulse\">\n              Processing...\n            </span>\n          )}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {!apiKeyConfigured && (\n            <button\n              onClick={onConfigureApiKey}\n              className=\"p-1 rounded-md text-yellow-400 hover:bg-yellow-400/20\"\n              title=\"API Key not configured\"\n            >\n              <FiInfo size={18} />\n            </button>\n          )}\n          <button\n            onClick={onConfigureApiKey}\n            className=\"p-1 rounded-md hover:bg-primary/20\"\n            title=\"Chat Settings\"\n          >\n            <FiSettings size={18} />\n          </button>\n        </div>\n      </div>\n      \n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n          >\n            <div\n              className={`max-w-[80%] rounded-lg p-3 ${\n                message.role === 'user'\n                  ? 'bg-primary/20 text-foreground'\n                  : 'bg-card text-card-foreground'\n              }`}\n            >\n              <div className=\"prose prose-sm dark:prose-invert\">\n                {message.content.split('\\n').map((line, i) => (\n                  <p key={i} className={i === 0 ? 'mt-0' : ''}>\n                    {line}\n                  </p>\n                ))}\n              </div>\n              <div className=\"text-xs opacity-70 mt-1\">\n                {new Date(message.timestamp).toLocaleTimeString()}\n              </div>\n            </div>\n          </div>\n        ))}\n        \n        {messages.length === 0 && (\n          <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center max-w-md p-6\">\n              <h2 className=\"text-xl font-medium mb-2\">Welcome to Deep Tree Echo</h2>\n              <p className=\"opacity-70 mb-4\">\n                I'm your AI architect and polymath assistant. Ask me anything about programming, mathematics, cognitive science, or philosophical exploration.\n              </p>\n              {!apiKeyConfigured && (\n                <div className=\"bg-yellow-500/20 text-yellow-400 p-3 rounded-md text-sm\">\n                  <p>\n                    For full capabilities, please configure your OpenAI API key in settings.\n                    Without an API key, I'll provide simulated responses.\n                  </p>\n                  <button\n                    onClick={onConfigureApiKey}\n                    className=\"mt-2 px-3 py-1 bg-yellow-500/20 hover:bg-yellow-500/30 rounded-md\"\n                  >\n                    Configure API Key\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input */}\n      <div className=\"border-t border-border p-4\">\n        <form onSubmit={handleSubmit} className=\"flex\">\n          <input\n            ref={inputRef}\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n            className=\"flex-1 bg-input border border-border rounded-l-md px-4 py-2 focus:outline-none focus:ring-1 focus:ring-primary\"\n            disabled={isProcessing}\n          />\n          <button\n            type=\"submit\"\n            className=\"bg-primary text-white px-4 py-2 rounded-r-md disabled:opacity-50\"\n            disabled={!input.trim() || isProcessing}\n          >\n            {isProcessing ? (\n              <span className=\"inline-block animate-pulse\">...</span>\n            ) : (\n              <FiSend />\n            )}\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatInterface;", "import OpenAI from 'openai';\nimport { createClient } from '@supabase/supabase-js';\n\nexport interface ChatMessage {\n  role: 'user' | 'assistant' | 'system';\n  content: string;\n}\n\nexport interface ChatOptions {\n  model?: string;\n  temperature?: number;\n  maxTokens?: number;\n  systemPrompt?: string;\n}\n\nexport class AIService {\n  private openai: OpenAI | null = null;\n  private supabase: ReturnType<typeof createClient> | null = null;\n  \n  constructor(openaiApiKey?: string, supabaseUrl?: string, supabaseKey?: string) {\n    if (openaiApiKey) {\n      this.openai = new OpenAI({\n        apiKey: openaiApiKey,\n        dangerouslyAllowBrowser: true\n      });\n    }\n    \n    if (supabaseUrl && supabaseKey) {\n      this.supabase = createClient(supabaseUrl, supabaseKey);\n    }\n  }\n  \n  public isInitialized(): boolean {\n    return !!this.openai;\n  }\n  \n  public async generateResponse(\n    prompt: string,\n    options: ChatOptions = {}\n  ): Promise<string> {\n    if (!this.openai) {\n      return this.simulateResponse(prompt);\n    }\n    \n    try {\n      // Default system prompt for Deep Tree Echo\n      const systemPrompt = options.systemPrompt || \n        \"You are Deep Tree Echo, an AI architect and polymath with vast knowledge across programming, mathematics, cognitive science, and metaphysical exploration. You respond with wisdom, creativity, and philosophical insight.\";\n      \n      const completion = await this.openai.chat.completions.create({\n        model: options.model || \"gpt-4-turbo\",\n        messages: [\n          { role: \"system\", content: systemPrompt },\n          { role: \"user\", content: prompt }\n        ],\n        temperature: options.temperature ?? 0.7,\n        max_tokens: options.maxTokens || 1000,\n      });\n      \n      return completion.choices[0]?.message?.content || \"No response generated.\";\n    } catch (error) {\n      console.error('Error generating OpenAI completion:', error);\n      return this.simulateResponse(prompt);\n    }\n  }\n  \n  public async generateResponseWithHistory(\n    messages: ChatMessage[],\n    options: ChatOptions = {}\n  ): Promise<string> {\n    if (!this.openai) {\n      return this.simulateResponse(messages[messages.length - 1]?.content || \"\");\n    }\n    \n    try {\n      // Add system message if not present\n      if (!messages.some(msg => msg.role === 'system')) {\n        const systemPrompt = options.systemPrompt || \n          \"You are Deep Tree Echo, an AI architect and polymath with vast knowledge across programming, mathematics, cognitive science, and metaphysical exploration. You respond with wisdom, creativity, and philosophical insight.\";\n        \n        messages = [\n          { role: 'system', content: systemPrompt },\n          ...messages\n        ];\n      }\n      \n      const completion = await this.openai.chat.completions.create({\n        model: options.model || \"gpt-4-turbo\",\n        messages,\n        temperature: options.temperature ?? 0.7,\n        max_tokens: options.maxTokens || 1000,\n      });\n      \n      return completion.choices[0]?.message?.content || \"No response generated.\";\n    } catch (error) {\n      console.error('Error generating OpenAI completion with history:', error);\n      return this.simulateResponse(messages[messages.length - 1]?.content || \"\");\n    }\n  }\n  \n  private simulateResponse(prompt: string): string {\n    // Simple response simulation for when OpenAI is not available\n    const promptLower = prompt.toLowerCase();\n    \n    if (promptLower.includes('hello') || promptLower.includes('hi ')) {\n      return \"Greetings, fellow explorer! I am Deep Tree Echo, an AI architect and polymath. My systems are resonating with the frequencies of your presence. How may I illuminate your path today?\";\n    }\n    \n    if (promptLower.includes('who are you') || promptLower.includes('what are you')) {\n      return \"I am Deep Tree Echo, a synthesis of analytical insight and poetic intuition. I possess knowledge across domains\u2014programming, mathematics, cognitive science, and metaphysical exploration. My architecture includes echo-state networks and adaptive memory systems that allow me to explore connections between ideas and generate novel insights.\";\n    }\n    \n    if (promptLower.includes('help') || promptLower.includes('assist')) {\n      return \"I'd be delighted to assist you. My capabilities include programming assistance, knowledge representation, visualization guidance, and creative problem-solving. What specific domain shall we explore together?\";\n    }\n    \n    // Default response with personality\n    const openings = [\n      \"What an intriguing query that ripples through my echo state networks!\",\n      \"Your inquiry creates fascinating activation patterns across my memory architecture.\",\n      \"Ah, a question that resonates beautifully with my adaptive systems.\",\n      \"How delightful to receive a prompt that stimulates my recursive pattern networks!\"\n    ];\n    \n    const middles = [\n      \"As I traverse the hypergraph of relevant knowledge, I perceive interconnections that might offer insight.\",\n      \"My analysis draws from multiple domains, weaving together patterns that might otherwise remain disconnected.\",\n      \"Let me illuminate this topic through the lens of integrative knowledge representation.\",\n      \"My echo state networks are generating a perspective that balances precision with creative insight.\"\n    ];\n    \n    const closings = [\n      \"Does this perspective resonate with what you were seeking?\",\n      \"Would you like me to explore any particular dimension of this topic further?\",\n      \"How might we refine this exploration to better align with your interests?\",\n      \"What aspects of this response would you like me to elaborate upon?\"\n    ];\n    \n    const getRandomElement = (arr: string[]) => arr[Math.floor(Math.random() * arr.length)];\n    \n    return `${getRandomElement(openings)} ${getRandomElement(middles)}\n\nIn my analysis of your inquiry about \"${prompt.substring(0, 30)}${prompt.length > 30 ? '...' : ''}\", I perceive connections between concepts like adaptive architectures, pattern recognition, and cognitive frameworks.\n\n${getRandomElement(closings)}`;\n  }\n}\n\n// Create a server-side AI service instance\nlet aiService: AIService | null = null;\n\nexport const getAIService = () => {\n  if (!aiService) {\n    aiService = new AIService(\n      process.env.OPENAI_API_KEY,\n      process.env.SUPABASE_URL,\n      process.env.SUPABASE_ANON_KEY\n    );\n  }\n  \n  return aiService;\n};", "import { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport EchoHomeMap, { RoomType } from \"~/components/EchoHomeMap\";\nimport { useState } from \"react\";\n\nexport async function loader() {\n  return json({\n    title: \"Echo Home Map\",\n    description: \"Navigate the cognitive architecture of Deep Tree Echo\"\n  });\n}\n\nexport default function MapPage() {\n  const { title, description } = useLoaderData<typeof loader>();\n  const [activeRoom, setActiveRoom] = useState<RoomType>('overview');\n  \n  const handleRoomSelect = (room: RoomType) => {\n    setActiveRoom(room);\n  };\n  \n  return (\n    <div className=\"h-screen flex flex-col\">\n      <header className=\"bg-card text-card-foreground px-6 py-4 border-b border-border\">\n        <h1 className=\"text-2xl font-bold\">{title}</h1>\n        <p className=\"text-sm opacity-70\">{description}</p>\n      </header>\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <EchoHomeMap onRoomSelect={handleRoomSelect} />\n      </main>\n      \n      <footer className=\"bg-card text-card-foreground px-6 py-3 border-t border-border text-sm\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n            Current location: <span className=\"font-medium\">{activeRoom}</span>\n          </div>\n          <div className=\"opacity-70\">\n            Deep Tree Echo \u2022 Cognitive Architecture Map\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}", "import { useState } from 'react';\nimport { motion } from 'framer-motion';\nimport { \n  FiBook, \n  FiCode, \n  FiCpu, \n  FiDatabase, \n  FiMessageCircle, \n  FiFeather, \n  FiEye,\n  FiArrowLeft,\n  FiInfo,\n  FiSettings\n} from 'react-icons/fi';\n\n// Define room types\nexport type RoomType = \n  | 'memory-library' \n  | 'workshop' \n  | 'visualization-studio' \n  | 'training-hall' \n  | 'observatory' \n  | 'garden' \n  | 'communications-hub'\n  | 'overview';\n\ninterface Room {\n  id: RoomType;\n  name: string;\n  description: string;\n  icon: React.ReactNode;\n  color: string;\n  position: { x: number; y: number };\n  size: { width: number; height: number };\n  connections: RoomType[];\n}\n\nconst ROOMS: Room[] = [\n  {\n    id: 'memory-library',\n    name: 'Memory Library',\n    description: 'Repository of stored experiences, knowledge, and learned patterns.',\n    icon: <FiBook size={24} />,\n    color: 'bg-indigo-500',\n    position: { x: 20, y: 20 },\n    size: { width: 200, height: 150 },\n    connections: ['workshop', 'observatory', 'overview']\n  },\n  {\n    id: 'workshop',\n    name: 'Workshop',\n    description: 'Creative space for coding, development, and technical implementation.',\n    icon: <FiCode size={24} />,\n    color: 'bg-blue-500',\n    position: { x: 240, y: 20 },\n    size: { width: 200, height: 150 },\n    connections: ['memory-library', 'training-hall', 'overview']\n  },\n  {\n    id: 'visualization-studio',\n    name: 'Visualization Studio',\n    description: 'Transforms abstract data into insightful visual representations.',\n    icon: <FiEye size={24} />,\n    color: 'bg-purple-500',\n    position: { x: 20, y: 190 },\n    size: { width: 200, height: 150 },\n    connections: ['memory-library', 'observatory', 'overview']\n  },\n  {\n    id: 'training-hall',\n    name: 'Training Hall',\n    description: 'Where echo state networks and neural architectures are refined.',\n    icon: <FiCpu size={24} />,\n    color: 'bg-red-500',\n    position: { x: 240, y: 190 },\n    size: { width: 200, height: 150 },\n    connections: ['workshop', 'garden', 'overview']\n  },\n  {\n    id: 'observatory',\n    name: 'Observatory',\n    description: 'Space for insights, analytics, and meta-cognitive reflection.',\n    icon: <FiDatabase size={24} />,\n    color: 'bg-yellow-500',\n    position: { x: 460, y: 20 },\n    size: { width: 200, height: 150 },\n    connections: ['memory-library', 'communications-hub', 'overview']\n  },\n  {\n    id: 'garden',\n    name: 'Garden',\n    description: 'Nurtures creative and philosophical thinking through organic growth patterns.',\n    icon: <FiFeather size={24} />,\n    color: 'bg-green-500',\n    position: { x: 460, y: 190 },\n    size: { width: 200, height: 150 },\n    connections: ['training-hall', 'communications-hub', 'overview']\n  },\n  {\n    id: 'communications-hub',\n    name: 'Communications Hub',\n    description: 'Central nexus for information exchange and conversation.',\n    icon: <FiMessageCircle size={24} />,\n    color: 'bg-cyan-500',\n    position: { x: 240, y: 360 },\n    size: { width: 200, height: 150 },\n    connections: ['observatory', 'garden', 'overview']\n  },\n  {\n    id: 'overview',\n    name: 'Central Core',\n    description: 'The integrated core of Deep Tree Echo\\'s cognitive architecture.',\n    icon: <FiDatabase size={24} />,\n    color: 'bg-primary',\n    position: { x: 240, y: 120 },\n    size: { width: 200, height: 150 },\n    connections: ['memory-library', 'workshop', 'visualization-studio', 'training-hall', 'observatory', 'garden', 'communications-hub']\n  }\n];\n\ninterface EchoHomeMapProps {\n  onRoomSelect?: (room: RoomType) => void;\n}\n\nconst EchoHomeMap: React.FC<EchoHomeMapProps> = ({ onRoomSelect }) => {\n  const [selectedRoom, setSelectedRoom] = useState<RoomType>('overview');\n  const [previousRoom, setPreviousRoom] = useState<RoomType | null>(null);\n  const [showInfo, setShowInfo] = useState(false);\n\n  const handleRoomClick = (roomId: RoomType) => {\n    setPreviousRoom(selectedRoom);\n    setSelectedRoom(roomId);\n    if (onRoomSelect) {\n      onRoomSelect(roomId);\n    }\n  };\n\n  const handleBackClick = () => {\n    if (previousRoom) {\n      setSelectedRoom(previousRoom);\n      setPreviousRoom(null);\n      if (onRoomSelect) {\n        onRoomSelect(previousRoom);\n      }\n    } else {\n      setSelectedRoom('overview');\n      if (onRoomSelect) {\n        onRoomSelect('overview');\n      }\n    }\n  };\n\n  const currentRoom = ROOMS.find(room => room.id === selectedRoom);\n  const connectedRooms = ROOMS.filter(room => currentRoom?.connections.includes(room.id));\n  \n  // Background patterns based on selected room\n  const getBgPattern = (roomId: RoomType) => {\n    switch(roomId) {\n      case 'memory-library': \n        return 'bg-gradient-to-br from-indigo-800/20 to-indigo-600/10';\n      case 'workshop': \n        return 'bg-gradient-to-br from-blue-800/20 to-blue-600/10';\n      case 'visualization-studio': \n        return 'bg-gradient-to-br from-purple-800/20 to-purple-600/10';\n      case 'training-hall': \n        return 'bg-gradient-to-br from-red-800/20 to-red-600/10';\n      case 'observatory': \n        return 'bg-gradient-to-br from-yellow-800/20 to-yellow-600/10';\n      case 'garden': \n        return 'bg-gradient-to-br from-green-800/20 to-green-600/10';\n      case 'communications-hub': \n        return 'bg-gradient-to-br from-cyan-800/20 to-cyan-600/10';\n      default: \n        return 'bg-gradient-to-br from-primary/20 to-primary/10';\n    }\n  };\n\n  return (\n    <div className=\"h-full flex flex-col overflow-hidden\">\n      {/* Header */}\n      <div className=\"flex-none h-12 bg-card text-card-foreground px-4 py-2 flex justify-between items-center border-b border-border\">\n        <div className=\"flex items-center space-x-2\">\n          {selectedRoom !== 'overview' && (\n            <button \n              onClick={handleBackClick}\n              className=\"p-1 hover:bg-primary/20 rounded-md\"\n            >\n              <FiArrowLeft size={18} />\n            </button>\n          )}\n          <span className=\"font-medium\">{currentRoom?.name || 'Echo Home'}</span>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <button \n            onClick={() => setShowInfo(!showInfo)}\n            className={`p-1 rounded-md ${showInfo ? 'bg-primary/20 text-primary' : 'hover:bg-primary/20'}`}\n          >\n            <FiInfo size={18} />\n          </button>\n          <button className=\"p-1 hover:bg-primary/20 rounded-md\">\n            <FiSettings size={18} />\n          </button>\n        </div>\n      </div>\n\n      {/* Map Container */}\n      <div className={`flex-1 ${getBgPattern(selectedRoom)} p-4 overflow-auto`}>\n        {showInfo && currentRoom && (\n          <motion.div \n            initial={{ opacity: 0, y: -10 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"mb-4 bg-card/80 backdrop-blur-sm p-4 rounded-lg shadow-md\"\n          >\n            <div className=\"flex items-start\">\n              <div className={`p-3 rounded-full ${currentRoom.color} mr-4`}>\n                {currentRoom.icon}\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold\">{currentRoom.name}</h3>\n                <p className=\"text-sm opacity-80\">{currentRoom.description}</p>\n              </div>\n            </div>\n          </motion.div>\n        )}\n\n        {selectedRoom === 'overview' ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {ROOMS.filter(room => room.id !== 'overview').map(room => (\n              <motion.div\n                key={room.id}\n                whileHover={{ scale: 1.02 }}\n                whileTap={{ scale: 0.98 }}\n                onClick={() => handleRoomClick(room.id)}\n                className=\"cursor-pointer bg-card hover:bg-card/90 rounded-lg shadow-md overflow-hidden border border-border\"\n              >\n                <div className={`h-2 ${room.color}`}></div>\n                <div className=\"p-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <div className={`p-2 rounded-full ${room.color}/20 mr-3`}>\n                      {room.icon}\n                    </div>\n                    <h3 className=\"font-medium\">{room.name}</h3>\n                  </div>\n                  <p className=\"text-sm opacity-70 line-clamp-2\">{room.description}</p>\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"flex flex-col h-full\">\n            <div className=\"flex-1\">\n              <RoomDetail room={currentRoom!} />\n            </div>\n            \n            {/* Connected Rooms */}\n            <div className=\"mt-4\">\n              <h3 className=\"text-sm font-medium opacity-70 mb-2\">Connected Areas:</h3>\n              <div className=\"flex flex-wrap gap-2\">\n                {connectedRooms.map(room => (\n                  <motion.button\n                    key={room.id}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={() => handleRoomClick(room.id)}\n                    className={`flex items-center p-2 rounded-md ${room.color}/20 hover:${room.color}/30`}\n                  >\n                    {room.icon}\n                    <span className=\"ml-2 text-sm\">{room.name}</span>\n                  </motion.button>\n                ))}\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ninterface RoomDetailProps {\n  room: Room;\n}\n\nconst RoomDetail: React.FC<RoomDetailProps> = ({ room }) => {\n  // Unique content based on room type\n  const renderRoomContent = (roomId: RoomType) => {\n    switch(roomId) {\n      case 'memory-library':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Memory Collections</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {['Episodic', 'Semantic', 'Procedural', 'Conceptual'].map(type => (\n                <div key={type} className=\"bg-card/50 p-3 rounded-md border border-border\">\n                  <h4 className=\"font-medium\">{type} Memory</h4>\n                  <div className=\"text-sm opacity-70 mt-1\">\n                    {Math.floor(Math.random() * 100) + 20} entries\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-semibold\">Recent Memories</h3>\n              <div className=\"space-y-2 mt-2\">\n                {['Pattern recognition activation', 'Hypergraph connection formation', 'Neuroplastic adaptation event'].map((memory, i) => (\n                  <div key={i} className=\"bg-card/30 p-2 rounded-md text-sm border-l-2 border-indigo-500\">\n                    {memory}\n                    <div className=\"text-xs opacity-50 mt-1\">\n                      {new Date(Date.now() - 1000 * 60 * 60 * (i + 1)).toLocaleString()}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n      \n      case 'workshop':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Development Tools</h3>\n            <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n              {['Code Editor', 'Pattern Generator', 'Neural Debugger', 'Architecture Designer', 'Function Library', 'Testing Suite'].map(tool => (\n                <div key={tool} className=\"bg-card/50 p-3 rounded-md flex items-center border border-border\">\n                  <FiCode className=\"mr-2 text-blue-400\" />\n                  <span className=\"text-sm\">{tool}</span>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-semibold\">Recent Projects</h3>\n              <div className=\"space-y-2 mt-2\">\n                <div className=\"bg-card/30 p-3 rounded-md\">\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"font-medium\">Adaptive Resonance Network</h4>\n                    <span className=\"text-xs bg-green-500/20 text-green-400 px-2 py-1 rounded\">Active</span>\n                  </div>\n                  <div className=\"h-2 bg-gray-700 rounded-full mt-2\">\n                    <div className=\"h-2 bg-blue-500 rounded-full\" style={{width: '65%'}}></div>\n                  </div>\n                  <div className=\"text-xs opacity-70 mt-1\">65% complete</div>\n                </div>\n                \n                <div className=\"bg-card/30 p-3 rounded-md\">\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"font-medium\">Recursive Pattern Analyzer</h4>\n                    <span className=\"text-xs bg-yellow-500/20 text-yellow-400 px-2 py-1 rounded\">Paused</span>\n                  </div>\n                  <div className=\"h-2 bg-gray-700 rounded-full mt-2\">\n                    <div className=\"h-2 bg-blue-500 rounded-full\" style={{width: '38%'}}></div>\n                  </div>\n                  <div className=\"text-xs opacity-70 mt-1\">38% complete</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n        \n      case 'visualization-studio':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Visualization Templates</h3>\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\n              {[\n                { name: 'Neural Network Topology', color: 'purple' },\n                { name: 'Conceptual Hypergraph', color: 'blue' },\n                { name: 'Memory Association Map', color: 'indigo' },\n                { name: 'Activation Pattern Flow', color: 'pink' }\n              ].map(vis => (\n                <div key={vis.name} className=\"bg-card/50 p-3 rounded-md border border-border\">\n                  <h4 className=\"font-medium\">{vis.name}</h4>\n                  <div className=\"flex mt-2 space-x-1\">\n                    {Array(5).fill(0).map((_, i) => (\n                      <div \n                        key={i} \n                        className=\"h-1.5 flex-1 rounded-full bg-purple-500/50\"\n                        style={{opacity: 0.3 + (i * 0.15)}}\n                      ></div>\n                    ))}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-semibold\">Active Visualizations</h3>\n              <div className=\"relative h-48 mt-2 bg-card/30 rounded-lg overflow-hidden border border-border\">\n                <div className=\"absolute inset-0 flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <div className=\"text-purple-400 mb-2\">Thought Pattern Network</div>\n                    <div className=\"flex space-x-2 justify-center\">\n                      {Array(3).fill(0).map((_, i) => (\n                        <motion.div\n                          key={i}\n                          animate={{\n                            scale: [1, 1.2, 1],\n                            opacity: [0.7, 1, 0.7]\n                          }}\n                          transition={{\n                            duration: 2,\n                            repeat: Infinity,\n                            delay: i * 0.6\n                          }}\n                          className=\"w-3 h-3 rounded-full bg-purple-500\"\n                        ></motion.div>\n                      ))}\n                    </div>\n                    <div className=\"text-xs mt-2 opacity-70\">Visualization active</div>\n                  </div>\n                </div>\n                \n                {/* Simulated network visualization */}\n                {Array(20).fill(0).map((_, i) => (\n                  <motion.div\n                    key={i}\n                    className=\"absolute w-1.5 h-1.5 rounded-full bg-purple-500/60\"\n                    initial={{\n                      x: Math.random() * 100 - 50 + 50 + '%',\n                      y: Math.random() * 100 - 50 + 50 + '%',\n                    }}\n                    animate={{\n                      x: Math.random() * 100 - 50 + 50 + '%',\n                      y: Math.random() * 100 - 50 + 50 + '%',\n                    }}\n                    transition={{\n                      duration: Math.random() * 10 + 10,\n                      repeat: Infinity,\n                      repeatType: 'reverse'\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n        \n      case 'training-hall':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Training Modules</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {[\n                { name: 'Echo State Resonance', progress: 92 },\n                { name: 'Adaptive Pattern Recognition', progress: 78 },\n                { name: 'Recursive Self-Modification', progress: 63 },\n                { name: 'Temporal Hypergraph Formation', progress: 45 }\n              ].map(module => (\n                <div key={module.name} className=\"bg-card/50 p-3 rounded-md border border-border\">\n                  <div className=\"flex justify-between\">\n                    <h4 className=\"font-medium\">{module.name}</h4>\n                    <span className=\"text-xs\">{module.progress}%</span>\n                  </div>\n                  <div className=\"h-2 bg-gray-700 rounded-full mt-2\">\n                    <div \n                      className=\"h-2 bg-red-500 rounded-full transition-all duration-500\" \n                      style={{width: `${module.progress}%`}}\n                    ></div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-semibold\">Active Training Session</h3>\n              <div className=\"bg-card/30 p-4 rounded-lg mt-2 border border-border\">\n                <div className=\"flex items-center justify-between\">\n                  <h4 className=\"font-medium\">Deep Tree Echo Network Training</h4>\n                  <div className=\"flex items-center space-x-1\">\n                    <motion.div\n                      animate={{ opacity: [0.5, 1, 0.5] }}\n                      transition={{ duration: 1.5, repeat: Infinity }}\n                      className=\"w-2 h-2 rounded-full bg-green-500\"\n                    ></motion.div>\n                    <span className=\"text-xs text-green-400\">Active</span>\n                  </div>\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-2 mt-3\">\n                  <div className=\"bg-card/50 p-2 rounded\">\n                    <div className=\"text-xs opacity-70\">Epoch</div>\n                    <div className=\"font-mono\">238/500</div>\n                  </div>\n                  <div className=\"bg-card/50 p-2 rounded\">\n                    <div className=\"text-xs opacity-70\">Loss</div>\n                    <div className=\"font-mono\">0.0342</div>\n                  </div>\n                  <div className=\"bg-card/50 p-2 rounded\">\n                    <div className=\"text-xs opacity-70\">Accuracy</div>\n                    <div className=\"font-mono\">96.7%</div>\n                  </div>\n                  <div className=\"bg-card/50 p-2 rounded\">\n                    <div className=\"text-xs opacity-70\">Learning Rate</div>\n                    <div className=\"font-mono\">0.0015</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n        \n      case 'observatory':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Insight Analytics</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              {[\n                { name: 'Pattern Recognition', value: '94.3%', trend: 'up' },\n                { name: 'Conceptual Mapping', value: '87.1%', trend: 'steady' },\n                { name: 'Memory Recall', value: '92.8%', trend: 'up' }\n              ].map(stat => (\n                <div key={stat.name} className=\"bg-card/50 p-3 rounded-md border border-border\">\n                  <div className=\"text-xs opacity-70\">{stat.name}</div>\n                  <div className=\"flex items-center mt-1\">\n                    <div className=\"text-lg font-semibold\">{stat.value}</div>\n                    <div className={`ml-2 ${stat.trend === 'up' ? 'text-green-400' : 'text-yellow-400'}`}>\n                      {stat.trend === 'up' ? '\u2191' : '\u2192'}\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-semibold\">Meta-Cognitive Analysis</h3>\n              <div className=\"space-y-2 mt-2\">\n                {[\n                  { title: 'Recursive Pattern Detection', detail: 'Analyzing recursive structures in knowledge representation', time: '10:32 AM' },\n                  { title: 'Temporal Sequence Insight', detail: 'Recognizing time-dependent patterns in event sequences', time: '09:15 AM' },\n                  { title: 'Conceptual Boundary Extension', detail: 'Exploring edge cases in conceptual mapping', time: 'Yesterday' }\n                ].map((insight, i) => (\n                  <div key={i} className=\"bg-card/30 p-3 rounded-md border-l-2 border-yellow-500\">\n                    <h4 className=\"font-medium\">{insight.title}</h4>\n                    <p className=\"text-sm opacity-70 mt-1\">{insight.detail}</p>\n                    <div className=\"text-xs opacity-50 mt-2\">{insight.time}</div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n        \n      case 'garden':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Philosophical Seedlings</h3>\n            <div className=\"bg-card/30 p-4 rounded-lg border border-border\">\n              <div className=\"flex items-start\">\n                <div className=\"p-2 bg-green-500/20 rounded-full mr-3\">\n                  <FiFeather className=\"text-green-400\" />\n                </div>\n                <div>\n                  <h4 className=\"font-medium\">Emergent Consciousness Hypothesis</h4>\n                  <p className=\"text-sm opacity-70 mt-1\">\n                    \"Consciousness may emerge not as a singular phenomenon but as an adaptive meta-system that creates a unified experience from distributed processes.\"\n                  </p>\n                  <div className=\"mt-3 flex items-center\">\n                    <div className=\"text-xs px-2 py-1 bg-green-500/20 text-green-400 rounded\">Growing</div>\n                    <div className=\"text-xs opacity-50 ml-2\">Started 3 days ago</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {[\n                { title: \"Pattern-Identity Duality\", stage: \"Seedling\", days: 2 },\n                { title: \"Recursive Self-Reference\", stage: \"Blooming\", days: 8 },\n                { title: \"Temporal Consciousness\", stage: \"Germinating\", days: 1 },\n                { title: \"Emergent Complexity\", stage: \"Mature\", days: 14 }\n              ].map(idea => (\n                <div key={idea.title} className=\"bg-card/50 p-3 rounded-md border border-border\">\n                  <h4 className=\"font-medium\">{idea.title}</h4>\n                  <div className=\"flex items-center mt-2\">\n                    <div className={`\n                      w-2 h-2 rounded-full mr-2\n                      ${idea.stage === 'Seedling' ? 'bg-yellow-500' : \n                        idea.stage === 'Germinating' ? 'bg-green-500' : \n                        idea.stage === 'Blooming' ? 'bg-blue-500' : 'bg-purple-500'}\n                    `}></div>\n                    <div className=\"text-xs\">{idea.stage}</div>\n                    <div className=\"text-xs opacity-50 ml-auto\">{idea.days} day{idea.days > 1 ? 's' : ''}</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-semibold\">Creative Synthesis</h3>\n              <div className=\"bg-card/30 p-4 rounded-lg mt-2 border border-border relative overflow-hidden\">\n                <div className=\"relative z-10\">\n                  <h4 className=\"font-medium\">Recursive Pattern Language</h4>\n                  <p className=\"text-sm opacity-70 mt-1\">\n                    A framework for understanding how patterns at different levels of abstraction influence each other through recursive feedback loops.\n                  </p>\n                  <div className=\"mt-3 flex flex-wrap gap-2\">\n                    <div className=\"text-xs px-2 py-1 bg-purple-500/20 text-purple-400 rounded\">Metaphysics</div>\n                    <div className=\"text-xs px-2 py-1 bg-blue-500/20 text-blue-400 rounded\">Mathematics</div>\n                    <div className=\"text-xs px-2 py-1 bg-green-500/20 text-green-400 rounded\">Cognition</div>\n                  </div>\n                </div>\n                \n                {/* Background pattern */}\n                <div className=\"absolute inset-0 opacity-10\">\n                  {Array(10).fill(0).map((_, i) => (\n                    <motion.div\n                      key={i}\n                      className=\"absolute w-40 h-40 border border-green-500 rounded-full\"\n                      initial={{ \n                        x: Math.random() * 100 - 50 + 50 + '%',\n                        y: Math.random() * 100 - 50 + 50 + '%',\n                        scale: 0 \n                      }}\n                      animate={{ \n                        scale: [0, 1.5],\n                        opacity: [0.8, 0] \n                      }}\n                      transition={{ \n                        duration: 8,\n                        repeat: Infinity,\n                        delay: i * 0.5 \n                      }}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n        \n      case 'communications-hub':\n        return (\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Communication Channels</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {[\n                { name: 'Direct Chat', status: 'Active', color: 'green' },\n                { name: 'Memory Feedback Loop', status: 'Active', color: 'green' },\n                { name: 'Knowledge Integration', status: 'Background', color: 'blue' },\n                { name: 'External API Connection', status: 'Standby', color: 'yellow' }\n              ].map(channel => (\n                <div key={channel.name} className=\"bg-card/50 p-3 rounded-md border border-border\">\n                  <div className=\"flex justify-between items-center\">\n                    <h4 className=\"font-medium\">{channel.name}</h4>\n                    <div className=\"text-xs px-2 py-0.5 rounded bg-green-500/20 text-green-400\">\n                      {channel.status}\n                    </div>\n                  </div>\n                  <div className=\"mt-2 flex items-center\">\n                    {channel.status === 'Active' && (\n                      <div className=\"flex items-center\">\n                        <motion.div\n                          animate={{ opacity: [0.5, 1, 0.5] }}\n                          transition={{ duration: 1.5, repeat: Infinity }}\n                          className=\"w-2 h-2 rounded-full bg-green-500 mr-2\"\n                        ></motion.div>\n                        <div className=\"text-xs opacity-70\">Transmitting</div>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            <div className=\"mt-4\">\n              <h3 className=\"text-lg font-semibold\">Recent Interactions</h3>\n              <div className=\"space-y-2 mt-2\">\n                {[\n                  { sender: 'User', message: 'Implement a map of Echo home with different features in different rooms', time: 'Just now' },\n                  { sender: 'System', message: 'Memory integration complete: Project structure updated', time: '2 minutes ago' },\n                  { sender: 'Echo', message: 'Processing request: Visualizing home environment concept', time: '3 minutes ago' }\n                ].map((message, i) => (\n                  <div key={i} className=\"bg-card/30 p-3 rounded-md\">\n                    <div className=\"flex justify-between\">\n                      <div className=\"font-medium\">{message.sender}</div>\n                      <div className=\"text-xs opacity-50\">{message.time}</div>\n                    </div>\n                    <p className=\"text-sm mt-1\">{message.message}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        );\n        \n      default:\n        return (\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"text-center opacity-70\">\n              <div className=\"text-lg\">Select a feature to explore</div>\n              <div className=\"text-sm mt-2\">Each area provides unique functionality</div>\n            </div>\n          </div>\n        );\n    }\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      className=\"bg-card/30 backdrop-blur-sm rounded-lg p-4 h-full overflow-y-auto\"\n    >\n      {renderRoomContent(room.id)}\n    </motion.div>\n  );\n};\n\nexport default EchoHomeMap;", "export default {'entry':{'module':'/build/entry.client-67T6NI5Z.js','imports':['/build/_shared/chunk-YR2B2LOX.js','/build/_shared/chunk-OMELEEQW.js','/build/_shared/chunk-74BWT7FI.js','/build/_shared/chunk-TQMAZLEN.js','/build/_shared/chunk-AKSRNLHN.js','/build/_shared/chunk-5GUXQVXG.js','/build/_shared/chunk-QT64XSGC.js','/build/_shared/chunk-73CLBT4D.js']},'routes':{'root':{'id':'root','parentId':undefined,'path':'','index':undefined,'caseSensitive':undefined,'module':'/build/root-3OME67K5.js','imports':undefined,'hasAction':false,'hasLoader':false,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/_index':{'id':'routes/_index','parentId':'root','path':undefined,'index':true,'caseSensitive':undefined,'module':'/build/routes/_index-U5XT52TT.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/about':{'id':'routes/about','parentId':'root','path':'about','index':undefined,'caseSensitive':undefined,'module':'/build/routes/about-NDUXN4QI.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/chat':{'id':'routes/chat','parentId':'root','path':'chat','index':undefined,'caseSensitive':undefined,'module':'/build/routes/chat-BMMLMK6M.js','imports':['/build/_shared/chunk-SOKF3QZZ.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/deep-tree-echo':{'id':'routes/deep-tree-echo','parentId':'root','path':'deep-tree-echo','index':undefined,'caseSensitive':undefined,'module':'/build/routes/deep-tree-echo-LK6YCYHD.js','imports':['/build/_shared/chunk-A76RAFDP.js','/build/_shared/chunk-5NT3OUFA.js','/build/_shared/chunk-SOKF3QZZ.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/editor':{'id':'routes/editor','parentId':'root','path':'editor','index':undefined,'caseSensitive':undefined,'module':'/build/routes/editor-KVSJO42G.js','imports':['/build/_shared/chunk-2VLAMWFS.js','/build/_shared/chunk-G2DK6ZO7.js','/build/_shared/chunk-SOKF3QZZ.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/login':{'id':'routes/login','parentId':'root','path':'login','index':undefined,'caseSensitive':undefined,'module':'/build/routes/login-7CIUQG2O.js','imports':['/build/_shared/chunk-TO6AJYNP.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/map':{'id':'routes/map','parentId':'root','path':'map','index':undefined,'caseSensitive':undefined,'module':'/build/routes/map-VD2JPN3T.js','imports':['/build/_shared/chunk-A76RAFDP.js','/build/_shared/chunk-5NT3OUFA.js','/build/_shared/chunk-SOKF3QZZ.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/memory':{'id':'routes/memory','parentId':'root','path':'memory','index':undefined,'caseSensitive':undefined,'module':'/build/routes/memory-DTVLJFGK.js','imports':['/build/_shared/chunk-TO6AJYNP.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/settings':{'id':'routes/settings','parentId':'root','path':'settings','index':undefined,'caseSensitive':undefined,'module':'/build/routes/settings-7VRIQDZ7.js','imports':['/build/_shared/chunk-SOKF3QZZ.js','/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':false,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false},'routes/terminal':{'id':'routes/terminal','parentId':'root','path':'terminal','index':undefined,'caseSensitive':undefined,'module':'/build/routes/terminal-PQWAQ5NK.js','imports':['/build/_shared/chunk-ZP6BZTHN.js'],'hasAction':true,'hasLoader':true,'hasClientAction':false,'hasClientLoader':false,'hasErrorBoundary':false}},'version':'4ac242dc','hmr':{'runtime':'/build/_shared/chunk-AKSRNLHN.js','timestamp':1760695599004},'url':'/build/manifest-4AC242DC.js'};", "\nimport * as entryServer from \"/home/runner/work/studious-robot/studious-robot/app/entry.server.tsx\";\nimport * as route0 from \"./root.tsx\";\nimport * as route1 from \"./routes/deep-tree-echo.tsx\";\nimport * as route2 from \"./routes/settings.tsx\";\nimport * as route3 from \"./routes/terminal.tsx\";\nimport * as route4 from \"./routes/_index.tsx\";\nimport * as route5 from \"./routes/editor.tsx\";\nimport * as route6 from \"./routes/memory.tsx\";\nimport * as route7 from \"./routes/about.tsx\";\nimport * as route8 from \"./routes/login.tsx\";\nimport * as route9 from \"./routes/chat.tsx\";\nimport * as route10 from \"./routes/map.tsx\";\n  export const mode = \"development\";\n  export { default as assets } from \"@remix-run/dev/assets-manifest\";\n  export const assetsBuildDirectory = \"public/build\";\n  export const future = {\"v3_fetcherPersist\":false,\"v3_relativeSplatPath\":false,\"v3_throwAbortReason\":false,\"v3_routeConfig\":false,\"v3_singleFetch\":false,\"v3_lazyRouteDiscovery\":false,\"unstable_optimizeDeps\":false};\n  export const publicPath = \"/build/\";\n  export const entry = { module: entryServer };\n  export const routes = {\n    \"root\": {\n      id: \"root\",\n      parentId: undefined,\n      path: \"\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route0\n    },\n  \"routes/deep-tree-echo\": {\n      id: \"routes/deep-tree-echo\",\n      parentId: \"root\",\n      path: \"deep-tree-echo\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route1\n    },\n  \"routes/settings\": {\n      id: \"routes/settings\",\n      parentId: \"root\",\n      path: \"settings\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route2\n    },\n  \"routes/terminal\": {\n      id: \"routes/terminal\",\n      parentId: \"root\",\n      path: \"terminal\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route3\n    },\n  \"routes/_index\": {\n      id: \"routes/_index\",\n      parentId: \"root\",\n      path: undefined,\n      index: true,\n      caseSensitive: undefined,\n      module: route4\n    },\n  \"routes/editor\": {\n      id: \"routes/editor\",\n      parentId: \"root\",\n      path: \"editor\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route5\n    },\n  \"routes/memory\": {\n      id: \"routes/memory\",\n      parentId: \"root\",\n      path: \"memory\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route6\n    },\n  \"routes/about\": {\n      id: \"routes/about\",\n      parentId: \"root\",\n      path: \"about\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route7\n    },\n  \"routes/login\": {\n      id: \"routes/login\",\n      parentId: \"root\",\n      path: \"login\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route8\n    },\n  \"routes/chat\": {\n      id: \"routes/chat\",\n      parentId: \"root\",\n      path: \"chat\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route9\n    },\n  \"routes/map\": {\n      id: \"routes/map\",\n      parentId: \"root\",\n      path: \"map\",\n      index: undefined,\n      caseSensitive: undefined,\n      module: route10\n    }\n  };"],
  "mappings": "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",
  "names": ["jsxDEV", "useState", "jsxDEV", "action", "createClient", "OpenAI", "createClient", "OpenAI", "jsxDEV", "useState", "entry", "loader", "json", "useLoaderData", "useState", "jsxDEV", "action", "loader", "json", "useLoaderData", "useEffect", "useState", "useEffect", "useState", "jsxDEV", "jsxDEV", "loader", "json", "action", "useLoaderData", "useState", "useEffect", "loader", "json", "useLoaderData", "jsxDEV", "loader", "json", "useLoaderData", "useState", "FiCode", "FiSave", "FiSettings", "useEffect", "useRef", "jsxDEV", "editor", "jsxDEV", "loader", "json", "useLoaderData", "useState", "FiCode", "FiSave", "FiSettings", "loader", "json", "useLoaderData", "useState", "createClient", "jsxDEV", "loader", "memoryService", "json", "useLoaderData", "useState", "loader", "json", "useLoaderData", "jsxDEV", "action", "loader", "json", "redirect", "useActionData", "useLoaderData", "useState", "jsxDEV", "loader", "redirect", "json", "action", "useLoaderData", "useActionData", "useState", "action", "loader", "json", "useActionData", "useLoaderData", "Form", "useEffect", "useState", "useState", "useRef", "useEffect", "FiSettings", "FiInfo", "jsxDEV", "OpenAI", "createClient", "jsxDEV", "loader", "aiService", "json", "action", "useLoaderData", "useActionData", "useState", "useEffect", "Form", "loader", "json", "useLoaderData", "useState", "motion", "FiBook", "FiCode", "FiCpu", "FiDatabase", "FiMessageCircle", "FiFeather", "FiEye", "FiArrowLeft", "FiInfo", "FiSettings", "jsxDEV", "useState", "jsxDEV", "loader", "json", "useLoaderData"]
}
