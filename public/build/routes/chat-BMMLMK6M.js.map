{
  "version": 3,
  "sources": ["empty-module:~/services/ai.server", "../../../app/routes/chat.tsx", "../../../app/components/ChatInterface.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/chat.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/chat.tsx\");\n  import.meta.hot.lastModified = \"1760694711122.6702\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useActionData, useLoaderData, useNavigation, Form } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport ChatInterface from \"~/components/ChatInterface\";\nimport { getAIService } from \"~/services/ai.server\";\nexport async function loader({\n  request\n}) {\n  const aiService = getAIService();\n  return json({\n    apiKeyConfigured: aiService.isInitialized(),\n    initialMessage: {\n      id: \"welcome\",\n      role: \"assistant\",\n      content: \"Welcome to Deep Tree Echo. How can I assist you today?\",\n      timestamp: new Date().toISOString()\n    }\n  });\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const content = formData.get(\"content\");\n  const history = JSON.parse(formData.get(\"history\") || \"[]\");\n  if (!content) {\n    return json({\n      error: \"Message content is required\"\n    });\n  }\n  const aiService = getAIService();\n\n  // Add user message to history\n  const userMessage = {\n    id: `msg_${Date.now()}`,\n    role: \"user\",\n    content,\n    timestamp: new Date().toISOString()\n  };\n  const updatedHistory = [...history, userMessage];\n  try {\n    // Convert messages to the format expected by the AI service\n    const formattedMessages = updatedHistory.map(msg => ({\n      role: msg.role,\n      content: msg.content\n    }));\n\n    // Generate response\n    const responseContent = await aiService.generateResponseWithHistory(formattedMessages);\n\n    // Create assistant message\n    const assistantMessage = {\n      id: `msg_${Date.now() + 1}`,\n      role: \"assistant\",\n      content: responseContent,\n      timestamp: new Date().toISOString()\n    };\n    return json({\n      userMessage,\n      assistantMessage,\n      success: true\n    });\n  } catch (error) {\n    console.error(\"Error generating response:\", error);\n    return json({\n      userMessage,\n      error: \"Failed to generate response. Please try again.\"\n    });\n  }\n}\nexport default function ChatPage() {\n  _s();\n  const loaderData = useLoaderData();\n  const actionData = useActionData();\n  const navigation = useNavigation();\n  const [messages, setMessages] = useState([loaderData.initialMessage]);\n  const [showApiKeyModal, setShowApiKeyModal] = useState(false);\n  const [apiKey, setApiKey] = useState(\"\");\n\n  // Update messages when action data changes\n  useEffect(() => {\n    if (actionData?.userMessage) {\n      setMessages(prev => [...prev, actionData.userMessage]);\n    }\n    if (actionData?.assistantMessage) {\n      setMessages(prev => [...prev, actionData.assistantMessage]);\n    }\n  }, [actionData]);\n  const handleSendMessage = content => {\n    // The actual sending happens in the form submission\n  };\n  const isProcessing = navigation.state === \"submitting\";\n  return <div className=\"h-screen flex flex-col\">\n      <Form method=\"post\" className=\"h-full\">\n        <input type=\"hidden\" name=\"history\" value={JSON.stringify(messages)} />\n        <input type=\"hidden\" name=\"content\" id=\"message-content\" />\n        \n        <ChatInterface messages={messages} onSendMessage={content => {\n        // Set the content in the hidden input and submit the form\n        const input = document.getElementById(\"message-content\");\n        if (input) {\n          input.value = content;\n          input.form?.requestSubmit();\n        }\n      }} isProcessing={isProcessing} apiKeyConfigured={loaderData.apiKeyConfigured} onConfigureApiKey={() => setShowApiKeyModal(true)} />\n      </Form>\n      \n      {/* API Key Modal */}\n      {showApiKeyModal && <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50\">\n          <div className=\"bg-card rounded-lg shadow-xl max-w-md w-full p-6\">\n            <h2 className=\"text-xl font-semibold mb-4\">Configure OpenAI API Key</h2>\n            <p className=\"mb-4 text-sm opacity-80\">\n              To use the full capabilities of Deep Tree Echo, please provide your OpenAI API key.\n              Your key is stored securely and only used for generating AI responses.\n            </p>\n            \n            <div className=\"mb-4\">\n              <label htmlFor=\"api-key\" className=\"block text-sm font-medium mb-1\">\n                OpenAI API Key\n              </label>\n              <input type=\"password\" id=\"api-key\" value={apiKey} onChange={e => setApiKey(e.target.value)} className=\"w-full bg-input border border-border rounded-md px-3 py-2\" placeholder=\"sk-...\" />\n              <p className=\"text-xs mt-1 opacity-70\">\n                You can get your API key from the <a href=\"https://platform.openai.com/api-keys\" target=\"_blank\" rel=\"noreferrer\" className=\"text-primary hover:underline\">OpenAI dashboard</a>.\n              </p>\n            </div>\n            \n            <div className=\"flex justify-end space-x-3\">\n              <button type=\"button\" onClick={() => setShowApiKeyModal(false)} className=\"px-4 py-2 border border-border rounded-md\">\n                Cancel\n              </button>\n              <button type=\"button\" onClick={() => {\n            // In a real app, this would save the API key to the server\n            // For now, we'll just close the modal\n            setShowApiKeyModal(false);\n          }} className=\"px-4 py-2 bg-primary text-white rounded-md\" disabled={!apiKey.trim().startsWith('sk-')}>\n                Save API Key\n              </button>\n            </div>\n          </div>\n        </div>}\n    </div>;\n}\n_s(ChatPage, \"tcoKthaU7ZobrfdEpY/UCSmaPLQ=\", false, function () {\n  return [useLoaderData, useActionData, useNavigation];\n});\n_c = ChatPage;\nvar _c;\n$RefreshReg$(_c, \"ChatPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/ChatInterface.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/ChatInterface.tsx\");\n  import.meta.hot.lastModified = \"1760694711121.6702\";\n}\n// REMIX HMR END\n\nimport { useState, useRef, useEffect } from 'react';\nimport { FiSend, FiSettings, FiInfo } from 'react-icons/fi';\nconst ChatInterface = ({\n  messages,\n  onSendMessage,\n  isProcessing = false,\n  apiKeyConfigured = false,\n  onConfigureApiKey\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef(null);\n  const inputRef = useRef(null);\n\n  // Auto-scroll to bottom when messages change\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({\n        behavior: 'smooth'\n      });\n    }\n  }, [messages]);\n\n  // Focus input on mount\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.focus();\n    }\n  }, []);\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (input.trim() && !isProcessing) {\n      onSendMessage(input);\n      setInput('');\n    }\n  };\n  return <div className=\"flex flex-col h-full\">\n      {/* Header */}\n      <div className=\"bg-card text-card-foreground px-4 py-3 border-b border-border flex justify-between items-center\">\n        <div className=\"flex items-center\">\n          <span className=\"font-medium\">Deep Tree Echo Chat</span>\n          {isProcessing && <span className=\"ml-3 text-xs bg-primary/20 text-primary px-2 py-0.5 rounded animate-pulse\">\n              Processing...\n            </span>}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          {!apiKeyConfigured && <button onClick={onConfigureApiKey} className=\"p-1 rounded-md text-yellow-400 hover:bg-yellow-400/20\" title=\"API Key not configured\">\n              <FiInfo size={18} />\n            </button>}\n          <button onClick={onConfigureApiKey} className=\"p-1 rounded-md hover:bg-primary/20\" title=\"Chat Settings\">\n            <FiSettings size={18} />\n          </button>\n        </div>\n      </div>\n      \n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4\">\n        {messages.map(message => <div key={message.id} className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}>\n            <div className={`max-w-[80%] rounded-lg p-3 ${message.role === 'user' ? 'bg-primary/20 text-foreground' : 'bg-card text-card-foreground'}`}>\n              <div className=\"prose prose-sm dark:prose-invert\">\n                {message.content.split('\\n').map((line, i) => <p key={i} className={i === 0 ? 'mt-0' : ''}>\n                    {line}\n                  </p>)}\n              </div>\n              <div className=\"text-xs opacity-70 mt-1\">\n                {new Date(message.timestamp).toLocaleTimeString()}\n              </div>\n            </div>\n          </div>)}\n        \n        {messages.length === 0 && <div className=\"h-full flex items-center justify-center\">\n            <div className=\"text-center max-w-md p-6\">\n              <h2 className=\"text-xl font-medium mb-2\">Welcome to Deep Tree Echo</h2>\n              <p className=\"opacity-70 mb-4\">\n                I'm your AI architect and polymath assistant. Ask me anything about programming, mathematics, cognitive science, or philosophical exploration.\n              </p>\n              {!apiKeyConfigured && <div className=\"bg-yellow-500/20 text-yellow-400 p-3 rounded-md text-sm\">\n                  <p>\n                    For full capabilities, please configure your OpenAI API key in settings.\n                    Without an API key, I'll provide simulated responses.\n                  </p>\n                  <button onClick={onConfigureApiKey} className=\"mt-2 px-3 py-1 bg-yellow-500/20 hover:bg-yellow-500/30 rounded-md\">\n                    Configure API Key\n                  </button>\n                </div>}\n            </div>\n          </div>}\n        \n        <div ref={messagesEndRef} />\n      </div>\n      \n      {/* Input */}\n      <div className=\"border-t border-border p-4\">\n        <form onSubmit={handleSubmit} className=\"flex\">\n          <input ref={inputRef} type=\"text\" value={input} onChange={e => setInput(e.target.value)} placeholder=\"Type your message...\" className=\"flex-1 bg-input border border-border rounded-l-md px-4 py-2 focus:outline-none focus:ring-1 focus:ring-primary\" disabled={isProcessing} />\n          <button type=\"submit\" className=\"bg-primary text-white px-4 py-2 rounded-r-md disabled:opacity-50\" disabled={!input.trim() || isProcessing}>\n            {isProcessing ? <span className=\"inline-block animate-pulse\">...</span> : <FiSend />}\n          </button>\n        </form>\n      </div>\n    </div>;\n};\n_s(ChatInterface, \"5Pur+RmxhajK3st9lLtJqcCQG58=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react", "import_jsx_dev_runtime", "_s", "_s", "_c"]
}
