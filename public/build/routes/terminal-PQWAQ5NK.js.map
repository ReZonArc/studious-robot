{
  "version": 3,
  "sources": ["empty-module:~/services/fileSystem.server", "empty-module:~/services/scriptRunner.server", "empty-module:~/services/pythonRunner.server", "../../../node_modules/xterm/lib/webpack:/xterm/webpack/universalModuleDefinition", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/AccessibilityManager.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Clipboard.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/ColorContrastCache.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Lifecycle.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Linkifier2.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/LocalizableStrings.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/OscLinkProvider.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/RenderDebouncer.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/ScreenDprMonitor.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Terminal.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/TimeBasedDebouncer.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/Viewport.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/BufferDecorationRenderer.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/ColorZoneStore.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/decorations/OverviewRulerRenderer.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/input/CompositionHelper.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/input/Mouse.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/input/MoveToCell.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRenderer.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/dom/DomRendererRowFactory.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/dom/WidthCache.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/shared/Constants.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/renderer/shared/RendererUtils.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/selection/SelectionModel.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/CharSizeService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/CharacterJoinerService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/CoreBrowserService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/MouseService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/RenderService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/SelectionService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/Services.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/services/ThemeService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/CircularList.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/Clone.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/Color.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/CoreTerminal.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/EventEmitter.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/InputHandler.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/Lifecycle.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/MultiKeyMap.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/Platform.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/SortedList.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/TaskQueue.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/WindowsMode.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/AttributeData.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Buffer.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferLine.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferRange.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferReflow.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/BufferSet.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/CellData.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Constants.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/buffer/Marker.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/data/Charsets.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/data/EscapeSequences.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/Keyboard.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/TextDecoder.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/UnicodeV6.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/WriteBuffer.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/input/XParseColor.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/Constants.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/DcsParser.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/EscapeSequenceParser.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/OscParser.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/parser/Params.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/AddonManager.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferApiView.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferLineApiView.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/BufferNamespaceApi.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/ParserApi.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/public/UnicodeApi.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/BufferService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/CharsetService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/CoreMouseService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/CoreService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/DecorationService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/InstantiationService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/LogService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/OptionsService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/OscLinkService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/ServiceRegistry.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/Services.ts", "../../../node_modules/xterm/lib/webpack:/xterm/src/common/services/UnicodeService.ts", "../../../node_modules/xterm/lib/webpack:/xterm/webpack/bootstrap", "../../../node_modules/xterm/lib/webpack:/xterm/src/browser/public/Terminal.ts", "../../../node_modules/xterm-addon-fit/lib/webpack:/FitAddon/webpack/universalModuleDefinition", "../../../node_modules/xterm-addon-fit/lib/webpack:/FitAddon/src/FitAddon.ts", "../../../node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/webpack/universalModuleDefinition", "../../../node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/src/WebLinkProvider.ts", "../../../node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/webpack/bootstrap", "../../../node_modules/xterm-addon-web-links/lib/webpack:/WebLinksAddon/src/WebLinksAddon.ts", "../../../app/routes/terminal.tsx", "../../../app/components/TerminalComponent.tsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "module.exports = {};", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { ITerminal, IRenderDebouncer } from 'browser/Types';\nimport { isMac } from 'common/Platform';\nimport { TimeBasedDebouncer } from 'browser/TimeBasedDebouncer';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderService } from 'browser/services/Services';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IBuffer } from 'common/buffer/Types';\n\nconst MAX_ROWS_TO_READ = 20;\n\nconst enum BoundaryPosition {\n  TOP,\n  BOTTOM\n}\n\nexport class AccessibilityManager extends Disposable {\n  private _accessibilityContainer: HTMLElement;\n\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[];\n\n  private _liveRegion: HTMLElement;\n  private _liveRegionLineCount: number = 0;\n  private _liveRegionDebouncer: IRenderDebouncer;\n\n  private _screenDprMonitor: ScreenDprMonitor;\n\n  private _topBoundaryFocusListener: (e: FocusEvent) => void;\n  private _bottomBoundaryFocusListener: (e: FocusEvent) => void;\n\n  /**\n   * This queue has a character pushed to it for keys that are pressed, if the\n   * next character added to the terminal is equal to the key char then it is\n   * not announced (added to live region) because it has already been announced\n   * by the textarea event (which cannot be canceled). There are some race\n   * condition cases if there is typing while data is streaming, but this covers\n   * the main case of typing into the prompt and inputting the answer to a\n   * question (Y/N, etc.).\n   */\n  private _charsToConsume: string[] = [];\n\n  private _charsToAnnounce: string = '';\n\n  constructor(\n    private readonly _terminal: ITerminal,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n    this._accessibilityContainer = document.createElement('div');\n    this._accessibilityContainer.classList.add('xterm-accessibility');\n\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.setAttribute('role', 'list');\n    this._rowContainer.classList.add('xterm-accessibility-tree');\n    this._rowElements = [];\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n\n    this._topBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.TOP);\n    this._bottomBoundaryFocusListener = e => this._handleBoundaryFocus(e, BoundaryPosition.BOTTOM);\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n    this._accessibilityContainer.appendChild(this._rowContainer);\n\n    this._liveRegion = document.createElement('div');\n    this._liveRegion.classList.add('live-region');\n    this._liveRegion.setAttribute('aria-live', 'assertive');\n    this._accessibilityContainer.appendChild(this._liveRegion);\n    this._liveRegionDebouncer = this.register(new TimeBasedDebouncer(this._renderRows.bind(this)));\n\n    if (!this._terminal.element) {\n      throw new Error('Cannot enable accessibility before Terminal.open');\n    }\n    this._terminal.element.insertAdjacentElement('afterbegin', this._accessibilityContainer);\n\n    this.register(this._terminal.onResize(e => this._handleResize(e.rows)));\n    this.register(this._terminal.onRender(e => this._refreshRows(e.start, e.end)));\n    this.register(this._terminal.onScroll(() => this._refreshRows()));\n    // Line feed is an issue as the prompt won't be read out after a command is run\n    this.register(this._terminal.onA11yChar(char => this._handleChar(char)));\n    this.register(this._terminal.onLineFeed(() => this._handleChar('\\n')));\n    this.register(this._terminal.onA11yTab(spaceCount => this._handleTab(spaceCount)));\n    this.register(this._terminal.onKey(e => this._handleKey(e.key)));\n    this.register(this._terminal.onBlur(() => this._clearLiveRegion()));\n    this.register(this._renderService.onDimensionsChange(() => this._refreshRowsDimensions()));\n\n    this._screenDprMonitor = new ScreenDprMonitor(window);\n    this.register(this._screenDprMonitor);\n    this._screenDprMonitor.setListener(() => this._refreshRowsDimensions());\n    // This shouldn't be needed on modern browsers but is present in case the\n    // media query that drives the ScreenDprMonitor isn't supported\n    this.register(addDisposableDomListener(window, 'resize', () => this._refreshRowsDimensions()));\n\n    this._refreshRows();\n    this.register(toDisposable(() => {\n      this._accessibilityContainer.remove();\n      this._rowElements.length = 0;\n    }));\n  }\n\n  private _handleTab(spaceCount: number): void {\n    for (let i = 0; i < spaceCount; i++) {\n      this._handleChar(' ');\n    }\n  }\n\n  private _handleChar(char: string): void {\n    if (this._liveRegionLineCount < MAX_ROWS_TO_READ + 1) {\n      if (this._charsToConsume.length > 0) {\n        // Have the screen reader ignore the char if it was just input\n        const shiftedChar = this._charsToConsume.shift();\n        if (shiftedChar !== char) {\n          this._charsToAnnounce += char;\n        }\n      } else {\n        this._charsToAnnounce += char;\n      }\n\n      if (char === '\\n') {\n        this._liveRegionLineCount++;\n        if (this._liveRegionLineCount === MAX_ROWS_TO_READ + 1) {\n          this._liveRegion.textContent += Strings.tooMuchOutput;\n        }\n      }\n\n      // Only detach/attach on mac as otherwise messages can go unaccounced\n      if (isMac) {\n        if (this._liveRegion.textContent && this._liveRegion.textContent.length > 0 && !this._liveRegion.parentNode) {\n          setTimeout(() => {\n            this._accessibilityContainer.appendChild(this._liveRegion);\n          }, 0);\n        }\n      }\n    }\n  }\n\n  private _clearLiveRegion(): void {\n    this._liveRegion.textContent = '';\n    this._liveRegionLineCount = 0;\n\n    // Only detach/attach on mac as otherwise messages can go unaccounced\n    if (isMac) {\n      this._liveRegion.remove();\n    }\n  }\n\n  private _handleKey(keyChar: string): void {\n    this._clearLiveRegion();\n    // Only add the char if there is no control character.\n    if (!/\\p{Control}/u.test(keyChar)) {\n      this._charsToConsume.push(keyChar);\n    }\n  }\n\n  private _refreshRows(start?: number, end?: number): void {\n    this._liveRegionDebouncer.refresh(start, end, this._terminal.rows);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    const buffer: IBuffer = this._terminal.buffer;\n    const setSize = buffer.lines.length.toString();\n    for (let i = start; i <= end; i++) {\n      const lineData = buffer.translateBufferLineToString(buffer.ydisp + i, true);\n      const posInSet = (buffer.ydisp + i + 1).toString();\n      const element = this._rowElements[i];\n      if (element) {\n        if (lineData.length === 0) {\n          element.innerText = '\\u00a0';\n        } else {\n          element.textContent = lineData;\n        }\n        element.setAttribute('aria-posinset', posInSet);\n        element.setAttribute('aria-setsize', setSize);\n      }\n    }\n    this._announceCharacters();\n  }\n\n  private _announceCharacters(): void {\n    if (this._charsToAnnounce.length === 0) {\n      return;\n    }\n    this._liveRegion.textContent += this._charsToAnnounce;\n    this._charsToAnnounce = '';\n  }\n\n  private _handleBoundaryFocus(e: FocusEvent, position: BoundaryPosition): void {\n    const boundaryElement = e.target as HTMLElement;\n    const beforeBoundaryElement = this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2];\n\n    // Don't scroll if the buffer top has reached the end in that direction\n    const posInSet = boundaryElement.getAttribute('aria-posinset');\n    const lastRowPos = position === BoundaryPosition.TOP ? '1' : `${this._terminal.buffer.lines.length}`;\n    if (posInSet === lastRowPos) {\n      return;\n    }\n\n    // Don't scroll when the last focused item was not the second row (focus is going the other\n    // direction)\n    if (e.relatedTarget !== beforeBoundaryElement) {\n      return;\n    }\n\n    // Remove old boundary element from array\n    let topBoundaryElement: HTMLElement;\n    let bottomBoundaryElement: HTMLElement;\n    if (position === BoundaryPosition.TOP) {\n      topBoundaryElement = boundaryElement;\n      bottomBoundaryElement = this._rowElements.pop()!;\n      this._rowContainer.removeChild(bottomBoundaryElement);\n    } else {\n      topBoundaryElement = this._rowElements.shift()!;\n      bottomBoundaryElement = boundaryElement;\n      this._rowContainer.removeChild(topBoundaryElement);\n    }\n\n    // Remove listeners from old boundary elements\n    topBoundaryElement.removeEventListener('focus', this._topBoundaryFocusListener);\n    bottomBoundaryElement.removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Add new element to array/DOM\n    if (position === BoundaryPosition.TOP) {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.unshift(newElement);\n      this._rowContainer.insertAdjacentElement('afterbegin', newElement);\n    } else {\n      const newElement = this._createAccessibilityTreeNode();\n      this._rowElements.push(newElement);\n      this._rowContainer.appendChild(newElement);\n    }\n\n    // Add listeners to new boundary elements\n    this._rowElements[0].addEventListener('focus', this._topBoundaryFocusListener);\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Scroll up\n    this._terminal.scrollLines(position === BoundaryPosition.TOP ? -1 : 1);\n\n    // Focus new boundary before element\n    this._rowElements[position === BoundaryPosition.TOP ? 1 : this._rowElements.length - 2].focus();\n\n    // Prevent the standard behavior\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  }\n\n  private _handleResize(rows: number): void {\n    // Remove bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].removeEventListener('focus', this._bottomBoundaryFocusListener);\n\n    // Grow rows as required\n    for (let i = this._rowContainer.children.length; i < this._terminal.rows; i++) {\n      this._rowElements[i] = this._createAccessibilityTreeNode();\n      this._rowContainer.appendChild(this._rowElements[i]);\n    }\n    // Shrink rows as required\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n\n    // Add bottom boundary listener\n    this._rowElements[this._rowElements.length - 1].addEventListener('focus', this._bottomBoundaryFocusListener);\n\n    this._refreshRowsDimensions();\n  }\n\n  private _createAccessibilityTreeNode(): HTMLElement {\n    const element = document.createElement('div');\n    element.setAttribute('role', 'listitem');\n    element.tabIndex = -1;\n    this._refreshRowDimensions(element);\n    return element;\n  }\n  private _refreshRowsDimensions(): void {\n    if (!this._renderService.dimensions.css.cell.height) {\n      return;\n    }\n    this._accessibilityContainer.style.width = `${this._renderService.dimensions.css.canvas.width}px`;\n    if (this._rowElements.length !== this._terminal.rows) {\n      this._handleResize(this._terminal.rows);\n    }\n    for (let i = 0; i < this._terminal.rows; i++) {\n      this._refreshRowDimensions(this._rowElements[i]);\n    }\n  }\n  private _refreshRowDimensions(element: HTMLElement): void {\n    element.style.height = `${this._renderService.dimensions.css.cell.height}px`;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ISelectionService } from 'browser/services/Services';\nimport { ICoreService, IOptionsService } from 'common/services/Services';\n\n/**\n * Prepares text to be pasted into the terminal by normalizing the line endings\n * @param text The pasted text that needs processing before inserting into the terminal\n */\nexport function prepareTextForTerminal(text: string): string {\n  return text.replace(/\\r?\\n/g, '\\r');\n}\n\n/**\n * Bracket text for paste, if necessary, as per https://cirw.in/blog/bracketed-paste\n * @param text The pasted text to bracket\n */\nexport function bracketTextForPaste(text: string, bracketedPasteMode: boolean): string {\n  if (bracketedPasteMode) {\n    return '\\x1b[200~' + text + '\\x1b[201~';\n  }\n  return text;\n}\n\n/**\n * Binds copy functionality to the given terminal.\n * @param ev The original copy event to be handled\n */\nexport function copyHandler(ev: ClipboardEvent, selectionService: ISelectionService): void {\n  if (ev.clipboardData) {\n    ev.clipboardData.setData('text/plain', selectionService.selectionText);\n  }\n  // Prevent or the original text will be copied.\n  ev.preventDefault();\n}\n\n/**\n * Redirect the clipboard's data to the terminal's input handler.\n */\nexport function handlePasteEvent(ev: ClipboardEvent, textarea: HTMLTextAreaElement, coreService: ICoreService, optionsService: IOptionsService): void {\n  ev.stopPropagation();\n  if (ev.clipboardData) {\n    const text = ev.clipboardData.getData('text/plain');\n    paste(text, textarea, coreService, optionsService);\n  }\n}\n\nexport function paste(text: string, textarea: HTMLTextAreaElement, coreService: ICoreService, optionsService: IOptionsService): void {\n  text = prepareTextForTerminal(text);\n  text = bracketTextForPaste(text, coreService.decPrivateModes.bracketedPasteMode && optionsService.rawOptions.ignoreBracketedPasteMode !== true);\n  coreService.triggerDataEvent(text, true);\n  textarea.value = '';\n}\n\n/**\n * Moves the textarea under the mouse cursor and focuses it.\n * @param ev The original right click event to be handled.\n * @param textarea The terminal's textarea.\n */\nexport function moveTextAreaUnderMouseCursor(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement): void {\n\n  // Calculate textarea position relative to the screen element\n  const pos = screenElement.getBoundingClientRect();\n  const left = ev.clientX - pos.left - 10;\n  const top = ev.clientY - pos.top - 10;\n\n  // Bring textarea at the cursor position\n  textarea.style.width = '20px';\n  textarea.style.height = '20px';\n  textarea.style.left = `${left}px`;\n  textarea.style.top = `${top}px`;\n  textarea.style.zIndex = '1000';\n\n  textarea.focus();\n}\n\n/**\n * Bind to right-click event and allow right-click copy and paste.\n */\nexport function rightClickHandler(ev: MouseEvent, textarea: HTMLTextAreaElement, screenElement: HTMLElement, selectionService: ISelectionService, shouldSelectWord: boolean): void {\n  moveTextAreaUnderMouseCursor(ev, textarea, screenElement);\n\n  if (shouldSelectWord) {\n    selectionService.rightClickSelect(ev);\n  }\n\n  // Get textarea ready to copy from the context menu\n  textarea.value = selectionService.selectionText;\n  textarea.select();\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IColorContrastCache } from 'browser/Types';\nimport { IColor } from 'common/Types';\nimport { TwoKeyMap } from 'common/MultiKeyMap';\n\nexport class ColorContrastCache implements IColorContrastCache {\n  private _color: TwoKeyMap</* bg */number, /* fg */number, IColor | null> = new TwoKeyMap();\n  private _css: TwoKeyMap</* bg */number, /* fg */number, string | null> = new TwoKeyMap();\n\n  public setCss(bg: number, fg: number, value: string | null): void {\n    this._css.set(bg, fg, value);\n  }\n\n  public getCss(bg: number, fg: number): string | null | undefined {\n    return this._css.get(bg, fg);\n  }\n\n  public setColor(bg: number, fg: number, value: IColor | null): void {\n    this._color.set(bg, fg, value);\n  }\n\n  public getColor(bg: number, fg: number): IColor | null | undefined {\n    return this._color.get(bg, fg);\n  }\n\n  public clear(): void {\n    this._color.clear();\n    this._css.clear();\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * Adds a disposable listener to a node in the DOM, returning the disposable.\n * @param node The node to add a listener to.\n * @param type The event type.\n * @param handler The handler for the listener.\n * @param options The boolean or options object to pass on to the event\n * listener.\n */\nexport function addDisposableDomListener(\n  node: Element | Window | Document,\n  type: string,\n  handler: (e: any) => void,\n  options?: boolean | AddEventListenerOptions\n): IDisposable {\n  node.addEventListener(type, handler, options);\n  let disposed = false;\n  return {\n    dispose: () => {\n      if (disposed) {\n        return;\n      }\n      disposed = true;\n      node.removeEventListener(type, handler, options);\n    }\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IBufferCellPosition, ILink, ILinkDecorations, ILinkProvider, ILinkWithState, ILinkifier2, ILinkifierEvent } from 'browser/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, disposeArray, getDisposeArrayDisposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { IBufferService } from 'common/services/Services';\nimport { IMouseService, IRenderService } from './services/Services';\n\nexport class Linkifier2 extends Disposable implements ILinkifier2 {\n  private _element: HTMLElement | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _linkProviders: ILinkProvider[] = [];\n  public get currentLink(): ILinkWithState | undefined { return this._currentLink; }\n  protected _currentLink: ILinkWithState | undefined;\n  private _mouseDownLink: ILinkWithState | undefined;\n  private _lastMouseEvent: MouseEvent | undefined;\n  private _linkCacheDisposables: IDisposable[] = [];\n  private _lastBufferCell: IBufferCellPosition | undefined;\n  private _isMouseOut: boolean = true;\n  private _wasResized: boolean = false;\n  private _activeProviderReplies: Map<Number, ILinkWithState[] | undefined> | undefined;\n  private _activeLine: number = -1;\n\n  private readonly _onShowLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onShowLinkUnderline = this._onShowLinkUnderline.event;\n  private readonly _onHideLinkUnderline = this.register(new EventEmitter<ILinkifierEvent>());\n  public readonly onHideLinkUnderline = this._onHideLinkUnderline.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.register(getDisposeArrayDisposable(this._linkCacheDisposables));\n    this.register(toDisposable(() => {\n      this._lastMouseEvent = undefined;\n    }));\n    // Listen to resize to catch the case where it's resized and the cursor is out of the viewport.\n    this.register(this._bufferService.onResize(() => {\n      this._clearCurrentLink();\n      this._wasResized = true;\n    }));\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    this._linkProviders.push(linkProvider);\n    return {\n      dispose: () => {\n        // Remove the link provider from the list\n        const providerIndex = this._linkProviders.indexOf(linkProvider);\n\n        if (providerIndex !== -1) {\n          this._linkProviders.splice(providerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public attachToDom(element: HTMLElement, mouseService: IMouseService, renderService: IRenderService): void {\n    this._element = element;\n    this._mouseService = mouseService;\n    this._renderService = renderService;\n\n    this.register(addDisposableDomListener(this._element, 'mouseleave', () => {\n      this._isMouseOut = true;\n      this._clearCurrentLink();\n    }));\n    this.register(addDisposableDomListener(this._element, 'mousemove', this._handleMouseMove.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mousedown', this._handleMouseDown.bind(this)));\n    this.register(addDisposableDomListener(this._element, 'mouseup', this._handleMouseUp.bind(this)));\n  }\n\n  private _handleMouseMove(event: MouseEvent): void {\n    this._lastMouseEvent = event;\n\n    if (!this._element || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n    this._isMouseOut = false;\n\n    // Ignore the event if it's an embedder created hover widget\n    const composedPath = event.composedPath() as HTMLElement[];\n    for (let i = 0; i < composedPath.length; i++) {\n      const target = composedPath[i];\n      // Hit Terminal.element, break and continue\n      if (target.classList.contains('xterm')) {\n        break;\n      }\n      // It's a hover, don't respect hover event\n      if (target.classList.contains('xterm-hover')) {\n        return;\n      }\n    }\n\n    if (!this._lastBufferCell || (position.x !== this._lastBufferCell.x || position.y !== this._lastBufferCell.y)) {\n      this._handleHover(position);\n      this._lastBufferCell = position;\n    }\n  }\n\n  private _handleHover(position: IBufferCellPosition): void {\n    // TODO: This currently does not cache link provider results across wrapped lines, activeLine\n    //       should be something like `activeRange: {startY, endY}`\n    // Check if we need to clear the link\n    if (this._activeLine !== position.y || this._wasResized) {\n      this._clearCurrentLink();\n      this._askForLink(position, false);\n      this._wasResized = false;\n      return;\n    }\n\n    // Check the if the link is in the mouse position\n    const isCurrentLinkInPosition = this._currentLink && this._linkAtPosition(this._currentLink.link, position);\n    if (!isCurrentLinkInPosition) {\n      this._clearCurrentLink();\n      this._askForLink(position, true);\n    }\n  }\n\n  private _askForLink(position: IBufferCellPosition, useLineCache: boolean): void {\n    if (!this._activeProviderReplies || !useLineCache) {\n      this._activeProviderReplies?.forEach(reply => {\n        reply?.forEach(linkWithState => {\n          if (linkWithState.link.dispose) {\n            linkWithState.link.dispose();\n          }\n        });\n      });\n      this._activeProviderReplies = new Map();\n      this._activeLine = position.y;\n    }\n    let linkProvided = false;\n\n    // There is no link cached, so ask for one\n    for (const [i, linkProvider] of this._linkProviders.entries()) {\n      if (useLineCache) {\n        const existingReply = this._activeProviderReplies?.get(i);\n        // If there isn't a reply, the provider hasn't responded yet.\n\n        // TODO: If there isn't a reply yet it means that the provider is still resolving. Ensuring\n        // provideLinks isn't triggered again saves ILink.hover firing twice though. This probably\n        // needs promises to get fixed\n        if (existingReply) {\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n        }\n      } else {\n        linkProvider.provideLinks(position.y, (links: ILink[] | undefined) => {\n          if (this._isMouseOut) {\n            return;\n          }\n          const linksWithState: ILinkWithState[] | undefined = links?.map(link  => ({ link }));\n          this._activeProviderReplies?.set(i, linksWithState);\n          linkProvided = this._checkLinkProviderResult(i, position, linkProvided);\n\n          // If all providers have responded, remove lower priority links that intersect ranges of\n          // higher priority links\n          if (this._activeProviderReplies?.size === this._linkProviders.length) {\n            this._removeIntersectingLinks(position.y, this._activeProviderReplies);\n          }\n        });\n      }\n    }\n  }\n\n  private _removeIntersectingLinks(y: number, replies: Map<Number, ILinkWithState[] | undefined>): void {\n    const occupiedCells = new Set<number>();\n    for (let i = 0; i < replies.size; i++) {\n      const providerReply = replies.get(i);\n      if (!providerReply) {\n        continue;\n      }\n      for (let i = 0; i < providerReply.length; i++) {\n        const linkWithState = providerReply[i];\n        const startX = linkWithState.link.range.start.y < y ? 0 : linkWithState.link.range.start.x;\n        const endX = linkWithState.link.range.end.y > y ? this._bufferService.cols : linkWithState.link.range.end.x;\n        for (let x = startX; x <= endX; x++) {\n          if (occupiedCells.has(x)) {\n            providerReply.splice(i--, 1);\n            break;\n          }\n          occupiedCells.add(x);\n        }\n      }\n    }\n  }\n\n  private _checkLinkProviderResult(index: number, position: IBufferCellPosition, linkProvided: boolean): boolean {\n    if (!this._activeProviderReplies) {\n      return linkProvided;\n    }\n\n    const links = this._activeProviderReplies.get(index);\n\n    // Check if every provider before this one has come back undefined\n    let hasLinkBefore = false;\n    for (let j = 0; j < index; j++) {\n      if (!this._activeProviderReplies.has(j) || this._activeProviderReplies.get(j)) {\n        hasLinkBefore = true;\n      }\n    }\n\n    // If all providers with higher priority came back undefined, then this provider's link for\n    // the position should be used\n    if (!hasLinkBefore && links) {\n      const linkAtPosition = links.find(link => this._linkAtPosition(link.link, position));\n      if (linkAtPosition) {\n        linkProvided = true;\n        this._handleNewLink(linkAtPosition);\n      }\n    }\n\n    // Check if all the providers have responded\n    if (this._activeProviderReplies.size === this._linkProviders.length && !linkProvided) {\n      // Respect the order of the link providers\n      for (let j = 0; j < this._activeProviderReplies.size; j++) {\n        const currentLink = this._activeProviderReplies.get(j)?.find(link => this._linkAtPosition(link.link, position));\n        if (currentLink) {\n          linkProvided = true;\n          this._handleNewLink(currentLink);\n          break;\n        }\n      }\n    }\n\n    return linkProvided;\n  }\n\n  private _handleMouseDown(): void {\n    this._mouseDownLink = this._currentLink;\n  }\n\n  private _handleMouseUp(event: MouseEvent): void {\n    if (!this._element || !this._mouseService || !this._currentLink) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(event, this._element, this._mouseService);\n    if (!position) {\n      return;\n    }\n\n    if (this._mouseDownLink === this._currentLink && this._linkAtPosition(this._currentLink.link, position)) {\n      this._currentLink.link.activate(event, this._currentLink.link.text);\n    }\n  }\n\n  private _clearCurrentLink(startRow?: number, endRow?: number): void {\n    if (!this._element || !this._currentLink || !this._lastMouseEvent) {\n      return;\n    }\n\n    // If we have a start and end row, check that the link is within it\n    if (!startRow || !endRow || (this._currentLink.link.range.start.y >= startRow && this._currentLink.link.range.end.y <= endRow)) {\n      this._linkLeave(this._element, this._currentLink.link, this._lastMouseEvent);\n      this._currentLink = undefined;\n      disposeArray(this._linkCacheDisposables);\n    }\n  }\n\n  private _handleNewLink(linkWithState: ILinkWithState): void {\n    if (!this._element || !this._lastMouseEvent || !this._mouseService) {\n      return;\n    }\n\n    const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService);\n\n    if (!position) {\n      return;\n    }\n\n    // Trigger hover if the we have a link at the position\n    if (this._linkAtPosition(linkWithState.link, position)) {\n      this._currentLink = linkWithState;\n      this._currentLink.state = {\n        decorations: {\n          underline: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.underline,\n          pointerCursor: linkWithState.link.decorations === undefined ? true : linkWithState.link.decorations.pointerCursor\n        },\n        isHovered: true\n      };\n      this._linkHover(this._element, linkWithState.link, this._lastMouseEvent);\n\n      // Add listener for tracking decorations changes\n      linkWithState.link.decorations = {} as ILinkDecorations;\n      Object.defineProperties(linkWithState.link.decorations, {\n        pointerCursor: {\n          get: () => this._currentLink?.state?.decorations.pointerCursor,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink.state.decorations.pointerCursor !== v) {\n              this._currentLink.state.decorations.pointerCursor = v;\n              if (this._currentLink.state.isHovered) {\n                this._element?.classList.toggle('xterm-cursor-pointer', v);\n              }\n            }\n          }\n        },\n        underline: {\n          get: () => this._currentLink?.state?.decorations.underline,\n          set: v => {\n            if (this._currentLink?.state && this._currentLink?.state?.decorations.underline !== v) {\n              this._currentLink.state.decorations.underline = v;\n              if (this._currentLink.state.isHovered) {\n                this._fireUnderlineEvent(linkWithState.link, v);\n              }\n            }\n          }\n        }\n      });\n\n      // Listen to viewport changes to re-render the link under the cursor (only when the line the\n      // link is on changes)\n      if (this._renderService) {\n        this._linkCacheDisposables.push(this._renderService.onRenderedViewportChange(e => {\n          // Sanity check, this shouldn't happen in practice as this listener would be disposed\n          if (!this._currentLink) {\n            return;\n          }\n          // When start is 0 a scroll most likely occurred, make sure links above the fold also get\n          // cleared.\n          const start = e.start === 0 ? 0 : e.start + 1 + this._bufferService.buffer.ydisp;\n          const end = this._bufferService.buffer.ydisp + 1 + e.end;\n          // Only clear the link if the viewport change happened on this line\n          if (this._currentLink.link.range.start.y >= start && this._currentLink.link.range.end.y <= end) {\n            this._clearCurrentLink(start, end);\n            if (this._lastMouseEvent && this._element) {\n              // re-eval previously active link after changes\n              const position = this._positionFromMouseEvent(this._lastMouseEvent, this._element, this._mouseService!);\n              if (position) {\n                this._askForLink(position, false);\n              }\n            }\n          }\n        }));\n      }\n    }\n  }\n\n  protected _linkHover(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = true;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, true);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.add('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.hover) {\n      link.hover(event, link.text);\n    }\n  }\n\n  private _fireUnderlineEvent(link: ILink, showEvent: boolean): void {\n    const range = link.range;\n    const scrollOffset = this._bufferService.buffer.ydisp;\n    const event = this._createLinkUnderlineEvent(range.start.x - 1, range.start.y - scrollOffset - 1, range.end.x, range.end.y - scrollOffset - 1, undefined);\n    const emitter = showEvent ? this._onShowLinkUnderline : this._onHideLinkUnderline;\n    emitter.fire(event);\n  }\n\n  protected _linkLeave(element: HTMLElement, link: ILink, event: MouseEvent): void {\n    if (this._currentLink?.state) {\n      this._currentLink.state.isHovered = false;\n      if (this._currentLink.state.decorations.underline) {\n        this._fireUnderlineEvent(link, false);\n      }\n      if (this._currentLink.state.decorations.pointerCursor) {\n        element.classList.remove('xterm-cursor-pointer');\n      }\n    }\n\n    if (link.leave) {\n      link.leave(event, link.text);\n    }\n  }\n\n  /**\n   * Check if the buffer position is within the link\n   * @param link\n   * @param position\n   */\n  private _linkAtPosition(link: ILink, position: IBufferCellPosition): boolean {\n    const lower = link.range.start.y * this._bufferService.cols + link.range.start.x;\n    const upper = link.range.end.y * this._bufferService.cols + link.range.end.x;\n    const current = position.y * this._bufferService.cols + position.x;\n    return (lower <= current && current <= upper);\n  }\n\n  /**\n   * Get the buffer position from a mouse event\n   * @param event\n   */\n  private _positionFromMouseEvent(event: MouseEvent, element: HTMLElement, mouseService: IMouseService): IBufferCellPosition | undefined {\n    const coords = mouseService.getCoords(event, element, this._bufferService.cols, this._bufferService.rows);\n    if (!coords) {\n      return;\n    }\n\n    return { x: coords[0], y: coords[1] + this._bufferService.buffer.ydisp };\n  }\n\n  private _createLinkUnderlineEvent(x1: number, y1: number, x2: number, y2: number, fg: number | undefined): ILinkifierEvent {\n    return { x1, y1, x2, y2, cols: this._bufferService.cols, fg };\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// This file contains strings that get exported in the API so they can be localized\n\n// eslint-disable-next-line prefer-const\nexport let promptLabel = 'Terminal input';\n\n// eslint-disable-next-line prefer-const\nexport let tooMuchOutput = 'Too much output to announce, navigate to rows manually to read';\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILink, ILinkProvider } from 'browser/Types';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService, IOptionsService, IOscLinkService } from 'common/services/Services';\n\nexport class OscLinkProvider implements ILinkProvider {\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IOscLinkService private readonly _oscLinkService: IOscLinkService\n  ) {\n  }\n\n  public provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void {\n    const line = this._bufferService.buffer.lines.get(y - 1);\n    if (!line) {\n      callback(undefined);\n      return;\n    }\n\n    const result: ILink[] = [];\n    const linkHandler = this._optionsService.rawOptions.linkHandler;\n    const cell = new CellData();\n    const lineLength = line.getTrimmedLength();\n    let currentLinkId = -1;\n    let currentStart = -1;\n    let finishLink = false;\n    for (let x = 0; x < lineLength; x++) {\n      // Minor optimization, only check for content if there isn't a link in case the link ends with\n      // a null cell\n      if (currentStart === -1 && !line.hasContent(x)) {\n        continue;\n      }\n\n      line.loadCell(x, cell);\n      if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n        if (currentStart === -1) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n          continue;\n        } else {\n          finishLink = cell.extended.urlId !== currentLinkId;\n        }\n      } else {\n        if (currentStart !== -1) {\n          finishLink = true;\n        }\n      }\n\n      if (finishLink || (currentStart !== -1 && x === lineLength - 1)) {\n        const text = this._oscLinkService.getLinkData(currentLinkId)?.uri;\n        if (text) {\n          // These ranges are 1-based\n          const range: IBufferRange = {\n            start: {\n              x: currentStart + 1,\n              y\n            },\n            end: {\n              // Offset end x if it's a link that ends on the last cell in the line\n              x: x + (!finishLink && x === lineLength - 1 ? 1 : 0),\n              y\n            }\n          };\n\n          let ignoreLink = false;\n          if (!linkHandler?.allowNonHttpProtocols) {\n            try {\n              const parsed = new URL(text);\n              if (!['http:', 'https:'].includes(parsed.protocol)) {\n                ignoreLink = true;\n              }\n            } catch (e) {\n              // Ignore invalid URLs to prevent unexpected behaviors\n              ignoreLink = true;\n            }\n          }\n\n          if (!ignoreLink) {\n            // OSC links always use underline and pointer decorations\n            result.push({\n              text,\n              range,\n              activate: (e, text) => (linkHandler ? linkHandler.activate(e, text, range) : defaultActivate(e, text)),\n              hover: (e, text) => linkHandler?.hover?.(e, text, range),\n              leave: (e, text) => linkHandler?.leave?.(e, text, range)\n            });\n          }\n        }\n        finishLink = false;\n\n        // Clear link or start a new link if one starts immediately\n        if (cell.hasExtendedAttrs() && cell.extended.urlId) {\n          currentStart = x;\n          currentLinkId = cell.extended.urlId;\n        } else {\n          currentStart = -1;\n          currentLinkId = -1;\n        }\n      }\n    }\n\n    // TODO: Handle fetching and returning other link ranges to underline other links with the same\n    //       id\n    callback(result);\n  }\n}\n\nfunction defaultActivate(e: MouseEvent, uri: string): void {\n  const answer = confirm(`Do you want to navigate to ${uri}?\\n\\nWARNING: This link could potentially be dangerous`);\n  if (answer) {\n    const newWindow = window.open();\n    if (newWindow) {\n      try {\n        newWindow.opener = null;\n      } catch {\n        // no-op, Electron can throw\n      }\n      newWindow.location.href = uri;\n    } else {\n      console.warn('Opening link blocked as opener could not be cleared');\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\n\n/**\n * Debounces calls to render terminal rows using animation frames.\n */\nexport class RenderDebouncer implements IRenderDebouncerWithCallback {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n  private _animationFrame: number | undefined;\n  private _refreshCallbacks: FrameRequestCallback[] = [];\n\n  constructor(\n    private _parentWindow: Window,\n    private _renderCallback: (start: number, end: number) => void\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._animationFrame) {\n      this._parentWindow.cancelAnimationFrame(this._animationFrame);\n      this._animationFrame = undefined;\n    }\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    this._refreshCallbacks.push(callback);\n    if (!this._animationFrame) {\n      this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n    }\n    return this._animationFrame;\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    if (this._animationFrame) {\n      return;\n    }\n\n    this._animationFrame = this._parentWindow.requestAnimationFrame(() => this._innerRefresh());\n  }\n\n  private _innerRefresh(): void {\n    this._animationFrame = undefined;\n\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      this._runRefreshCallbacks();\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n    this._runRefreshCallbacks();\n  }\n\n  private _runRefreshCallbacks(): void {\n    for (const callback of this._refreshCallbacks) {\n      callback(0);\n    }\n    this._refreshCallbacks = [];\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable, toDisposable } from 'common/Lifecycle';\n\nexport type ScreenDprListener = (newDevicePixelRatio?: number, oldDevicePixelRatio?: number) => void;\n\n/**\n * The screen device pixel ratio monitor allows listening for when the\n * window.devicePixelRatio value changes. This is done not with polling but with\n * the use of window.matchMedia to watch media queries. When the event fires,\n * the listener will be reattached using a different media query to ensure that\n * any further changes will register.\n *\n * The listener should fire on both window zoom changes and switching to a\n * monitor with a different DPI.\n */\nexport class ScreenDprMonitor extends Disposable {\n  private _currentDevicePixelRatio: number;\n  private _outerListener: ((this: MediaQueryList, ev: MediaQueryListEvent) => any) | undefined;\n  private _listener: ScreenDprListener | undefined;\n  private _resolutionMediaMatchList: MediaQueryList | undefined;\n\n  constructor(private _parentWindow: Window) {\n    super();\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this.register(toDisposable(() => {\n      this.clearListener();\n    }));\n  }\n\n  public setListener(listener: ScreenDprListener): void {\n    if (this._listener) {\n      this.clearListener();\n    }\n    this._listener = listener;\n    this._outerListener = () => {\n      if (!this._listener) {\n        return;\n      }\n      this._listener(this._parentWindow.devicePixelRatio, this._currentDevicePixelRatio);\n      this._updateDpr();\n    };\n    this._updateDpr();\n  }\n\n  private _updateDpr(): void {\n    if (!this._outerListener) {\n      return;\n    }\n\n    // Clear listeners for old DPR\n    this._resolutionMediaMatchList?.removeListener(this._outerListener);\n\n    // Add listeners for new DPR\n    this._currentDevicePixelRatio = this._parentWindow.devicePixelRatio;\n    this._resolutionMediaMatchList = this._parentWindow.matchMedia(`screen and (resolution: ${this._parentWindow.devicePixelRatio}dppx)`);\n    this._resolutionMediaMatchList.addListener(this._outerListener);\n  }\n\n  public clearListener(): void {\n    if (!this._resolutionMediaMatchList || !this._listener || !this._outerListener) {\n      return;\n    }\n    this._resolutionMediaMatchList.removeListener(this._outerListener);\n    this._resolutionMediaMatchList = undefined;\n    this._listener = undefined;\n    this._outerListener = undefined;\n  }\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { copyHandler, handlePasteEvent, moveTextAreaUnderMouseCursor, paste, rightClickHandler } from 'browser/Clipboard';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { Linkifier2 } from 'browser/Linkifier2';\nimport * as Strings from 'browser/LocalizableStrings';\nimport { OscLinkProvider } from 'browser/OscLinkProvider';\nimport { CharacterJoinerHandler, CustomKeyEventHandler, IBrowser, IBufferRange, ICompositionHelper, ILinkifier2, ITerminal, IViewport } from 'browser/Types';\nimport { Viewport } from 'browser/Viewport';\nimport { BufferDecorationRenderer } from 'browser/decorations/BufferDecorationRenderer';\nimport { OverviewRulerRenderer } from 'browser/decorations/OverviewRulerRenderer';\nimport { CompositionHelper } from 'browser/input/CompositionHelper';\nimport { DomRenderer } from 'browser/renderer/dom/DomRenderer';\nimport { IRenderer } from 'browser/renderer/shared/Types';\nimport { CharSizeService } from 'browser/services/CharSizeService';\nimport { CharacterJoinerService } from 'browser/services/CharacterJoinerService';\nimport { CoreBrowserService } from 'browser/services/CoreBrowserService';\nimport { MouseService } from 'browser/services/MouseService';\nimport { RenderService } from 'browser/services/RenderService';\nimport { SelectionService } from 'browser/services/SelectionService';\nimport { ICharSizeService, ICharacterJoinerService, ICoreBrowserService, IMouseService, IRenderService, ISelectionService, IThemeService } from 'browser/services/Services';\nimport { ThemeService } from 'browser/services/ThemeService';\nimport { color, rgba } from 'common/Color';\nimport { CoreTerminal } from 'common/CoreTerminal';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport * as Browser from 'common/Platform';\nimport { ColorRequestType, CoreMouseAction, CoreMouseButton, CoreMouseEventType, IColorEvent, ITerminalOptions, KeyboardResultType, ScrollSource, SpecialColorIndex } from 'common/Types';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { IBuffer } from 'common/buffer/Types';\nimport { C0, C1_ESCAPED } from 'common/data/EscapeSequences';\nimport { evaluateKeyboardEvent } from 'common/input/Keyboard';\nimport { toRgbString } from 'common/input/XParseColor';\nimport { DecorationService } from 'common/services/DecorationService';\nimport { IDecorationService } from 'common/services/Services';\nimport { IDecoration, IDecorationOptions, IDisposable, ILinkProvider, IMarker } from 'xterm';\nimport { WindowsOptionsReportType } from '../common/InputHandler';\nimport { AccessibilityManager } from './AccessibilityManager';\n\n// Let it work inside Node.js for automated testing purposes.\nconst document: Document = (typeof window !== 'undefined') ? window.document : null as any;\n\nexport class Terminal extends CoreTerminal implements ITerminal {\n  public textarea: HTMLTextAreaElement | undefined;\n  public element: HTMLElement | undefined;\n  public screenElement: HTMLElement | undefined;\n\n  private _document: Document | undefined;\n  private _viewportScrollArea: HTMLElement | undefined;\n  private _viewportElement: HTMLElement | undefined;\n  private _helperContainer: HTMLElement | undefined;\n  private _compositionView: HTMLElement | undefined;\n\n  private _overviewRulerRenderer: OverviewRulerRenderer | undefined;\n\n  public browser: IBrowser = Browser as any;\n\n  private _customKeyEventHandler: CustomKeyEventHandler | undefined;\n\n  // browser services\n  private _decorationService: DecorationService;\n  private _charSizeService: ICharSizeService | undefined;\n  private _coreBrowserService: ICoreBrowserService | undefined;\n  private _mouseService: IMouseService | undefined;\n  private _renderService: IRenderService | undefined;\n  private _themeService: IThemeService | undefined;\n  private _characterJoinerService: ICharacterJoinerService | undefined;\n  private _selectionService: ISelectionService | undefined;\n\n  /**\n   * Records whether the keydown event has already been handled and triggered a data event, if so\n   * the keypress event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyDownHandled: boolean = false;\n\n  /**\n   * Records whether a keydown event has occured since the last keyup event, i.e. whether a key\n   * is currently \"pressed\".\n   */\n  private _keyDownSeen: boolean = false;\n\n  /**\n   * Records whether the keypress event has already been handled and triggered a data event, if so\n   * the input event should not trigger a data event but should still print to the textarea so\n   * screen readers will announce it.\n   */\n  private _keyPressHandled: boolean = false;\n\n  /**\n   * Records whether there has been a keydown event for a dead key without a corresponding keydown\n   * event for the composed/alternative character. If we cancel the keydown event for the dead key,\n   * no events will be emitted for the final character.\n   */\n  private _unprocessedDeadKey: boolean = false;\n\n  public linkifier2: ILinkifier2;\n  public viewport: IViewport | undefined;\n  private _compositionHelper: ICompositionHelper | undefined;\n  private _accessibilityManager: MutableDisposable<AccessibilityManager> = this.register(new MutableDisposable());\n\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onKey = this.register(new EventEmitter<{ key: string, domEvent: KeyboardEvent }>());\n  public readonly onKey = this._onKey.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onBell = this.register(new EventEmitter<void>());\n  public readonly onBell = this._onBell.event;\n\n  private _onFocus = this.register(new EventEmitter<void>());\n  public get onFocus(): IEvent<void> { return this._onFocus.event; }\n  private _onBlur = this.register(new EventEmitter<void>());\n  public get onBlur(): IEvent<void> { return this._onBlur.event; }\n  private _onA11yCharEmitter = this.register(new EventEmitter<string>());\n  public get onA11yChar(): IEvent<string> { return this._onA11yCharEmitter.event; }\n  private _onA11yTabEmitter = this.register(new EventEmitter<number>());\n  public get onA11yTab(): IEvent<number> { return this._onA11yTabEmitter.event; }\n  private _onWillOpen = this.register(new EventEmitter<HTMLElement>());\n  public get onWillOpen(): IEvent<HTMLElement> { return this._onWillOpen.event; }\n\n  constructor(\n    options: Partial<ITerminalOptions> = {}\n  ) {\n    super(options);\n\n    this._setup();\n\n    this.linkifier2 = this.register(this._instantiationService.createInstance(Linkifier2));\n    this.linkifier2.registerLinkProvider(this._instantiationService.createInstance(OscLinkProvider));\n    this._decorationService = this._instantiationService.createInstance(DecorationService);\n    this._instantiationService.setService(IDecorationService, this._decorationService);\n\n    // Setup InputHandler listeners\n    this.register(this._inputHandler.onRequestBell(() => this._onBell.fire()));\n    this.register(this._inputHandler.onRequestRefreshRows((start, end) => this.refresh(start, end)));\n    this.register(this._inputHandler.onRequestSendFocus(() => this._reportFocus()));\n    this.register(this._inputHandler.onRequestReset(() => this.reset()));\n    this.register(this._inputHandler.onRequestWindowsOptionsReport(type => this._reportWindowsOptions(type)));\n    this.register(this._inputHandler.onColor((event) => this._handleColorEvent(event)));\n    this.register(forwardEvent(this._inputHandler.onCursorMove, this._onCursorMove));\n    this.register(forwardEvent(this._inputHandler.onTitleChange, this._onTitleChange));\n    this.register(forwardEvent(this._inputHandler.onA11yChar, this._onA11yCharEmitter));\n    this.register(forwardEvent(this._inputHandler.onA11yTab, this._onA11yTabEmitter));\n\n    // Setup listeners\n    this.register(this._bufferService.onResize(e => this._afterResize(e.cols, e.rows)));\n\n    this.register(toDisposable(() => {\n      this._customKeyEventHandler = undefined;\n      this.element?.parentNode?.removeChild(this.element);\n    }));\n  }\n\n  /**\n   * Handle color event from inputhandler for OSC 4|104 | 10|110 | 11|111 | 12|112.\n   * An event from OSC 4|104 may contain multiple set or report requests, and multiple\n   * or none restore requests (resetting all),\n   * while an event from OSC 10|110 | 11|111 | 12|112 always contains a single request.\n   */\n  private _handleColorEvent(event: IColorEvent): void {\n    if (!this._themeService) return;\n    for (const req of event) {\n      let acc: 'foreground' | 'background' | 'cursor' | 'ansi';\n      let ident = '';\n      switch (req.index) {\n        case SpecialColorIndex.FOREGROUND: // OSC 10 | 110\n          acc = 'foreground';\n          ident = '10';\n          break;\n        case SpecialColorIndex.BACKGROUND: // OSC 11 | 111\n          acc = 'background';\n          ident = '11';\n          break;\n        case SpecialColorIndex.CURSOR: // OSC 12 | 112\n          acc = 'cursor';\n          ident = '12';\n          break;\n        default: // OSC 4 | 104\n          // we can skip the [0..255] range check here (already done in inputhandler)\n          acc = 'ansi';\n          ident = '4;' + req.index;\n      }\n      switch (req.type) {\n        case ColorRequestType.REPORT:\n          const channels = color.toColorRGB(acc === 'ansi'\n            ? this._themeService.colors.ansi[req.index]\n            : this._themeService.colors[acc]);\n          this.coreService.triggerDataEvent(`${C0.ESC}]${ident};${toRgbString(channels)}${C1_ESCAPED.ST}`);\n          break;\n        case ColorRequestType.SET:\n          if (acc === 'ansi') {\n            this._themeService.modifyColors(colors => colors.ansi[req.index] = rgba.toColor(...req.color));\n          } else {\n            const narrowedAcc = acc;\n            this._themeService.modifyColors(colors => colors[narrowedAcc] = rgba.toColor(...req.color));\n          }\n          break;\n        case ColorRequestType.RESTORE:\n          this._themeService.restoreColor(req.index);\n          break;\n      }\n    }\n  }\n\n  protected _setup(): void {\n    super._setup();\n\n    this._customKeyEventHandler = undefined;\n  }\n\n  /**\n   * Convenience property to active buffer.\n   */\n  public get buffer(): IBuffer {\n    return this.buffers.active;\n  }\n\n  /**\n   * Focus the terminal. Delegates focus handling to the terminal's DOM element.\n   */\n  public focus(): void {\n    if (this.textarea) {\n      this.textarea.focus({ preventScroll: true });\n    }\n  }\n\n  private _handleScreenReaderModeOptionChange(value: boolean): void {\n    if (value) {\n      if (!this._accessibilityManager.value && this._renderService) {\n        this._accessibilityManager.value = this._instantiationService.createInstance(AccessibilityManager, this);\n      }\n    } else {\n      this._accessibilityManager.clear();\n    }\n  }\n\n  /**\n   * Binds the desired focus behavior on a given terminal object.\n   */\n  private _handleTextAreaFocus(ev: KeyboardEvent): void {\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    }\n    this.updateCursorStyle(ev);\n    this.element!.classList.add('focus');\n    this._showCursor();\n    this._onFocus.fire();\n  }\n\n  /**\n   * Blur the terminal, calling the blur function on the terminal's underlying\n   * textarea.\n   */\n  public blur(): void {\n    return this.textarea?.blur();\n  }\n\n  /**\n   * Binds the desired blur behavior on a given terminal object.\n   */\n  private _handleTextAreaBlur(): void {\n    // Text can safely be removed on blur. Doing it earlier could interfere with\n    // screen readers reading it out.\n    this.textarea!.value = '';\n    this.refresh(this.buffer.y, this.buffer.y);\n    if (this.coreService.decPrivateModes.sendFocus) {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n    this.element!.classList.remove('focus');\n    this._onBlur.fire();\n  }\n\n  private _syncTextArea(): void {\n    if (!this.textarea || !this.buffer.isCursorInViewport || this._compositionHelper!.isComposing || !this._renderService) {\n      return;\n    }\n    const cursorY = this.buffer.ybase + this.buffer.y;\n    const bufferLine = this.buffer.lines.get(cursorY);\n    if (!bufferLine) {\n      return;\n    }\n    const cursorX = Math.min(this.buffer.x, this.cols - 1);\n    const cellHeight = this._renderService.dimensions.css.cell.height;\n    const width = bufferLine.getWidth(cursorX);\n    const cellWidth = this._renderService.dimensions.css.cell.width * width;\n    const cursorTop = this.buffer.y * this._renderService.dimensions.css.cell.height;\n    const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n    // Sync the textarea to the exact position of the composition view so the IME knows where the\n    // text is.\n    this.textarea.style.left = cursorLeft + 'px';\n    this.textarea.style.top = cursorTop + 'px';\n    this.textarea.style.width = cellWidth + 'px';\n    this.textarea.style.height = cellHeight + 'px';\n    this.textarea.style.lineHeight = cellHeight + 'px';\n    this.textarea.style.zIndex = '-5';\n  }\n\n  /**\n   * Initialize default behavior\n   */\n  private _initGlobal(): void {\n    this._bindKeys();\n\n    // Bind clipboard functionality\n    this.register(addDisposableDomListener(this.element!, 'copy', (event: ClipboardEvent) => {\n      // If mouse events are active it means the selection manager is disabled and\n      // copy should be handled by the host program.\n      if (!this.hasSelection()) {\n        return;\n      }\n      copyHandler(event, this._selectionService!);\n    }));\n    const pasteHandlerWrapper = (event: ClipboardEvent): void => handlePasteEvent(event, this.textarea!, this.coreService, this.optionsService);\n    this.register(addDisposableDomListener(this.textarea!, 'paste', pasteHandlerWrapper));\n    this.register(addDisposableDomListener(this.element!, 'paste', pasteHandlerWrapper));\n\n    // Handle right click context menus\n    if (Browser.isFirefox) {\n      // Firefox doesn't appear to fire the contextmenu event on right click\n      this.register(addDisposableDomListener(this.element!, 'mousedown', (event: MouseEvent) => {\n        if (event.button === 2) {\n          rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n        }\n      }));\n    } else {\n      this.register(addDisposableDomListener(this.element!, 'contextmenu', (event: MouseEvent) => {\n        rightClickHandler(event, this.textarea!, this.screenElement!, this._selectionService!, this.options.rightClickSelectsWord);\n      }));\n    }\n\n    // Move the textarea under the cursor when middle clicking on Linux to ensure\n    // middle click to paste selection works. This only appears to work in Chrome\n    // at the time is writing.\n    if (Browser.isLinux) {\n      // Use auxclick event over mousedown the latter doesn't seem to work. Note\n      // that the regular click event doesn't fire for the middle mouse button.\n      this.register(addDisposableDomListener(this.element!, 'auxclick', (event: MouseEvent) => {\n        if (event.button === 1) {\n          moveTextAreaUnderMouseCursor(event, this.textarea!, this.screenElement!);\n        }\n      }));\n    }\n  }\n\n  /**\n   * Apply key handling to the terminal\n   */\n  private _bindKeys(): void {\n    this.register(addDisposableDomListener(this.textarea!, 'keyup', (ev: KeyboardEvent) => this._keyUp(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keydown', (ev: KeyboardEvent) => this._keyDown(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'keypress', (ev: KeyboardEvent) => this._keyPress(ev), true));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionstart', () => this._compositionHelper!.compositionstart()));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionupdate', (e: CompositionEvent) => this._compositionHelper!.compositionupdate(e)));\n    this.register(addDisposableDomListener(this.textarea!, 'compositionend', () => this._compositionHelper!.compositionend()));\n    this.register(addDisposableDomListener(this.textarea!, 'input', (ev: InputEvent) => this._inputEvent(ev), true));\n    this.register(this.onRender(() => this._compositionHelper!.updateCompositionElements()));\n  }\n\n  /**\n   * Opens the terminal within an element.\n   *\n   * @param parent The element to create the terminal within.\n   */\n  public open(parent: HTMLElement): void {\n    if (!parent) {\n      throw new Error('Terminal requires a parent element.');\n    }\n\n    if (!parent.isConnected) {\n      this._logService.debug('Terminal.open was called on an element that was not attached to the DOM');\n    }\n\n    this._document = parent.ownerDocument!;\n\n    // Create main element container\n    this.element = this._document.createElement('div');\n    this.element.dir = 'ltr';   // xterm.css assumes LTR\n    this.element.classList.add('terminal');\n    this.element.classList.add('xterm');\n    parent.appendChild(this.element);\n\n    // Performance: Use a document fragment to build the terminal\n    // viewport and helper elements detached from the DOM\n    const fragment = document.createDocumentFragment();\n    this._viewportElement = document.createElement('div');\n    this._viewportElement.classList.add('xterm-viewport');\n    fragment.appendChild(this._viewportElement);\n\n    this._viewportScrollArea = document.createElement('div');\n    this._viewportScrollArea.classList.add('xterm-scroll-area');\n    this._viewportElement.appendChild(this._viewportScrollArea);\n\n    this.screenElement = document.createElement('div');\n    this.screenElement.classList.add('xterm-screen');\n    // Create the container that will hold helpers like the textarea for\n    // capturing DOM Events. Then produce the helpers.\n    this._helperContainer = document.createElement('div');\n    this._helperContainer.classList.add('xterm-helpers');\n    this.screenElement.appendChild(this._helperContainer);\n    fragment.appendChild(this.screenElement);\n\n    this.textarea = document.createElement('textarea');\n    this.textarea.classList.add('xterm-helper-textarea');\n    this.textarea.setAttribute('aria-label', Strings.promptLabel);\n    if (!Browser.isChromeOS) {\n      // ChromeVox on ChromeOS does not like this. See\n      // https://issuetracker.google.com/issues/260170397\n      this.textarea.setAttribute('aria-multiline', 'false');\n    }\n    this.textarea.setAttribute('autocorrect', 'off');\n    this.textarea.setAttribute('autocapitalize', 'off');\n    this.textarea.setAttribute('spellcheck', 'false');\n    this.textarea.tabIndex = 0;\n\n    // Register the core browser service before the generic textarea handlers are registered so it\n    // handles them first. Otherwise the renderers may use the wrong focus state.\n    this._coreBrowserService = this._instantiationService.createInstance(CoreBrowserService, this.textarea, this._document.defaultView ?? window);\n    this._instantiationService.setService(ICoreBrowserService, this._coreBrowserService);\n\n    this.register(addDisposableDomListener(this.textarea, 'focus', (ev: KeyboardEvent) => this._handleTextAreaFocus(ev)));\n    this.register(addDisposableDomListener(this.textarea, 'blur', () => this._handleTextAreaBlur()));\n    this._helperContainer.appendChild(this.textarea);\n\n\n    this._charSizeService = this._instantiationService.createInstance(CharSizeService, this._document, this._helperContainer);\n    this._instantiationService.setService(ICharSizeService, this._charSizeService);\n\n    this._themeService = this._instantiationService.createInstance(ThemeService);\n    this._instantiationService.setService(IThemeService, this._themeService);\n\n    this._characterJoinerService = this._instantiationService.createInstance(CharacterJoinerService);\n    this._instantiationService.setService(ICharacterJoinerService, this._characterJoinerService);\n\n    this._renderService = this.register(this._instantiationService.createInstance(RenderService, this.rows, this.screenElement));\n    this._instantiationService.setService(IRenderService, this._renderService);\n    this.register(this._renderService.onRenderedViewportChange(e => this._onRender.fire(e)));\n    this.onResize(e => this._renderService!.resize(e.cols, e.rows));\n\n    this._compositionView = document.createElement('div');\n    this._compositionView.classList.add('composition-view');\n    this._compositionHelper = this._instantiationService.createInstance(CompositionHelper, this.textarea, this._compositionView);\n    this._helperContainer.appendChild(this._compositionView);\n\n    // Performance: Add viewport and helper elements from the fragment\n    this.element.appendChild(fragment);\n\n    try {\n      this._onWillOpen.fire(this.element);\n    }\n    catch { /* fails to load addon for some reason */ }\n    if (!this._renderService.hasRenderer()) {\n      this._renderService.setRenderer(this._createRenderer());\n    }\n\n    this._mouseService = this._instantiationService.createInstance(MouseService);\n    this._instantiationService.setService(IMouseService, this._mouseService);\n\n    this.viewport = this._instantiationService.createInstance(Viewport, this._viewportElement, this._viewportScrollArea);\n    this.viewport.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent, ScrollSource.VIEWPORT)),\n    this.register(this._inputHandler.onRequestSyncScrollBar(() => this.viewport!.syncScrollArea()));\n    this.register(this.viewport);\n\n    this.register(this.onCursorMove(() => {\n      this._renderService!.handleCursorMove();\n      this._syncTextArea();\n    }));\n    this.register(this.onResize(() => this._renderService!.handleResize(this.cols, this.rows)));\n    this.register(this.onBlur(() => this._renderService!.handleBlur()));\n    this.register(this.onFocus(() => this._renderService!.handleFocus()));\n    this.register(this._renderService.onDimensionsChange(() => this.viewport!.syncScrollArea()));\n\n    this._selectionService = this.register(this._instantiationService.createInstance(SelectionService,\n      this.element,\n      this.screenElement,\n      this.linkifier2\n    ));\n    this._instantiationService.setService(ISelectionService, this._selectionService);\n    this.register(this._selectionService.onRequestScrollLines(e => this.scrollLines(e.amount, e.suppressScrollEvent)));\n    this.register(this._selectionService.onSelectionChange(() => this._onSelectionChange.fire()));\n    this.register(this._selectionService.onRequestRedraw(e => this._renderService!.handleSelectionChanged(e.start, e.end, e.columnSelectMode)));\n    this.register(this._selectionService.onLinuxMouseSelection(text => {\n      // If there's a new selection, put it into the textarea, focus and select it\n      // in order to register it as a selection on the OS. This event is fired\n      // only on Linux to enable middle click to paste selection.\n      this.textarea!.value = text;\n      this.textarea!.focus();\n      this.textarea!.select();\n    }));\n    this.register(this._onScroll.event(ev => {\n      this.viewport!.syncScrollArea();\n      this._selectionService!.refresh();\n    }));\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', () => this._selectionService!.refresh()));\n\n    this.linkifier2.attachToDom(this.screenElement, this._mouseService, this._renderService);\n    this.register(this._instantiationService.createInstance(BufferDecorationRenderer, this.screenElement));\n    this.register(addDisposableDomListener(this.element, 'mousedown', (e: MouseEvent) => this._selectionService!.handleMouseDown(e)));\n\n    // apply mouse event classes set by escape codes before terminal was attached\n    if (this.coreMouseService.areMouseEventsActive) {\n      this._selectionService.disable();\n      this.element.classList.add('enable-mouse-events');\n    } else {\n      this._selectionService.enable();\n    }\n\n    if (this.options.screenReaderMode) {\n      // Note that this must be done *after* the renderer is created in order to\n      // ensure the correct order of the dprchange event\n      this._accessibilityManager.value = this._instantiationService.createInstance(AccessibilityManager, this);\n    }\n    this.register(this.optionsService.onSpecificOptionChange('screenReaderMode', e => this._handleScreenReaderModeOptionChange(e)));\n\n    if (this.options.overviewRulerWidth) {\n      this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n    }\n    this.optionsService.onSpecificOptionChange('overviewRulerWidth', value => {\n      if (!this._overviewRulerRenderer && value && this._viewportElement && this.screenElement) {\n        this._overviewRulerRenderer = this.register(this._instantiationService.createInstance(OverviewRulerRenderer, this._viewportElement, this.screenElement));\n      }\n    });\n    // Measure the character size\n    this._charSizeService.measure();\n\n    // Setup loop that draws to screen\n    this.refresh(0, this.rows - 1);\n\n    // Initialize global actions that need to be taken on the document.\n    this._initGlobal();\n\n    // Listen for mouse events and translate\n    // them into terminal mouse protocols.\n    this.bindMouse();\n  }\n\n  private _createRenderer(): IRenderer {\n    return this._instantiationService.createInstance(DomRenderer, this.element!, this.screenElement!, this._viewportElement!, this.linkifier2);\n  }\n\n  /**\n   * Bind certain mouse events to the terminal.\n   * By default only 3 button + wheel up/down is ativated. For higher buttons\n   * no mouse report will be created. Typically the standard actions will be active.\n   *\n   * There are several reasons not to enable support for higher buttons/wheel:\n   * - Button 4 and 5 are typically used for history back and forward navigation,\n   *   there is no straight forward way to supress/intercept those standard actions.\n   * - Support for higher buttons does not work in some platform/browser combinations.\n   * - Left/right wheel was not tested.\n   * - Emulators vary in mouse button support, typically only 3 buttons and\n   *   wheel up/down work reliable.\n   *\n   * TODO: Move mouse event code into its own file.\n   */\n  public bindMouse(): void {\n    const self = this;\n    const el = this.element!;\n\n    // send event to CoreMouseService\n    function sendEvent(ev: MouseEvent | WheelEvent): boolean {\n      // get mouse coordinates\n      const pos = self._mouseService!.getMouseReportCoords(ev, self.screenElement!);\n      if (!pos) {\n        return false;\n      }\n\n      let but: CoreMouseButton;\n      let action: CoreMouseAction | undefined;\n      switch ((ev as any).overrideType || ev.type) {\n        case 'mousemove':\n          action = CoreMouseAction.MOVE;\n          if (ev.buttons === undefined) {\n            // buttons is not supported on macOS, try to get a value from button instead\n            but = CoreMouseButton.NONE;\n            if (ev.button !== undefined) {\n              but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n            }\n          } else {\n            // according to MDN buttons only reports up to button 5 (AUX2)\n            but = ev.buttons & 1 ? CoreMouseButton.LEFT :\n              ev.buttons & 4 ? CoreMouseButton.MIDDLE :\n                ev.buttons & 2 ? CoreMouseButton.RIGHT :\n                  CoreMouseButton.NONE; // fallback to NONE\n          }\n          break;\n        case 'mouseup':\n          action = CoreMouseAction.UP;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'mousedown':\n          action = CoreMouseAction.DOWN;\n          but = ev.button < 3 ? ev.button : CoreMouseButton.NONE;\n          break;\n        case 'wheel':\n          const amount = self.viewport!.getLinesScrolled(ev as WheelEvent);\n\n          if (amount === 0) {\n            return false;\n          }\n\n          action = (ev as WheelEvent).deltaY < 0 ? CoreMouseAction.UP : CoreMouseAction.DOWN;\n          but = CoreMouseButton.WHEEL;\n          break;\n        default:\n          // dont handle other event types by accident\n          return false;\n      }\n\n      // exit if we cannot determine valid button/action values\n      // do nothing for higher buttons than wheel\n      if (action === undefined || but === undefined || but > CoreMouseButton.WHEEL) {\n        return false;\n      }\n\n      return self.coreMouseService.triggerMouseEvent({\n        col: pos.col,\n        row: pos.row,\n        x: pos.x,\n        y: pos.y,\n        button: but,\n        action,\n        ctrl: ev.ctrlKey,\n        alt: ev.altKey,\n        shift: ev.shiftKey\n      });\n    }\n\n    /**\n     * Event listener state handling.\n     * We listen to the onProtocolChange event of CoreMouseService and put\n     * requested listeners in `requestedEvents`. With this the listeners\n     * have all bits to do the event listener juggling.\n     * Note: 'mousedown' currently is \"always on\" and not managed\n     * by onProtocolChange.\n     */\n    const requestedEvents: { [key: string]: ((ev: Event) => void) | null } = {\n      mouseup: null,\n      wheel: null,\n      mousedrag: null,\n      mousemove: null\n    };\n    const eventListeners: { [key: string]: (ev: any) => void | boolean } = {\n      mouseup: (ev: MouseEvent) => {\n        sendEvent(ev);\n        if (!ev.buttons) {\n          // if no other button is held remove global handlers\n          this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n          if (requestedEvents.mousedrag) {\n            this._document!.removeEventListener('mousemove', requestedEvents.mousedrag);\n          }\n        }\n        return this.cancel(ev);\n      },\n      wheel: (ev: WheelEvent) => {\n        sendEvent(ev);\n        return this.cancel(ev, true);\n      },\n      mousedrag: (ev: MouseEvent) => {\n        // deal only with move while a button is held\n        if (ev.buttons) {\n          sendEvent(ev);\n        }\n      },\n      mousemove: (ev: MouseEvent) => {\n        // deal only with move without any button\n        if (!ev.buttons) {\n          sendEvent(ev);\n        }\n      }\n    };\n    this.register(this.coreMouseService.onProtocolChange(events => {\n      // apply global changes on events\n      if (events) {\n        if (this.optionsService.rawOptions.logLevel === 'debug') {\n          this._logService.debug('Binding to mouse events:', this.coreMouseService.explainEvents(events));\n        }\n        this.element!.classList.add('enable-mouse-events');\n        this._selectionService!.disable();\n      } else {\n        this._logService.debug('Unbinding from mouse events.');\n        this.element!.classList.remove('enable-mouse-events');\n        this._selectionService!.enable();\n      }\n\n      // add/remove handlers from requestedEvents\n\n      if (!(events & CoreMouseEventType.MOVE)) {\n        el.removeEventListener('mousemove', requestedEvents.mousemove!);\n        requestedEvents.mousemove = null;\n      } else if (!requestedEvents.mousemove) {\n        el.addEventListener('mousemove', eventListeners.mousemove);\n        requestedEvents.mousemove = eventListeners.mousemove;\n      }\n\n      if (!(events & CoreMouseEventType.WHEEL)) {\n        el.removeEventListener('wheel', requestedEvents.wheel!);\n        requestedEvents.wheel = null;\n      } else if (!requestedEvents.wheel) {\n        el.addEventListener('wheel', eventListeners.wheel, { passive: false });\n        requestedEvents.wheel = eventListeners.wheel;\n      }\n\n      if (!(events & CoreMouseEventType.UP)) {\n        this._document!.removeEventListener('mouseup', requestedEvents.mouseup!);\n        el.removeEventListener('mouseup', requestedEvents.mouseup!);\n        requestedEvents.mouseup = null;\n      } else if (!requestedEvents.mouseup) {\n        el.addEventListener('mouseup', eventListeners.mouseup);\n        requestedEvents.mouseup = eventListeners.mouseup;\n      }\n\n      if (!(events & CoreMouseEventType.DRAG)) {\n        this._document!.removeEventListener('mousemove', requestedEvents.mousedrag!);\n        requestedEvents.mousedrag = null;\n      } else if (!requestedEvents.mousedrag) {\n        requestedEvents.mousedrag = eventListeners.mousedrag;\n      }\n    }));\n    // force initial onProtocolChange so we dont miss early mouse requests\n    this.coreMouseService.activeProtocol = this.coreMouseService.activeProtocol;\n\n    /**\n     * \"Always on\" event listeners.\n     */\n    this.register(addDisposableDomListener(el, 'mousedown', (ev: MouseEvent) => {\n      ev.preventDefault();\n      this.focus();\n\n      // Don't send the mouse button to the pty if mouse events are disabled or\n      // if the selection manager is having selection forced (ie. a modifier is\n      // held).\n      if (!this.coreMouseService.areMouseEventsActive || this._selectionService!.shouldForceSelection(ev)) {\n        return;\n      }\n\n      sendEvent(ev);\n\n      // Register additional global handlers which should keep reporting outside\n      // of the terminal element.\n      // Note: Other emulators also do this for 'mousedown' while a button\n      // is held, we currently limit 'mousedown' to the terminal only.\n      if (requestedEvents.mouseup) {\n        this._document!.addEventListener('mouseup', requestedEvents.mouseup);\n      }\n      if (requestedEvents.mousedrag) {\n        this._document!.addEventListener('mousemove', requestedEvents.mousedrag);\n      }\n\n      return this.cancel(ev);\n    }));\n\n    this.register(addDisposableDomListener(el, 'wheel', (ev: WheelEvent) => {\n      // do nothing, if app side handles wheel itself\n      if (requestedEvents.wheel) return;\n\n      if (!this.buffer.hasScrollback) {\n        // Convert wheel events into up/down events when the buffer does not have scrollback, this\n        // enables scrolling in apps hosted in the alt buffer such as vim or tmux.\n        const amount = this.viewport!.getLinesScrolled(ev);\n\n        // Do nothing if there's no vertical scroll\n        if (amount === 0) {\n          return;\n        }\n\n        // Construct and send sequences\n        const sequence = C0.ESC + (this.coreService.decPrivateModes.applicationCursorKeys ? 'O' : '[') + (ev.deltaY < 0 ? 'A' : 'B');\n        let data = '';\n        for (let i = 0; i < Math.abs(amount); i++) {\n          data += sequence;\n        }\n        this.coreService.triggerDataEvent(data, true);\n        return this.cancel(ev, true);\n      }\n\n      // normal viewport scrolling\n      // conditionally stop event, if the viewport still had rows to scroll within\n      if (this.viewport!.handleWheel(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n\n    this.register(addDisposableDomListener(el, 'touchstart', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      this.viewport!.handleTouchStart(ev);\n      return this.cancel(ev);\n    }, { passive: true }));\n\n    this.register(addDisposableDomListener(el, 'touchmove', (ev: TouchEvent) => {\n      if (this.coreMouseService.areMouseEventsActive) return;\n      if (!this.viewport!.handleTouchMove(ev)) {\n        return this.cancel(ev);\n      }\n    }, { passive: false }));\n  }\n\n\n  /**\n   * Tells the renderer to refresh terminal content between two rows (inclusive) at the next\n   * opportunity.\n   * @param start The row to start from (between 0 and this.rows - 1).\n   * @param end The row to end at (between start and this.rows - 1).\n   */\n  public refresh(start: number, end: number): void {\n    this._renderService?.refreshRows(start, end);\n  }\n\n  /**\n   * Change the cursor style for different selection modes\n   */\n  public updateCursorStyle(ev: KeyboardEvent): void {\n    if (this._selectionService?.shouldColumnSelect(ev)) {\n      this.element!.classList.add('column-select');\n    } else {\n      this.element!.classList.remove('column-select');\n    }\n  }\n\n  /**\n   * Display the cursor element\n   */\n  private _showCursor(): void {\n    if (!this.coreService.isCursorInitialized) {\n      this.coreService.isCursorInitialized = true;\n      this.refresh(this.buffer.y, this.buffer.y);\n    }\n  }\n\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source = ScrollSource.TERMINAL): void {\n    if (source === ScrollSource.VIEWPORT) {\n      super.scrollLines(disp, suppressScrollEvent, source);\n      this.refresh(0, this.rows - 1);\n    } else {\n      this.viewport?.scrollLines(disp);\n    }\n  }\n\n  public paste(data: string): void {\n    paste(data, this.textarea!, this.coreService, this.optionsService);\n  }\n\n  /**\n   * Attaches a custom key event handler which is run before keys are processed,\n   * giving consumers of xterm.js ultimate control as to what keys should be\n   * processed by the terminal and what keys should not.\n   * @param customKeyEventHandler The custom KeyboardEvent handler to attach.\n   * This is a function that takes a KeyboardEvent, allowing consumers to stop\n   * propagation and/or prevent the default action. The function returns whether\n   * the event should be processed by xterm.js.\n   */\n  public attachCustomKeyEventHandler(customKeyEventHandler: CustomKeyEventHandler): void {\n    this._customKeyEventHandler = customKeyEventHandler;\n  }\n\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this.linkifier2.registerLinkProvider(linkProvider);\n  }\n\n  public registerCharacterJoiner(handler: CharacterJoinerHandler): number {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    const joinerId = this._characterJoinerService.register(handler);\n    this.refresh(0, this.rows - 1);\n    return joinerId;\n  }\n\n  public deregisterCharacterJoiner(joinerId: number): void {\n    if (!this._characterJoinerService) {\n      throw new Error('Terminal must be opened first');\n    }\n    if (this._characterJoinerService.deregister(joinerId)) {\n      this.refresh(0, this.rows - 1);\n    }\n  }\n\n  public get markers(): IMarker[] {\n    return this.buffer.markers;\n  }\n\n  public registerMarker(cursorYOffset: number): IMarker {\n    return this.buffer.addMarker(this.buffer.ybase + this.buffer.y + cursorYOffset);\n  }\n\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    return this._decorationService.registerDecoration(decorationOptions);\n  }\n\n  /**\n   * Gets whether the terminal has an active selection.\n   */\n  public hasSelection(): boolean {\n    return this._selectionService ? this._selectionService.hasSelection : false;\n  }\n\n  /**\n   * Selects text within the terminal.\n   * @param column The column the selection starts at..\n   * @param row The row the selection starts at.\n   * @param length The length of the selection.\n   */\n  public select(column: number, row: number, length: number): void {\n    this._selectionService!.setSelection(column, row, length);\n  }\n\n  /**\n   * Gets the terminal's current selection, this is useful for implementing copy\n   * behavior outside of xterm.js.\n   */\n  public getSelection(): string {\n    return this._selectionService ? this._selectionService.selectionText : '';\n  }\n\n  public getSelectionPosition(): IBufferRange | undefined {\n    if (!this._selectionService || !this._selectionService.hasSelection) {\n      return undefined;\n    }\n\n    return {\n      start: {\n        x: this._selectionService.selectionStart![0],\n        y: this._selectionService.selectionStart![1]\n      },\n      end: {\n        x: this._selectionService.selectionEnd![0],\n        y: this._selectionService.selectionEnd![1]\n      }\n    };\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._selectionService?.clearSelection();\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._selectionService?.selectAll();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._selectionService?.selectLines(start, end);\n  }\n\n  /**\n   * Handle a keydown [KeyboardEvent].\n   *\n   * [KeyboardEvent]: https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   */\n  protected _keyDown(event: KeyboardEvent): boolean | undefined {\n    this._keyDownHandled = false;\n    this._keyDownSeen = true;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(event) === false) {\n      return false;\n    }\n\n    // Ignore composing with Alt key on Mac when macOptionIsMeta is enabled\n    const shouldIgnoreComposition = this.browser.isMac && this.options.macOptionIsMeta && event.altKey;\n\n    if (!shouldIgnoreComposition && !this._compositionHelper!.keydown(event)) {\n      if (this.options.scrollOnUserInput && this.buffer.ybase !== this.buffer.ydisp) {\n        this.scrollToBottom();\n      }\n      return false;\n    }\n\n    if (!shouldIgnoreComposition && (event.key === 'Dead' || event.key === 'AltGraph')) {\n      this._unprocessedDeadKey = true;\n    }\n\n    const result = evaluateKeyboardEvent(event, this.coreService.decPrivateModes.applicationCursorKeys, this.browser.isMac, this.options.macOptionIsMeta);\n\n    this.updateCursorStyle(event);\n\n    if (result.type === KeyboardResultType.PAGE_DOWN || result.type === KeyboardResultType.PAGE_UP) {\n      const scrollCount = this.rows - 1;\n      this.scrollLines(result.type === KeyboardResultType.PAGE_UP ? -scrollCount : scrollCount);\n      return this.cancel(event, true);\n    }\n\n    if (result.type === KeyboardResultType.SELECT_ALL) {\n      this.selectAll();\n    }\n\n    if (this._isThirdLevelShift(this.browser, event)) {\n      return true;\n    }\n\n    if (result.cancel) {\n      // The event is canceled at the end already, is this necessary?\n      this.cancel(event, true);\n    }\n\n    if (!result.key) {\n      return true;\n    }\n\n    // HACK: Process A-Z in the keypress event to fix an issue with macOS IMEs where lower case\n    // letters cannot be input while caps lock is on.\n    if (event.key && !event.ctrlKey && !event.altKey && !event.metaKey && event.key.length === 1) {\n      if (event.key.charCodeAt(0) >= 65 && event.key.charCodeAt(0) <= 90) {\n        return true;\n      }\n    }\n\n    if (this._unprocessedDeadKey) {\n      this._unprocessedDeadKey = false;\n      return true;\n    }\n\n    // If ctrl+c or enter is being sent, clear out the textarea. This is done so that screen readers\n    // will announce deleted characters. This will not work 100% of the time but it should cover\n    // most scenarios.\n    if (result.key === C0.ETX || result.key === C0.CR) {\n      this.textarea!.value = '';\n    }\n\n    this._onKey.fire({ key: result.key, domEvent: event });\n    this._showCursor();\n    this.coreService.triggerDataEvent(result.key, true);\n\n    // Cancel events when not in screen reader mode so events don't get bubbled up and handled by\n    // other listeners. When screen reader mode is enabled, we don't cancel them (unless ctrl or alt\n    // is also depressed) so that the cursor textarea can be updated, which triggers the screen\n    // reader to read it.\n    if (!this.optionsService.rawOptions.screenReaderMode || event.altKey || event.ctrlKey) {\n      return this.cancel(event, true);\n    }\n\n    this._keyDownHandled = true;\n  }\n\n  private _isThirdLevelShift(browser: IBrowser, ev: KeyboardEvent): boolean {\n    const thirdLevelKey =\n      (browser.isMac && !this.options.macOptionIsMeta && ev.altKey && !ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.altKey && ev.ctrlKey && !ev.metaKey) ||\n      (browser.isWindows && ev.getModifierState('AltGraph'));\n\n    if (ev.type === 'keypress') {\n      return thirdLevelKey;\n    }\n\n    // Don't invoke for arrows, pageDown, home, backspace, etc. (on non-keypress events)\n    return thirdLevelKey && (!ev.keyCode || ev.keyCode > 47);\n  }\n\n  protected _keyUp(ev: KeyboardEvent): void {\n    this._keyDownSeen = false;\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return;\n    }\n\n    if (!wasModifierKeyOnlyEvent(ev)) {\n      this.focus();\n    }\n\n    this.updateCursorStyle(ev);\n    this._keyPressHandled = false;\n  }\n\n  /**\n   * Handle a keypress event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/DOM/KeyboardEvent\n   * @param ev The keypress event to be handled.\n   */\n  protected _keyPress(ev: KeyboardEvent): boolean {\n    let key;\n\n    this._keyPressHandled = false;\n\n    if (this._keyDownHandled) {\n      return false;\n    }\n\n    if (this._customKeyEventHandler && this._customKeyEventHandler(ev) === false) {\n      return false;\n    }\n\n    this.cancel(ev);\n\n    if (ev.charCode) {\n      key = ev.charCode;\n    } else if (ev.which === null || ev.which === undefined) {\n      key = ev.keyCode;\n    } else if (ev.which !== 0 && ev.charCode !== 0) {\n      key = ev.which;\n    } else {\n      return false;\n    }\n\n    if (!key || (\n      (ev.altKey || ev.ctrlKey || ev.metaKey) && !this._isThirdLevelShift(this.browser, ev)\n    )) {\n      return false;\n    }\n\n    key = String.fromCharCode(key);\n\n    this._onKey.fire({ key, domEvent: ev });\n    this._showCursor();\n    this.coreService.triggerDataEvent(key, true);\n\n    this._keyPressHandled = true;\n\n    // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n    // keys could be ignored\n    this._unprocessedDeadKey = false;\n\n    return true;\n  }\n\n  /**\n   * Handle an input event.\n   * Key Resources:\n   *   - https://developer.mozilla.org/en-US/docs/Web/API/InputEvent\n   * @param ev The input event to be handled.\n   */\n  protected _inputEvent(ev: InputEvent): boolean {\n    // Only support emoji IMEs when screen reader mode is disabled as the event must bubble up to\n    // support reading out character input which can doubling up input characters\n    // Based on these event traces: https://github.com/xtermjs/xterm.js/issues/3679\n    if (ev.data && ev.inputType === 'insertText' && (!ev.composed || !this._keyDownSeen) && !this.optionsService.rawOptions.screenReaderMode) {\n      if (this._keyPressHandled) {\n        return false;\n      }\n\n      // The key was handled so clear the dead key state, otherwise certain keystrokes like arrow\n      // keys could be ignored\n      this._unprocessedDeadKey = false;\n\n      const text = ev.data;\n      this.coreService.triggerDataEvent(text, true);\n\n      this.cancel(ev);\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Resizes the terminal.\n   *\n   * @param x The number of columns to resize to.\n   * @param y The number of rows to resize to.\n   */\n  public resize(x: number, y: number): void {\n    if (x === this.cols && y === this.rows) {\n      // Check if we still need to measure the char size (fixes #785).\n      if (this._charSizeService && !this._charSizeService.hasValidSize) {\n        this._charSizeService.measure();\n      }\n      return;\n    }\n\n    super.resize(x, y);\n  }\n\n  private _afterResize(x: number, y: number): void {\n    this._charSizeService?.measure();\n\n    // Sync the scroll area to make sure scroll events don't fire and scroll the viewport to an\n    // invalid location\n    this.viewport?.syncScrollArea(true);\n  }\n\n  /**\n   * Clear the entire buffer, making the prompt line the new first line.\n   */\n  public clear(): void {\n    if (this.buffer.ybase === 0 && this.buffer.y === 0) {\n      // Don't clear if it's already clear\n      return;\n    }\n    this.buffer.clearAllMarkers();\n    this.buffer.lines.set(0, this.buffer.lines.get(this.buffer.ybase + this.buffer.y)!);\n    this.buffer.lines.length = 1;\n    this.buffer.ydisp = 0;\n    this.buffer.ybase = 0;\n    this.buffer.y = 0;\n    for (let i = 1; i < this.rows; i++) {\n      this.buffer.lines.push(this.buffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    // IMPORTANT: Fire scroll event before viewport is reset. This ensures embedders get the clear\n    // scroll event and that the viewport's state will be valid for immediate writes.\n    this._onScroll.fire({ position: this.buffer.ydisp, source: ScrollSource.TERMINAL });\n    this.viewport?.reset();\n    this.refresh(0, this.rows - 1);\n  }\n\n  /**\n   * Reset terminal.\n   * Note: Calling this directly from JS is synchronous but does not clear\n   * input buffers and does not reset the parser, thus the terminal will\n   * continue to apply pending input data.\n   * If you need in band reset (synchronous with input data) consider\n   * using DECSTR (soft reset, CSI ! p) or RIS instead (hard reset, ESC c).\n   */\n  public reset(): void {\n    /**\n     * Since _setup handles a full terminal creation, we have to carry forward\n     * a few things that should not reset.\n     */\n    this.options.rows = this.rows;\n    this.options.cols = this.cols;\n    const customKeyEventHandler = this._customKeyEventHandler;\n\n    this._setup();\n    super.reset();\n    this._selectionService?.reset();\n    this._decorationService.reset();\n    this.viewport?.reset();\n\n    // reattach\n    this._customKeyEventHandler = customKeyEventHandler;\n\n    // do a full screen refresh\n    this.refresh(0, this.rows - 1);\n  }\n\n  public clearTextureAtlas(): void {\n    this._renderService?.clearTextureAtlas();\n  }\n\n  private _reportFocus(): void {\n    if (this.element?.classList.contains('focus')) {\n      this.coreService.triggerDataEvent(C0.ESC + '[I');\n    } else {\n      this.coreService.triggerDataEvent(C0.ESC + '[O');\n    }\n  }\n\n  private _reportWindowsOptions(type: WindowsOptionsReportType): void {\n    if (!this._renderService) {\n      return;\n    }\n\n    switch (type) {\n      case WindowsOptionsReportType.GET_WIN_SIZE_PIXELS:\n        const canvasWidth = this._renderService.dimensions.css.canvas.width.toFixed(0);\n        const canvasHeight = this._renderService.dimensions.css.canvas.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[4;${canvasHeight};${canvasWidth}t`);\n        break;\n      case WindowsOptionsReportType.GET_CELL_SIZE_PIXELS:\n        const cellWidth = this._renderService.dimensions.css.cell.width.toFixed(0);\n        const cellHeight = this._renderService.dimensions.css.cell.height.toFixed(0);\n        this.coreService.triggerDataEvent(`${C0.ESC}[6;${cellHeight};${cellWidth}t`);\n        break;\n    }\n  }\n\n  // TODO: Remove cancel function and cancelEvents option\n  public cancel(ev: Event, force?: boolean): boolean | undefined {\n    if (!this.options.cancelEvents && !force) {\n      return;\n    }\n    ev.preventDefault();\n    ev.stopPropagation();\n    return false;\n  }\n}\n\n/**\n * Helpers\n */\n\nfunction wasModifierKeyOnlyEvent(ev: KeyboardEvent): boolean {\n  return ev.keyCode === 16 || // Shift\n    ev.keyCode === 17 || // Ctrl\n    ev.keyCode === 18; // Alt\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nconst RENDER_DEBOUNCE_THRESHOLD_MS = 1000; // 1 Second\n\nimport { IRenderDebouncer } from 'browser/Types';\n\n/**\n * Debounces calls to update screen readers to update at most once configurable interval of time.\n */\nexport class TimeBasedDebouncer implements IRenderDebouncer {\n  private _rowStart: number | undefined;\n  private _rowEnd: number | undefined;\n  private _rowCount: number | undefined;\n\n  // The last moment that the Terminal was refreshed at\n  private _lastRefreshMs = 0;\n  // Whether a trailing refresh should be triggered due to a refresh request that was throttled\n  private _additionalRefreshRequested = false;\n\n  private _refreshTimeoutID: number | undefined;\n\n  constructor(\n    private _renderCallback: (start: number, end: number) => void,\n    private readonly _debounceThresholdMS = RENDER_DEBOUNCE_THRESHOLD_MS\n  ) {\n  }\n\n  public dispose(): void {\n    if (this._refreshTimeoutID) {\n      clearTimeout(this._refreshTimeoutID);\n    }\n  }\n\n  public refresh(rowStart: number | undefined, rowEnd: number | undefined, rowCount: number): void {\n    this._rowCount = rowCount;\n    // Get the min/max row start/end for the arg values\n    rowStart = rowStart !== undefined ? rowStart : 0;\n    rowEnd = rowEnd !== undefined ? rowEnd : this._rowCount - 1;\n    // Set the properties to the updated values\n    this._rowStart = this._rowStart !== undefined ? Math.min(this._rowStart, rowStart) : rowStart;\n    this._rowEnd = this._rowEnd !== undefined ? Math.max(this._rowEnd, rowEnd) : rowEnd;\n\n    // Only refresh if the time since last refresh is above a threshold, otherwise wait for\n    // enough time to pass before refreshing again.\n    const refreshRequestTime: number = Date.now();\n    if (refreshRequestTime - this._lastRefreshMs >= this._debounceThresholdMS) {\n      // Enough time has lapsed since the last refresh; refresh immediately\n      this._lastRefreshMs = refreshRequestTime;\n      this._innerRefresh();\n    } else if (!this._additionalRefreshRequested) {\n      // This is the first additional request throttled; set up trailing refresh\n      const elapsed = refreshRequestTime - this._lastRefreshMs;\n      const waitPeriodBeforeTrailingRefresh = this._debounceThresholdMS - elapsed;\n      this._additionalRefreshRequested = true;\n\n      this._refreshTimeoutID = window.setTimeout(() => {\n        this._lastRefreshMs = Date.now();\n        this._innerRefresh();\n        this._additionalRefreshRequested = false;\n        this._refreshTimeoutID = undefined; // No longer need to clear the timeout\n      }, waitPeriodBeforeTrailingRefresh);\n    }\n  }\n\n  private _innerRefresh(): void {\n    // Make sure values are set\n    if (this._rowStart === undefined || this._rowEnd === undefined || this._rowCount === undefined) {\n      return;\n    }\n\n    // Clamp values\n    const start = Math.max(this._rowStart, 0);\n    const end = Math.min(this._rowEnd, this._rowCount - 1);\n\n    // Reset debouncer (this happens before render callback as the render could trigger it again)\n    this._rowStart = undefined;\n    this._rowEnd = undefined;\n\n    // Run render callback\n    this._renderCallback(start, end);\n  }\n}\n\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IViewport, ReadonlyColorSet } from 'browser/Types';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nconst FALLBACK_SCROLL_BAR_WIDTH = 15;\n\ninterface ISmoothScrollState {\n  startTime: number;\n  origin: number;\n  target: number;\n}\n\n/**\n * Represents the viewport of a terminal, the visible area within the larger buffer of output.\n * Logic for the virtual scroll bar is included in this object.\n */\nexport class Viewport extends Disposable implements IViewport {\n  public scrollBarWidth: number = 0;\n  private _currentRowHeight: number = 0;\n  private _currentDeviceCellHeight: number = 0;\n  private _lastRecordedBufferLength: number = 0;\n  private _lastRecordedViewportHeight: number = 0;\n  private _lastRecordedBufferHeight: number = 0;\n  private _lastTouchY: number = 0;\n  private _lastScrollTop: number = 0;\n  private _activeBuffer: IBuffer;\n  private _renderDimensions: IRenderDimensions;\n\n  // Stores a partial line amount when scrolling, this is used to keep track of how much of a line\n  // is scrolled so we can \"scroll\" over partial lines and feel natural on touchpads. This is a\n  // quick fix and could have a more robust solution in place that reset the value when needed.\n  private _wheelPartialScroll: number = 0;\n\n  private _refreshAnimationFrame: number | null = null;\n  private _ignoreNextScrollEvent: boolean = false;\n  private _smoothScrollState: ISmoothScrollState = {\n    startTime: 0,\n    origin: -1,\n    target: -1\n  };\n\n  private readonly _onRequestScrollLines = this.register(new EventEmitter<{ amount: number, suppressScrollEvent: boolean }>());\n  public readonly onRequestScrollLines = this._onRequestScrollLines.event;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _scrollArea: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    // Measure the width of the scrollbar. If it is 0 we can assume it's an OSX overlay scrollbar.\n    // Unfortunately the overlay scrollbar would be hidden underneath the screen element in that\n    // case, therefore we account for a standard amount to make it visible\n    this.scrollBarWidth = (this._viewportElement.offsetWidth - this._scrollArea.offsetWidth) || FALLBACK_SCROLL_BAR_WIDTH;\n    this.register(addDisposableDomListener(this._viewportElement, 'scroll', this._handleScroll.bind(this)));\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n    this._renderDimensions = this._renderService.dimensions;\n    this.register(this._renderService.onDimensionsChange(e => this._renderDimensions = e));\n\n    this._handleThemeChange(themeService.colors);\n    this.register(themeService.onChangeColors(e => this._handleThemeChange(e)));\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.syncScrollArea()));\n\n    // Perform this async to ensure the ICharSizeService is ready.\n    setTimeout(() => this.syncScrollArea());\n  }\n\n  private _handleThemeChange(colors: ReadonlyColorSet): void {\n    this._viewportElement.style.backgroundColor = colors.background.css;\n  }\n\n  public reset(): void {\n    this._currentRowHeight = 0;\n    this._currentDeviceCellHeight = 0;\n    this._lastRecordedBufferLength = 0;\n    this._lastRecordedViewportHeight = 0;\n    this._lastRecordedBufferHeight = 0;\n    this._lastTouchY = 0;\n    this._lastScrollTop = 0;\n    // Sync on next animation frame to ensure the new terminal state is used\n    this._coreBrowserService.window.requestAnimationFrame(() => this.syncScrollArea());\n  }\n\n  /**\n   * Refreshes row height, setting line-height, viewport height and scroll area height if\n   * necessary.\n   */\n  private _refresh(immediate: boolean): void {\n    if (immediate) {\n      this._innerRefresh();\n      if (this._refreshAnimationFrame !== null) {\n        this._coreBrowserService.window.cancelAnimationFrame(this._refreshAnimationFrame);\n      }\n      return;\n    }\n    if (this._refreshAnimationFrame === null) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._innerRefresh());\n    }\n  }\n\n  private _innerRefresh(): void {\n    if (this._charSizeService.height > 0) {\n      this._currentRowHeight = this._renderService.dimensions.device.cell.height / this._coreBrowserService.dpr;\n      this._currentDeviceCellHeight = this._renderService.dimensions.device.cell.height;\n      this._lastRecordedViewportHeight = this._viewportElement.offsetHeight;\n      const newBufferHeight = Math.round(this._currentRowHeight * this._lastRecordedBufferLength) + (this._lastRecordedViewportHeight - this._renderService.dimensions.css.canvas.height);\n      if (this._lastRecordedBufferHeight !== newBufferHeight) {\n        this._lastRecordedBufferHeight = newBufferHeight;\n        this._scrollArea.style.height = this._lastRecordedBufferHeight + 'px';\n      }\n    }\n\n    // Sync scrollTop\n    const scrollTop = this._bufferService.buffer.ydisp * this._currentRowHeight;\n    if (this._viewportElement.scrollTop !== scrollTop) {\n      // Ignore the next scroll event which will be triggered by setting the scrollTop as we do not\n      // want this event to scroll the terminal\n      this._ignoreNextScrollEvent = true;\n      this._viewportElement.scrollTop = scrollTop;\n    }\n\n    this._refreshAnimationFrame = null;\n  }\n\n  /**\n   * Updates dimensions and synchronizes the scroll area if necessary.\n   */\n  public syncScrollArea(immediate: boolean = false): void {\n    // If buffer height changed\n    if (this._lastRecordedBufferLength !== this._bufferService.buffer.lines.length) {\n      this._lastRecordedBufferLength = this._bufferService.buffer.lines.length;\n      this._refresh(immediate);\n      return;\n    }\n\n    // If viewport height changed\n    if (this._lastRecordedViewportHeight !== this._renderService.dimensions.css.canvas.height) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If the buffer position doesn't match last scroll top\n    if (this._lastScrollTop !== this._activeBuffer.ydisp * this._currentRowHeight) {\n      this._refresh(immediate);\n      return;\n    }\n\n    // If row height changed\n    if (this._renderDimensions.device.cell.height !== this._currentDeviceCellHeight) {\n      this._refresh(immediate);\n      return;\n    }\n  }\n\n  /**\n   * Handles scroll events on the viewport, calculating the new viewport and requesting the\n   * terminal to scroll to it.\n   * @param ev The scroll event.\n   */\n  private _handleScroll(ev: Event): void {\n    // Record current scroll top position\n    this._lastScrollTop = this._viewportElement.scrollTop;\n\n    // Don't attempt to scroll if the element is not visible, otherwise scrollTop will be corrupt\n    // which causes the terminal to scroll the buffer to the top\n    if (!this._viewportElement.offsetParent) {\n      return;\n    }\n\n    // Ignore the event if it was flagged to ignore (when the source of the event is from Viewport)\n    if (this._ignoreNextScrollEvent) {\n      this._ignoreNextScrollEvent = false;\n      // Still trigger the scroll so lines get refreshed\n      this._onRequestScrollLines.fire({ amount: 0, suppressScrollEvent: true });\n      return;\n    }\n\n    const newRow = Math.round(this._lastScrollTop / this._currentRowHeight);\n    const diff = newRow - this._bufferService.buffer.ydisp;\n    this._onRequestScrollLines.fire({ amount: diff, suppressScrollEvent: true });\n  }\n\n  private _smoothScroll(): void {\n    // Check valid state\n    if (this._isDisposed || this._smoothScrollState.origin === -1 || this._smoothScrollState.target === -1) {\n      return;\n    }\n\n    // Calculate position complete\n    const percent = this._smoothScrollPercent();\n    this._viewportElement.scrollTop = this._smoothScrollState.origin + Math.round(percent * (this._smoothScrollState.target - this._smoothScrollState.origin));\n\n    // Continue or finish smooth scroll\n    if (percent < 1) {\n      this._coreBrowserService.window.requestAnimationFrame(() => this._smoothScroll());\n    } else {\n      this._clearSmoothScrollState();\n    }\n  }\n\n  private _smoothScrollPercent(): number {\n    if (!this._optionsService.rawOptions.smoothScrollDuration || !this._smoothScrollState.startTime) {\n      return 1;\n    }\n    return Math.max(Math.min((Date.now() - this._smoothScrollState.startTime) / this._optionsService.rawOptions.smoothScrollDuration, 1), 0);\n  }\n\n  private _clearSmoothScrollState(): void {\n    this._smoothScrollState.startTime = 0;\n    this._smoothScrollState.origin = -1;\n    this._smoothScrollState.target = -1;\n  }\n\n  /**\n   * Handles bubbling of scroll event in case the viewport has reached top or bottom\n   * @param ev The scroll event.\n   * @param amount The amount scrolled\n   */\n  private _bubbleScroll(ev: Event, amount: number): boolean {\n    const scrollPosFromTop = this._viewportElement.scrollTop + this._lastRecordedViewportHeight;\n    if ((amount < 0 && this._viewportElement.scrollTop !== 0) ||\n      (amount > 0 && scrollPosFromTop < this._lastRecordedBufferHeight)) {\n      if (ev.cancelable) {\n        ev.preventDefault();\n      }\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Handles mouse wheel events by adjusting the viewport's scrollTop and delegating the actual\n   * scrolling to `onScroll`, this event needs to be attached manually by the consumer of\n   * `Viewport`.\n   * @param ev The mouse wheel event.\n   */\n  public handleWheel(ev: WheelEvent): boolean {\n    const amount = this._getPixelsScrolled(ev);\n    if (amount === 0) {\n      return false;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._viewportElement.scrollTop += amount;\n    } else {\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        if (this._smoothScrollState.target === -1) {\n          this._smoothScrollState.target = this._viewportElement.scrollTop + amount;\n        } else {\n          this._smoothScrollState.target += amount;\n        }\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n    return this._bubbleScroll(ev, amount);\n  }\n\n  public scrollLines(disp: number): void {\n    if (disp === 0) {\n      return;\n    }\n    if (!this._optionsService.rawOptions.smoothScrollDuration) {\n      this._onRequestScrollLines.fire({ amount: disp, suppressScrollEvent: false });\n    } else {\n      const amount = disp * this._currentRowHeight;\n      this._smoothScrollState.startTime = Date.now();\n      if (this._smoothScrollPercent() < 1) {\n        this._smoothScrollState.origin = this._viewportElement.scrollTop;\n        this._smoothScrollState.target = this._smoothScrollState.origin + amount;\n        this._smoothScrollState.target = Math.max(Math.min(this._smoothScrollState.target, this._viewportElement.scrollHeight), 0);\n        this._smoothScroll();\n      } else {\n        this._clearSmoothScrollState();\n      }\n    }\n  }\n\n  private _getPixelsScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_PIXEL\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_LINE) {\n      amount *= this._currentRowHeight;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._currentRowHeight * this._bufferService.rows;\n    }\n    return amount;\n  }\n\n\n  public getBufferElements(startLine: number, endLine?: number): { bufferElements: HTMLElement[], cursorElement?: HTMLElement } {\n    let currentLine: string = '';\n    let cursorElement: HTMLElement | undefined;\n    const bufferElements: HTMLElement[] = [];\n    const end = endLine ?? this._bufferService.buffer.lines.length;\n    const lines = this._bufferService.buffer.lines;\n    for (let i = startLine; i < end; i++) {\n      const line = lines.get(i);\n      if (!line) {\n        continue;\n      }\n      const isWrapped = lines.get(i + 1)?.isWrapped;\n      currentLine += line.translateToString(!isWrapped);\n      if (!isWrapped || i === lines.length - 1) {\n        const div = document.createElement('div');\n        div.textContent = currentLine;\n        bufferElements.push(div);\n        if (currentLine.length > 0) {\n          cursorElement = div;\n        }\n        currentLine = '';\n      }\n    }\n    return { bufferElements, cursorElement };\n  }\n\n  /**\n   * Gets the number of pixels scrolled by the mouse event taking into account what type of delta\n   * is being used.\n   * @param ev The mouse wheel event.\n   */\n  public getLinesScrolled(ev: WheelEvent): number {\n    // Do nothing if it's not a vertical scroll event\n    if (ev.deltaY === 0 || ev.shiftKey) {\n      return 0;\n    }\n\n    // Fallback to WheelEvent.DOM_DELTA_LINE\n    let amount = this._applyScrollModifier(ev.deltaY, ev);\n    if (ev.deltaMode === WheelEvent.DOM_DELTA_PIXEL) {\n      amount /= this._currentRowHeight + 0.0; // Prevent integer division\n      this._wheelPartialScroll += amount;\n      amount = Math.floor(Math.abs(this._wheelPartialScroll)) * (this._wheelPartialScroll > 0 ? 1 : -1);\n      this._wheelPartialScroll %= 1;\n    } else if (ev.deltaMode === WheelEvent.DOM_DELTA_PAGE) {\n      amount *= this._bufferService.rows;\n    }\n    return amount;\n  }\n\n  private _applyScrollModifier(amount: number, ev: WheelEvent): number {\n    const modifier = this._optionsService.rawOptions.fastScrollModifier;\n    // Multiply the scroll speed when the modifier is down\n    if ((modifier === 'alt' && ev.altKey) ||\n      (modifier === 'ctrl' && ev.ctrlKey) ||\n      (modifier === 'shift' && ev.shiftKey)) {\n      return amount * this._optionsService.rawOptions.fastScrollSensitivity * this._optionsService.rawOptions.scrollSensitivity;\n    }\n\n    return amount * this._optionsService.rawOptions.scrollSensitivity;\n  }\n\n  /**\n   * Handles the touchstart event, recording the touch occurred.\n   * @param ev The touch event.\n   */\n  public handleTouchStart(ev: TouchEvent): void {\n    this._lastTouchY = ev.touches[0].pageY;\n  }\n\n  /**\n   * Handles the touchmove event, scrolling the viewport if the position shifted.\n   * @param ev The touch event.\n   */\n  public handleTouchMove(ev: TouchEvent): boolean {\n    const deltaY = this._lastTouchY - ev.touches[0].pageY;\n    this._lastTouchY = ev.touches[0].pageY;\n    if (deltaY === 0) {\n      return false;\n    }\n    this._viewportElement.scrollTop += deltaY;\n    return this._bubbleScroll(ev, deltaY);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IInternalDecoration } from 'common/services/Services';\n\nexport class BufferDecorationRenderer extends Disposable {\n  private readonly _container: HTMLElement;\n  private readonly _decorationElements: Map<IInternalDecoration, HTMLElement> = new Map();\n\n  private _animationFrame: number | undefined;\n  private _altBufferIsActive: boolean = false;\n  private _dimensionsChanged: boolean = false;\n\n  constructor(\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    super();\n\n    this._container = document.createElement('div');\n    this._container.classList.add('xterm-decoration-container');\n    this._screenElement.appendChild(this._container);\n\n    this.register(this._renderService.onRenderedViewportChange(() => this._doRefreshDecorations()));\n    this.register(this._renderService.onDimensionsChange(() => {\n      this._dimensionsChanged = true;\n      this._queueRefresh();\n    }));\n    this.register(addDisposableDomListener(window, 'resize', () => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._altBufferIsActive = this._bufferService.buffer === this._bufferService.buffers.alt;\n    }));\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh()));\n    this.register(this._decorationService.onDecorationRemoved(decoration => this._removeDecoration(decoration)));\n    this.register(toDisposable(() => {\n      this._container.remove();\n      this._decorationElements.clear();\n    }));\n  }\n\n  private _queueRefresh(): void {\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._renderService.addRefreshCallback(() => {\n      this._doRefreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n\n  private _doRefreshDecorations(): void {\n    for (const decoration of this._decorationService.decorations) {\n      this._renderDecoration(decoration);\n    }\n    this._dimensionsChanged = false;\n  }\n\n  private _renderDecoration(decoration: IInternalDecoration): void {\n    this._refreshStyle(decoration);\n    if (this._dimensionsChanged) {\n      this._refreshXPosition(decoration);\n    }\n  }\n\n  private _createElement(decoration: IInternalDecoration): HTMLElement {\n    const element = document.createElement('div');\n    element.classList.add('xterm-decoration');\n    element.classList.toggle('xterm-decoration-top-layer', decoration?.options?.layer === 'top');\n    element.style.width = `${Math.round((decoration.options.width || 1) * this._renderService.dimensions.css.cell.width)}px`;\n    element.style.height = `${(decoration.options.height || 1) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.top = `${(decoration.marker.line - this._bufferService.buffers.active.ydisp) * this._renderService.dimensions.css.cell.height}px`;\n    element.style.lineHeight = `${this._renderService.dimensions.css.cell.height}px`;\n\n    const x = decoration.options.x ?? 0;\n    if (x && x > this._bufferService.cols) {\n      // exceeded the container width, so hide\n      element.style.display = 'none';\n    }\n    this._refreshXPosition(decoration, element);\n\n    return element;\n  }\n\n  private _refreshStyle(decoration: IInternalDecoration): void {\n    const line = decoration.marker.line - this._bufferService.buffers.active.ydisp;\n    if (line < 0 || line >= this._bufferService.rows) {\n      // outside of viewport\n      if (decoration.element) {\n        decoration.element.style.display = 'none';\n        decoration.onRenderEmitter.fire(decoration.element);\n      }\n    } else {\n      let element = this._decorationElements.get(decoration);\n      if (!element) {\n        element = this._createElement(decoration);\n        decoration.element = element;\n        this._decorationElements.set(decoration, element);\n        this._container.appendChild(element);\n        decoration.onDispose(() => {\n          this._decorationElements.delete(decoration);\n          element!.remove();\n        });\n      }\n      element.style.top = `${line * this._renderService.dimensions.css.cell.height}px`;\n      element.style.display = this._altBufferIsActive ? 'none' : 'block';\n      decoration.onRenderEmitter.fire(element);\n    }\n  }\n\n  private _refreshXPosition(decoration: IInternalDecoration, element: HTMLElement | undefined = decoration.element): void {\n    if (!element) {\n      return;\n    }\n    const x = decoration.options.x ?? 0;\n    if ((decoration.options.anchor || 'left') === 'right') {\n      element.style.right = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    } else {\n      element.style.left = x ? `${x * this._renderService.dimensions.css.cell.width}px` : '';\n    }\n  }\n\n  private _removeDecoration(decoration: IInternalDecoration): void {\n    this._decorationElements.get(decoration)?.remove();\n    this._decorationElements.delete(decoration);\n    decoration.dispose();\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInternalDecoration } from 'common/services/Services';\n\nexport interface IColorZoneStore {\n  readonly zones: IColorZone[];\n  clear(): void;\n  addDecoration(decoration: IInternalDecoration): void;\n  /**\n   * Sets the amount of padding in lines that will be added between zones, if new lines intersect\n   * the padding they will be merged into the same zone.\n   */\n  setPadding(padding: { [position: string]: number }): void;\n}\n\nexport interface IColorZone {\n  /** Color in a format supported by canvas' fillStyle. */\n  color: string;\n  position: 'full' | 'left' | 'center' | 'right' | undefined;\n  startBufferLine: number;\n  endBufferLine: number;\n}\n\ninterface IMinimalDecorationForColorZone {\n  marker: Pick<IInternalDecoration['marker'], 'line'>;\n  options: Pick<IInternalDecoration['options'], 'overviewRulerOptions'>;\n}\n\nexport class ColorZoneStore implements IColorZoneStore {\n  private _zones: IColorZone[] = [];\n\n  // The zone pool is used to keep zone objects from being freed between clearing the color zone\n  // store and fetching the zones. This helps reduce GC pressure since the color zones are\n  // accumulated on potentially every scroll event.\n  private _zonePool: IColorZone[] = [];\n  private _zonePoolIndex = 0;\n\n  private _linePadding: { [position: string]: number } = {\n    full: 0,\n    left: 0,\n    center: 0,\n    right: 0\n  };\n\n  public get zones(): IColorZone[] {\n    // Trim the zone pool to free unused memory\n    this._zonePool.length = Math.min(this._zonePool.length, this._zones.length);\n    return this._zones;\n  }\n\n  public clear(): void {\n    this._zones.length = 0;\n    this._zonePoolIndex = 0;\n  }\n\n  public addDecoration(decoration: IMinimalDecorationForColorZone): void {\n    if (!decoration.options.overviewRulerOptions) {\n      return;\n    }\n    for (const z of this._zones) {\n      if (z.color === decoration.options.overviewRulerOptions.color &&\n          z.position === decoration.options.overviewRulerOptions.position) {\n        if (this._lineIntersectsZone(z, decoration.marker.line)) {\n          return;\n        }\n        if (this._lineAdjacentToZone(z, decoration.marker.line, decoration.options.overviewRulerOptions.position)) {\n          this._addLineToZone(z, decoration.marker.line);\n          return;\n        }\n      }\n    }\n    // Create using zone pool if possible\n    if (this._zonePoolIndex < this._zonePool.length) {\n      this._zonePool[this._zonePoolIndex].color = decoration.options.overviewRulerOptions.color;\n      this._zonePool[this._zonePoolIndex].position = decoration.options.overviewRulerOptions.position;\n      this._zonePool[this._zonePoolIndex].startBufferLine = decoration.marker.line;\n      this._zonePool[this._zonePoolIndex].endBufferLine = decoration.marker.line;\n      this._zones.push(this._zonePool[this._zonePoolIndex++]);\n      return;\n    }\n    // Create\n    this._zones.push({\n      color: decoration.options.overviewRulerOptions.color,\n      position: decoration.options.overviewRulerOptions.position,\n      startBufferLine: decoration.marker.line,\n      endBufferLine: decoration.marker.line\n    });\n    this._zonePool.push(this._zones[this._zones.length - 1]);\n    this._zonePoolIndex++;\n  }\n\n  public setPadding(padding: { [position: string]: number }): void {\n    this._linePadding = padding;\n  }\n\n  private _lineIntersectsZone(zone: IColorZone, line: number): boolean {\n    return (\n      line >= zone.startBufferLine &&\n      line <= zone.endBufferLine\n    );\n  }\n\n  private _lineAdjacentToZone(zone: IColorZone, line: number, position: IColorZone['position']): boolean {\n    return (\n      (line >= zone.startBufferLine - this._linePadding[position || 'full']) &&\n      (line <= zone.endBufferLine + this._linePadding[position || 'full'])\n    );\n  }\n\n  private _addLineToZone(zone: IColorZone, line: number): void {\n    zone.startBufferLine = Math.min(zone.startBufferLine, line);\n    zone.endBufferLine = Math.max(zone.endBufferLine, line);\n  }\n}\n", "/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorZoneStore, IColorZone, IColorZoneStore } from 'browser/decorations/ColorZoneStore';\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { ICoreBrowserService, IRenderService } from 'browser/services/Services';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\n// Helper objects to avoid excessive calculation and garbage collection during rendering. These are\n// static values for each render and can be accessed using the decoration position as the key.\nconst drawHeight = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawWidth = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\nconst drawX = {\n  full: 0,\n  left: 0,\n  center: 0,\n  right: 0\n};\n\nexport class OverviewRulerRenderer extends Disposable {\n  private readonly _canvas: HTMLCanvasElement;\n  private readonly _ctx: CanvasRenderingContext2D;\n  private readonly _colorZoneStore: IColorZoneStore = new ColorZoneStore();\n  private get _width(): number {\n    return this._optionsService.options.overviewRulerWidth || 0;\n  }\n  private _animationFrame: number | undefined;\n\n  private _shouldUpdateDimensions: boolean | undefined = true;\n  private _shouldUpdateAnchor: boolean | undefined = true;\n  private _lastKnownBufferLength: number = 0;\n\n  private _containerHeight: number | undefined;\n\n  constructor(\n    private readonly _viewportElement: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowseService: ICoreBrowserService\n  ) {\n    super();\n    this._canvas = document.createElement('canvas');\n    this._canvas.classList.add('xterm-decoration-overview-ruler');\n    this._refreshCanvasDimensions();\n    this._viewportElement.parentElement?.insertBefore(this._canvas, this._viewportElement);\n    const ctx = this._canvas.getContext('2d');\n    if (!ctx) {\n      throw new Error('Ctx cannot be null');\n    } else {\n      this._ctx = ctx;\n    }\n    this._registerDecorationListeners();\n    this._registerBufferChangeListeners();\n    this._registerDimensionChangeListeners();\n    this.register(toDisposable(() => {\n      this._canvas?.remove();\n    }));\n  }\n\n  /**\n   * On decoration add or remove, redraw\n   */\n  private _registerDecorationListeners(): void {\n    this.register(this._decorationService.onDecorationRegistered(() => this._queueRefresh(undefined, true)));\n    this.register(this._decorationService.onDecorationRemoved(() => this._queueRefresh(undefined, true)));\n  }\n\n  /**\n   * On buffer change, redraw\n   * and hide the canvas if the alt buffer is active\n   */\n  private _registerBufferChangeListeners(): void {\n    this.register(this._renderService.onRenderedViewportChange(() => this._queueRefresh()));\n    this.register(this._bufferService.buffers.onBufferActivate(() => {\n      this._canvas!.style.display = this._bufferService.buffer === this._bufferService.buffers.alt ? 'none' : 'block';\n    }));\n    this.register(this._bufferService.onScroll(() => {\n      if (this._lastKnownBufferLength !== this._bufferService.buffers.normal.lines.length) {\n        this._refreshDrawHeightConstants();\n        this._refreshColorZonePadding();\n      }\n    }));\n  }\n  /**\n   * On dimension change, update canvas dimensions\n   * and then redraw\n   */\n  private _registerDimensionChangeListeners(): void {\n    // container height changed\n    this.register(this._renderService.onRender((): void => {\n      if (!this._containerHeight || this._containerHeight !== this._screenElement.clientHeight) {\n        this._queueRefresh(true);\n        this._containerHeight = this._screenElement.clientHeight;\n      }\n    }));\n    // overview ruler width changed\n    this.register(this._optionsService.onSpecificOptionChange('overviewRulerWidth', () => this._queueRefresh(true)));\n    // device pixel ratio changed\n    this.register(addDisposableDomListener(this._coreBrowseService.window, 'resize', () => this._queueRefresh(true)));\n    // set the canvas dimensions\n    this._queueRefresh(true);\n  }\n\n  private _refreshDrawConstants(): void {\n    // width\n    const outerWidth = Math.floor(this._canvas.width / 3);\n    const innerWidth = Math.ceil(this._canvas.width / 3);\n    drawWidth.full = this._canvas.width;\n    drawWidth.left = outerWidth;\n    drawWidth.center = innerWidth;\n    drawWidth.right = outerWidth;\n    // height\n    this._refreshDrawHeightConstants();\n    // x\n    drawX.full = 0;\n    drawX.left = 0;\n    drawX.center = drawWidth.left;\n    drawX.right = drawWidth.left + drawWidth.center;\n  }\n\n  private _refreshDrawHeightConstants(): void {\n    drawHeight.full = Math.round(2 * this._coreBrowseService.dpr);\n    // Calculate actual pixels per line\n    const pixelsPerLine = this._canvas.height / this._bufferService.buffer.lines.length;\n    // Clamp actual pixels within a range\n    const nonFullHeight = Math.round(Math.max(Math.min(pixelsPerLine, 12), 6) * this._coreBrowseService.dpr);\n    drawHeight.left = nonFullHeight;\n    drawHeight.center = nonFullHeight;\n    drawHeight.right = nonFullHeight;\n  }\n\n  private _refreshColorZonePadding(): void {\n    this._colorZoneStore.setPadding({\n      full: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.full),\n      left: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.left),\n      center: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.center),\n      right: Math.floor(this._bufferService.buffers.active.lines.length / (this._canvas.height - 1) * drawHeight.right)\n    });\n    this._lastKnownBufferLength = this._bufferService.buffers.normal.lines.length;\n  }\n\n  private _refreshCanvasDimensions(): void {\n    this._canvas.style.width = `${this._width}px`;\n    this._canvas.width = Math.round(this._width * this._coreBrowseService.dpr);\n    this._canvas.style.height = `${this._screenElement.clientHeight}px`;\n    this._canvas.height = Math.round(this._screenElement.clientHeight * this._coreBrowseService.dpr);\n    this._refreshDrawConstants();\n    this._refreshColorZonePadding();\n  }\n\n  private _refreshDecorations(): void {\n    if (this._shouldUpdateDimensions) {\n      this._refreshCanvasDimensions();\n    }\n    this._ctx.clearRect(0, 0, this._canvas.width, this._canvas.height);\n    this._colorZoneStore.clear();\n    for (const decoration of this._decorationService.decorations) {\n      this._colorZoneStore.addDecoration(decoration);\n    }\n    this._ctx.lineWidth = 1;\n    const zones = this._colorZoneStore.zones;\n    for (const zone of zones) {\n      if (zone.position !== 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    for (const zone of zones) {\n      if (zone.position === 'full') {\n        this._renderColorZone(zone);\n      }\n    }\n    this._shouldUpdateDimensions = false;\n    this._shouldUpdateAnchor = false;\n  }\n\n  private _renderColorZone(zone: IColorZone): void {\n    this._ctx.fillStyle = zone.color;\n    this._ctx.fillRect(\n      /* x */ drawX[zone.position || 'full'],\n      /* y */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        (zone.startBufferLine / this._bufferService.buffers.active.lines.length) - drawHeight[zone.position || 'full'] / 2\n      ),\n      /* w */ drawWidth[zone.position || 'full'],\n      /* h */ Math.round(\n        (this._canvas.height - 1) * // -1 to ensure at least 2px are allowed for decoration on last line\n        ((zone.endBufferLine - zone.startBufferLine) / this._bufferService.buffers.active.lines.length) + drawHeight[zone.position || 'full']\n      )\n    );\n  }\n\n  private _queueRefresh(updateCanvasDimensions?: boolean, updateAnchor?: boolean): void {\n    this._shouldUpdateDimensions = updateCanvasDimensions || this._shouldUpdateDimensions;\n    this._shouldUpdateAnchor = updateAnchor || this._shouldUpdateAnchor;\n    if (this._animationFrame !== undefined) {\n      return;\n    }\n    this._animationFrame = this._coreBrowseService.window.requestAnimationFrame(() => {\n      this._refreshDecorations();\n      this._animationFrame = undefined;\n    });\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IRenderService } from 'browser/services/Services';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\nimport { C0 } from 'common/data/EscapeSequences';\n\ninterface IPosition {\n  start: number;\n  end: number;\n}\n\n/**\n * Encapsulates the logic for handling compositionstart, compositionupdate and compositionend\n * events, displaying the in-progress composition to the UI and forwarding the final composition\n * to the handler.\n */\nexport class CompositionHelper {\n  /**\n   * Whether input composition is currently happening, eg. via a mobile keyboard, speech input or\n   * IME. This variable determines whether the compositionText should be displayed on the UI.\n   */\n  private _isComposing: boolean;\n  public get isComposing(): boolean { return this._isComposing; }\n\n  /**\n   * The position within the input textarea's value of the current composition.\n   */\n  private _compositionPosition: IPosition;\n\n  /**\n   * Whether a composition is in the process of being sent, setting this to false will cancel any\n   * in-progress composition.\n   */\n  private _isSendingComposition: boolean;\n\n  /**\n   * Data already sent due to keydown event.\n   */\n  private _dataAlreadySent: string;\n\n  constructor(\n    private readonly _textarea: HTMLTextAreaElement,\n    private readonly _compositionView: HTMLElement,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IRenderService private readonly _renderService: IRenderService\n  ) {\n    this._isComposing = false;\n    this._isSendingComposition = false;\n    this._compositionPosition = { start: 0, end: 0 };\n    this._dataAlreadySent = '';\n  }\n\n  /**\n   * Handles the compositionstart event, activating the composition view.\n   */\n  public compositionstart(): void {\n    this._isComposing = true;\n    this._compositionPosition.start = this._textarea.value.length;\n    this._compositionView.textContent = '';\n    this._dataAlreadySent = '';\n    this._compositionView.classList.add('active');\n  }\n\n  /**\n   * Handles the compositionupdate event, updating the composition view.\n   * @param ev The event.\n   */\n  public compositionupdate(ev: Pick<CompositionEvent, 'data'>): void {\n    this._compositionView.textContent = ev.data;\n    this.updateCompositionElements();\n    setTimeout(() => {\n      this._compositionPosition.end = this._textarea.value.length;\n    }, 0);\n  }\n\n  /**\n   * Handles the compositionend event, hiding the composition view and sending the composition to\n   * the handler.\n   */\n  public compositionend(): void {\n    this._finalizeComposition(true);\n  }\n\n  /**\n   * Handles the keydown event, routing any necessary events to the CompositionHelper functions.\n   * @param ev The keydown event.\n   * @returns Whether the Terminal should continue processing the keydown event.\n   */\n  public keydown(ev: KeyboardEvent): boolean {\n    if (this._isComposing || this._isSendingComposition) {\n      if (ev.keyCode === 229) {\n        // Continue composing if the keyCode is the \"composition character\"\n        return false;\n      }\n      if (ev.keyCode === 16 || ev.keyCode === 17 || ev.keyCode === 18) {\n        // Continue composing if the keyCode is a modifier key\n        return false;\n      }\n      // Finish composition immediately. This is mainly here for the case where enter is\n      // pressed and the handler needs to be triggered before the command is executed.\n      this._finalizeComposition(false);\n    }\n\n    if (ev.keyCode === 229) {\n      // If the \"composition character\" is used but gets to this point it means a non-composition\n      // character (eg. numbers and punctuation) was pressed when the IME was active.\n      this._handleAnyTextareaChanges();\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Finalizes the composition, resuming regular input actions. This is called when a composition\n   * is ending.\n   * @param waitForPropagation Whether to wait for events to propagate before sending\n   *   the input. This should be false if a non-composition keystroke is entered before the\n   *   compositionend event is triggered, such as enter, so that the composition is sent before\n   *   the command is executed.\n   */\n  private _finalizeComposition(waitForPropagation: boolean): void {\n    this._compositionView.classList.remove('active');\n    this._isComposing = false;\n\n    if (!waitForPropagation) {\n      // Cancel any delayed composition send requests and send the input immediately.\n      this._isSendingComposition = false;\n      const input = this._textarea.value.substring(this._compositionPosition.start, this._compositionPosition.end);\n      this._coreService.triggerDataEvent(input, true);\n    } else {\n      // Make a deep copy of the composition position here as a new compositionstart event may\n      // fire before the setTimeout executes.\n      const currentCompositionPosition = {\n        start: this._compositionPosition.start,\n        end: this._compositionPosition.end\n      };\n\n      // Since composition* events happen before the changes take place in the textarea on most\n      // browsers, use a setTimeout with 0ms time to allow the native compositionend event to\n      // complete. This ensures the correct character is retrieved.\n      // This solution was used because:\n      // - The compositionend event's data property is unreliable, at least on Chromium\n      // - The last compositionupdate event's data property does not always accurately describe\n      //   the character, a counter example being Korean where an ending consonsant can move to\n      //   the following character if the following input is a vowel.\n      this._isSendingComposition = true;\n      setTimeout(() => {\n        // Ensure that the input has not already been sent\n        if (this._isSendingComposition) {\n          this._isSendingComposition = false;\n          let input;\n          // Add length of data already sent due to keydown event,\n          // otherwise input characters can be duplicated. (Issue #3191)\n          currentCompositionPosition.start += this._dataAlreadySent.length;\n          if (this._isComposing) {\n            // Use the end position to get the string if a new composition has started.\n            input = this._textarea.value.substring(currentCompositionPosition.start, currentCompositionPosition.end);\n          } else {\n            // Don't use the end position here in order to pick up any characters after the\n            // composition has finished, for example when typing a non-composition character\n            // (eg. 2) after a composition character.\n            input = this._textarea.value.substring(currentCompositionPosition.start);\n          }\n          if (input.length > 0) {\n            this._coreService.triggerDataEvent(input, true);\n          }\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * Apply any changes made to the textarea after the current event chain is allowed to complete.\n   * This should be called when not currently composing but a keydown event with the \"composition\n   * character\" (229) is triggered, in order to allow non-composition text to be entered when an\n   * IME is active.\n   */\n  private _handleAnyTextareaChanges(): void {\n    const oldValue = this._textarea.value;\n    setTimeout(() => {\n      // Ignore if a composition has started since the timeout\n      if (!this._isComposing) {\n        const newValue = this._textarea.value;\n\n        const diff = newValue.replace(oldValue, '');\n\n        this._dataAlreadySent = diff;\n\n        if (newValue.length > oldValue.length) {\n          this._coreService.triggerDataEvent(diff, true);\n        } else if (newValue.length < oldValue.length) {\n          this._coreService.triggerDataEvent(`${C0.DEL}`, true);\n        } else if ((newValue.length === oldValue.length) && (newValue !== oldValue)) {\n          this._coreService.triggerDataEvent(newValue, true);\n        }\n\n      }\n    }, 0);\n  }\n\n  /**\n   * Positions the composition view on top of the cursor and the textarea just below it (so the\n   * IME helper dialog is positioned correctly).\n   * @param dontRecurse Whether to use setTimeout to recursively trigger another update, this is\n   *   necessary as the IME events across browsers are not consistently triggered.\n   */\n  public updateCompositionElements(dontRecurse?: boolean): void {\n    if (!this._isComposing) {\n      return;\n    }\n\n    if (this._bufferService.buffer.isCursorInViewport) {\n      const cursorX = Math.min(this._bufferService.buffer.x, this._bufferService.cols - 1);\n\n      const cellHeight = this._renderService.dimensions.css.cell.height;\n      const cursorTop = this._bufferService.buffer.y * this._renderService.dimensions.css.cell.height;\n      const cursorLeft = cursorX * this._renderService.dimensions.css.cell.width;\n\n      this._compositionView.style.left = cursorLeft + 'px';\n      this._compositionView.style.top = cursorTop + 'px';\n      this._compositionView.style.height = cellHeight + 'px';\n      this._compositionView.style.lineHeight = cellHeight + 'px';\n      this._compositionView.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n      this._compositionView.style.fontSize = this._optionsService.rawOptions.fontSize + 'px';\n      // Sync the textarea to the exact position of the composition view so the IME knows where the\n      // text is.\n      const compositionViewBounds = this._compositionView.getBoundingClientRect();\n      this._textarea.style.left = cursorLeft + 'px';\n      this._textarea.style.top = cursorTop + 'px';\n      // Ensure the text area is at least 1x1, otherwise certain IMEs may break\n      this._textarea.style.width = Math.max(compositionViewBounds.width, 1) + 'px';\n      this._textarea.style.height = Math.max(compositionViewBounds.height, 1) + 'px';\n      this._textarea.style.lineHeight = compositionViewBounds.height + 'px';\n    }\n\n    if (!dontRecurse) {\n      setTimeout(() => this.updateCompositionElements(true), 0);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport function getCoordsRelativeToElement(window: Pick<Window, 'getComputedStyle'>, event: {clientX: number, clientY: number}, element: HTMLElement): [number, number] {\n  const rect = element.getBoundingClientRect();\n  const elementStyle = window.getComputedStyle(element);\n  const leftPadding = parseInt(elementStyle.getPropertyValue('padding-left'));\n  const topPadding = parseInt(elementStyle.getPropertyValue('padding-top'));\n  return [\n    event.clientX - rect.left - leftPadding,\n    event.clientY - rect.top - topPadding\n  ];\n}\n\n/**\n * Gets coordinates within the terminal for a particular mouse event. The result\n * is returned as an array in the form [x, y] instead of an object as it's a\n * little faster and this function is used in some low level code.\n * @param window The window object the element belongs to.\n * @param event The mouse event.\n * @param element The terminal's container element.\n * @param colCount The number of columns in the terminal.\n * @param rowCount The number of rows n the terminal.\n * @param hasValidCharSize Whether there is a valid character size available.\n * @param cssCellWidth The cell width device pixel render dimensions.\n * @param cssCellHeight The cell height device pixel render dimensions.\n * @param isSelection Whether the request is for the selection or not. This will\n * apply an offset to the x value such that the left half of the cell will\n * select that cell and the right half will select the next cell.\n */\nexport function getCoords(window: Pick<Window, 'getComputedStyle'>, event: Pick<MouseEvent, 'clientX' | 'clientY'>, element: HTMLElement, colCount: number, rowCount: number, hasValidCharSize: boolean, cssCellWidth: number, cssCellHeight: number, isSelection?: boolean): [number, number] | undefined {\n  // Coordinates cannot be measured if there are no valid\n  if (!hasValidCharSize) {\n    return undefined;\n  }\n\n  const coords = getCoordsRelativeToElement(window, event, element);\n  if (!coords) {\n    return undefined;\n  }\n\n  coords[0] = Math.ceil((coords[0] + (isSelection ? cssCellWidth / 2 : 0)) / cssCellWidth);\n  coords[1] = Math.ceil(coords[1] / cssCellHeight);\n\n  // Ensure coordinates are within the terminal viewport. Note that selections\n  // need an addition point of precision to cover the end point (as characters\n  // cover half of one char and half of the next).\n  coords[0] = Math.min(Math.max(coords[0], 1), colCount + (isSelection ? 1 : 0));\n  coords[1] = Math.min(Math.max(coords[1], 1), rowCount);\n\n  return coords;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { C0 } from 'common/data/EscapeSequences';\nimport { IBufferService } from 'common/services/Services';\n\nconst enum Direction {\n  UP = 'A',\n  DOWN = 'B',\n  RIGHT = 'C',\n  LEFT = 'D'\n}\n\n/**\n * Concatenates all the arrow sequences together.\n * Resets the starting row to an unwrapped row, moves to the requested row,\n * then moves to requested col.\n */\nexport function moveToCellSequence(targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startX = bufferService.buffer.x;\n  const startY = bufferService.buffer.y;\n\n  // The alt buffer should try to navigate between rows\n  if (!bufferService.buffer.hasScrollback) {\n    return resetStartingRow(startX, startY, targetX, targetY, bufferService, applicationCursor) +\n      moveToRequestedRow(startY, targetY, bufferService, applicationCursor) +\n      moveToRequestedCol(startX, startY, targetX, targetY, bufferService, applicationCursor);\n  }\n\n  // Only move horizontally for the normal buffer\n  let direction;\n  if (startY === targetY) {\n    direction = startX > targetX ? Direction.LEFT : Direction.RIGHT;\n    return repeat(Math.abs(startX - targetX), sequence(direction, applicationCursor));\n  }\n  direction = startY > targetY ? Direction.LEFT : Direction.RIGHT;\n  const rowDifference = Math.abs(startY - targetY);\n  const cellsToMove = colsFromRowEnd(startY > targetY ? targetX : startX, bufferService) +\n    (rowDifference - 1) * bufferService.cols + 1 /* wrap around 1 row */ +\n    colsFromRowBeginning(startY > targetY ? startX : targetX, bufferService);\n  return repeat(cellsToMove, sequence(direction, applicationCursor));\n}\n\n/**\n * Find the number of cols from a row beginning to a col.\n */\nfunction colsFromRowBeginning(currX: number, bufferService: IBufferService): number {\n  return currX - 1;\n}\n\n/**\n * Find the number of cols from a col to row end.\n */\nfunction colsFromRowEnd(currX: number, bufferService: IBufferService): number {\n  return bufferService.cols - currX;\n}\n\n/**\n * If the initial position of the cursor is on a row that is wrapped, move the\n * cursor up to the first row that is not wrapped to have accurate vertical\n * positioning.\n */\nfunction resetStartingRow(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length === 0) {\n    return '';\n  }\n  return repeat(bufferLine(\n    startX, startY, startX,\n    startY - wrappedRowsForRow(startY, bufferService), false, bufferService\n  ).length, sequence(Direction.LEFT, applicationCursor));\n}\n\n/**\n * Using the reset starting and ending row, move to the requested row,\n * ignoring wrapped rows\n */\nfunction moveToRequestedRow(startY: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  const rowsToMove = Math.abs(startRow - endRow) - wrappedRowsCount(startY, targetY, bufferService);\n\n  return repeat(rowsToMove, sequence(verticalDirection(startY, targetY), applicationCursor));\n}\n\n/**\n * Move to the requested col on the ending row\n */\nfunction moveToRequestedCol(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): string {\n  let startRow;\n  if (moveToRequestedRow(startY, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  const endRow = targetY;\n  const direction = horizontalDirection(startX, startY, targetX, targetY, bufferService, applicationCursor);\n\n  return repeat(bufferLine(\n    startX, startRow, targetX, endRow,\n    direction === Direction.RIGHT, bufferService\n  ).length, sequence(direction, applicationCursor));\n}\n\n/**\n * Utility functions\n */\n\n/**\n * Calculates the number of wrapped rows between the unwrapped starting and\n * ending rows. These rows need to ignored since the cursor skips over them.\n */\nfunction wrappedRowsCount(startY: number, targetY: number, bufferService: IBufferService): number {\n  let wrappedRows = 0;\n  const startRow = startY - wrappedRowsForRow(startY, bufferService);\n  const endRow = targetY - wrappedRowsForRow(targetY, bufferService);\n\n  for (let i = 0; i < Math.abs(startRow - endRow); i++) {\n    const direction = verticalDirection(startY, targetY) === Direction.UP ? -1 : 1;\n    const line = bufferService.buffer.lines.get(startRow + (direction * i));\n    if (line?.isWrapped) {\n      wrappedRows++;\n    }\n  }\n\n  return wrappedRows;\n}\n\n/**\n * Calculates the number of wrapped rows that make up a given row.\n * @param currentRow The row to determine how many wrapped rows make it up\n */\nfunction wrappedRowsForRow(currentRow: number, bufferService: IBufferService): number {\n  let rowCount = 0;\n  let line = bufferService.buffer.lines.get(currentRow);\n  let lineWraps = line?.isWrapped;\n\n  while (lineWraps && currentRow >= 0 && currentRow < bufferService.rows) {\n    rowCount++;\n    line = bufferService.buffer.lines.get(--currentRow);\n    lineWraps = line?.isWrapped;\n  }\n\n  return rowCount;\n}\n\n/**\n * Direction determiners\n */\n\n/**\n * Determines if the right or left arrow is needed\n */\nfunction horizontalDirection(startX: number, startY: number, targetX: number, targetY: number, bufferService: IBufferService, applicationCursor: boolean): Direction {\n  let startRow;\n  if (moveToRequestedRow(targetX, targetY, bufferService, applicationCursor).length > 0) {\n    startRow = targetY - wrappedRowsForRow(targetY, bufferService);\n  } else {\n    startRow = startY;\n  }\n\n  if ((startX < targetX &&\n    startRow <= targetY) || // down/right or same y/right\n    (startX >= targetX &&\n    startRow < targetY)) {  // down/left or same y/left\n    return Direction.RIGHT;\n  }\n  return Direction.LEFT;\n}\n\n/**\n * Determines if the up or down arrow is needed\n */\nfunction verticalDirection(startY: number, targetY: number): Direction {\n  return startY > targetY ? Direction.UP : Direction.DOWN;\n}\n\n/**\n * Constructs the string of chars in the buffer from a starting row and col\n * to an ending row and col\n * @param startCol The starting column position\n * @param startRow The starting row position\n * @param endCol The ending column position\n * @param endRow The ending row position\n * @param forward Direction to move\n */\nfunction bufferLine(\n  startCol: number,\n  startRow: number,\n  endCol: number,\n  endRow: number,\n  forward: boolean,\n  bufferService: IBufferService\n): string {\n  let currentCol = startCol;\n  let currentRow = startRow;\n  let bufferStr = '';\n\n  while (currentCol !== endCol || currentRow !== endRow) {\n    currentCol += forward ? 1 : -1;\n\n    if (forward && currentCol > bufferService.cols - 1) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, startCol, currentCol\n      );\n      currentCol = 0;\n      startCol = 0;\n      currentRow++;\n    } else if (!forward && currentCol < 0) {\n      bufferStr += bufferService.buffer.translateBufferLineToString(\n        currentRow, false, 0, startCol + 1\n      );\n      currentCol = bufferService.cols - 1;\n      startCol = currentCol;\n      currentRow--;\n    }\n  }\n\n  return bufferStr + bufferService.buffer.translateBufferLineToString(\n    currentRow, false, startCol, currentCol\n  );\n}\n\n/**\n * Constructs the escape sequence for clicking an arrow\n * @param direction The direction to move\n */\nfunction sequence(direction: Direction, applicationCursor: boolean): string {\n  const mod =  applicationCursor ? 'O' : '[';\n  return C0.ESC + mod + direction;\n}\n\n/**\n * Returns a string repeated a given number of times\n * Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\n * @param count The number of times to repeat the string\n * @param str The string that is to be repeated\n */\nfunction repeat(count: number, str: string): string {\n  count = Math.floor(count);\n  let rpt = '';\n  for (let i = 0; i < count; i++) {\n    rpt += str;\n  }\n  return rpt;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { DomRendererRowFactory, RowCss } from 'browser/renderer/dom/DomRendererRowFactory';\nimport { WidthCache } from 'browser/renderer/dom/WidthCache';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { createRenderDimensions } from 'browser/renderer/shared/RendererUtils';\nimport { IRenderDimensions, IRenderer, IRequestRedrawEvent } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { ILinkifier2, ILinkifierEvent, ReadonlyColorSet } from 'browser/Types';\nimport { color } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IBufferService, IInstantiationService, IOptionsService } from 'common/services/Services';\n\n\nconst TERMINAL_CLASS_PREFIX = 'xterm-dom-renderer-owner-';\nconst ROW_CONTAINER_CLASS = 'xterm-rows';\nconst FG_CLASS_PREFIX = 'xterm-fg-';\nconst BG_CLASS_PREFIX = 'xterm-bg-';\nconst FOCUS_CLASS = 'xterm-focus';\nconst SELECTION_CLASS = 'xterm-selection';\n\nlet nextTerminalId = 1;\n\n\n/**\n * A fallback renderer for when canvas is slow. This is not meant to be\n * particularly fast or feature complete, more just stable and usable for when\n * canvas is not an option.\n */\nexport class DomRenderer extends Disposable implements IRenderer {\n  private _rowFactory: DomRendererRowFactory;\n  private _terminalClass: number = nextTerminalId++;\n\n  private _themeStyleElement!: HTMLStyleElement;\n  private _dimensionsStyleElement!: HTMLStyleElement;\n  private _rowContainer: HTMLElement;\n  private _rowElements: HTMLElement[] = [];\n  private _selectionContainer: HTMLElement;\n  private _widthCache: WidthCache;\n\n  public dimensions: IRenderDimensions;\n\n  public readonly onRequestRedraw = this.register(new EventEmitter<IRequestRedrawEvent>()).event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _viewportElement: HTMLElement,\n    private readonly _linkifier2: ILinkifier2,\n    @IInstantiationService instantiationService: IInstantiationService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @IThemeService private readonly _themeService: IThemeService\n  ) {\n    super();\n    this._rowContainer = document.createElement('div');\n    this._rowContainer.classList.add(ROW_CONTAINER_CLASS);\n    this._rowContainer.style.lineHeight = 'normal';\n    this._rowContainer.setAttribute('aria-hidden', 'true');\n    this._refreshRowElements(this._bufferService.cols, this._bufferService.rows);\n    this._selectionContainer = document.createElement('div');\n    this._selectionContainer.classList.add(SELECTION_CLASS);\n    this._selectionContainer.setAttribute('aria-hidden', 'true');\n\n    this.dimensions = createRenderDimensions();\n    this._updateDimensions();\n    this.register(this._optionsService.onOptionChange(() => this._handleOptionsChanged()));\n\n    this.register(this._themeService.onChangeColors(e => this._injectCss(e)));\n    this._injectCss(this._themeService.colors);\n\n    this._rowFactory = instantiationService.createInstance(DomRendererRowFactory, document);\n\n    this._element.classList.add(TERMINAL_CLASS_PREFIX + this._terminalClass);\n    this._screenElement.appendChild(this._rowContainer);\n    this._screenElement.appendChild(this._selectionContainer);\n\n    this.register(this._linkifier2.onShowLinkUnderline(e => this._handleLinkHover(e)));\n    this.register(this._linkifier2.onHideLinkUnderline(e => this._handleLinkLeave(e)));\n\n    this.register(toDisposable(() => {\n      this._element.classList.remove(TERMINAL_CLASS_PREFIX + this._terminalClass);\n\n      // Outside influences such as React unmounts may manipulate the DOM before our disposal.\n      // https://github.com/xtermjs/xterm.js/issues/2960\n      this._rowContainer.remove();\n      this._selectionContainer.remove();\n      this._widthCache.dispose();\n      this._themeStyleElement.remove();\n      this._dimensionsStyleElement.remove();\n    }));\n\n    this._widthCache = new WidthCache(document);\n    this._widthCache.setFont(\n      this._optionsService.rawOptions.fontFamily,\n      this._optionsService.rawOptions.fontSize,\n      this._optionsService.rawOptions.fontWeight,\n      this._optionsService.rawOptions.fontWeightBold\n    );\n    this._setDefaultSpacing();\n  }\n\n  private _updateDimensions(): void {\n    const dpr = this._coreBrowserService.dpr;\n    this.dimensions.device.char.width = this._charSizeService.width * dpr;\n    this.dimensions.device.char.height = Math.ceil(this._charSizeService.height * dpr);\n    this.dimensions.device.cell.width = this.dimensions.device.char.width + Math.round(this._optionsService.rawOptions.letterSpacing);\n    this.dimensions.device.cell.height = Math.floor(this.dimensions.device.char.height * this._optionsService.rawOptions.lineHeight);\n    this.dimensions.device.char.left = 0;\n    this.dimensions.device.char.top = 0;\n    this.dimensions.device.canvas.width = this.dimensions.device.cell.width * this._bufferService.cols;\n    this.dimensions.device.canvas.height = this.dimensions.device.cell.height * this._bufferService.rows;\n    this.dimensions.css.canvas.width = Math.round(this.dimensions.device.canvas.width / dpr);\n    this.dimensions.css.canvas.height = Math.round(this.dimensions.device.canvas.height / dpr);\n    this.dimensions.css.cell.width = this.dimensions.css.canvas.width / this._bufferService.cols;\n    this.dimensions.css.cell.height = this.dimensions.css.canvas.height / this._bufferService.rows;\n\n    for (const element of this._rowElements) {\n      element.style.width = `${this.dimensions.css.canvas.width}px`;\n      element.style.height = `${this.dimensions.css.cell.height}px`;\n      element.style.lineHeight = `${this.dimensions.css.cell.height}px`;\n      // Make sure rows don't overflow onto following row\n      element.style.overflow = 'hidden';\n    }\n\n    if (!this._dimensionsStyleElement) {\n      this._dimensionsStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._dimensionsStyleElement);\n    }\n\n    const styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} span {` +\n      ` display: inline-block;` +   // TODO: find workaround for inline-block (creates ~20% render penalty)\n      ` height: 100%;` +\n      ` vertical-align: top;` +\n      `}`;\n\n    this._dimensionsStyleElement.textContent = styles;\n\n    this._selectionContainer.style.height = this._viewportElement.style.height;\n    this._screenElement.style.width = `${this.dimensions.css.canvas.width}px`;\n    this._screenElement.style.height = `${this.dimensions.css.canvas.height}px`;\n  }\n\n  private _injectCss(colors: ReadonlyColorSet): void {\n    if (!this._themeStyleElement) {\n      this._themeStyleElement = document.createElement('style');\n      this._screenElement.appendChild(this._themeStyleElement);\n    }\n\n    // Base CSS\n    let styles =\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} {` +\n      ` color: ${colors.foreground.css};` +\n      ` font-family: ${this._optionsService.rawOptions.fontFamily};` +\n      ` font-size: ${this._optionsService.rawOptions.fontSize}px;` +\n      ` font-kerning: none;` +\n      ` white-space: pre` +\n      `}`;\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .xterm-dim {` +\n      ` color: ${color.multiplyOpacity(colors.foreground, 0.5).css};` +\n      `}`;\n    // Text styles\n    styles +=\n      `${this._terminalSelector} span:not(.${RowCss.BOLD_CLASS}) {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeight};` +\n      `}` +\n      `${this._terminalSelector} span.${RowCss.BOLD_CLASS} {` +\n      ` font-weight: ${this._optionsService.rawOptions.fontWeightBold};` +\n      `}` +\n      `${this._terminalSelector} span.${RowCss.ITALIC_CLASS} {` +\n      ` font-style: italic;` +\n      `}`;\n    // Blink animation\n    styles +=\n      `@keyframes blink_box_shadow` + `_` + this._terminalClass + ` {` +\n      ` 50% {` +\n      `  border-bottom-style: hidden;` +\n      ` }` +\n      `}`;\n    styles +=\n      `@keyframes blink_block` + `_` + this._terminalClass + ` {` +\n      ` 0% {` +\n      `  background-color: ${colors.cursor.css};` +\n      `  color: ${colors.cursorAccent.css};` +\n      ` }` +\n      ` 50% {` +\n      `  background-color: inherit;` +\n      `  color: ${colors.cursor.css};` +\n      ` }` +\n      `}`;\n    // Cursor\n    styles +=\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_BLINK_CLASS}:not(.${RowCss.CURSOR_STYLE_BLOCK_CLASS}) {` +\n      ` animation: blink_box_shadow` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS}.${FOCUS_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_BLINK_CLASS}.${RowCss.CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` animation: blink_block` + `_` + this._terminalClass + ` 1s step-end infinite;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_BLOCK_CLASS} {` +\n      ` background-color: ${colors.cursor.css};` +\n      ` color: ${colors.cursorAccent.css};` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_OUTLINE_CLASS} {` +\n      ` outline: 1px solid ${colors.cursor.css};` +\n      ` outline-offset: -1px;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_BAR_CLASS} {` +\n      ` box-shadow: ${this._optionsService.rawOptions.cursorWidth}px 0 0 ${colors.cursor.css} inset;` +\n      `}` +\n      `${this._terminalSelector} .${ROW_CONTAINER_CLASS} .${RowCss.CURSOR_CLASS}.${RowCss.CURSOR_STYLE_UNDERLINE_CLASS} {` +\n      ` border-bottom: 1px ${colors.cursor.css};` +\n      ` border-bottom-style: solid;` +\n      ` height: calc(100% - 1px);` +\n      `}`;\n    // Selection\n    styles +=\n      `${this._terminalSelector} .${SELECTION_CLASS} {` +\n      ` position: absolute;` +\n      ` top: 0;` +\n      ` left: 0;` +\n      ` z-index: 1;` +\n      ` pointer-events: none;` +\n      `}` +\n      `${this._terminalSelector}.focus .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionBackgroundOpaque.css};` +\n      `}` +\n      `${this._terminalSelector} .${SELECTION_CLASS} div {` +\n      ` position: absolute;` +\n      ` background-color: ${colors.selectionInactiveBackgroundOpaque.css};` +\n      `}`;\n    // Colors\n    for (const [i, c] of colors.ansi.entries()) {\n      styles +=\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i} { color: ${c.css}; }` +\n        `${this._terminalSelector} .${FG_CLASS_PREFIX}${i}.${RowCss.DIM_CLASS} { color: ${color.multiplyOpacity(c, 0.5).css}; }` +\n        `${this._terminalSelector} .${BG_CLASS_PREFIX}${i} { background-color: ${c.css}; }`;\n    }\n    styles +=\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { color: ${color.opaque(colors.background).css}; }` +\n      `${this._terminalSelector} .${FG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR}.${RowCss.DIM_CLASS} { color: ${color.multiplyOpacity(color.opaque(colors.background), 0.5).css}; }` +\n      `${this._terminalSelector} .${BG_CLASS_PREFIX}${INVERTED_DEFAULT_COLOR} { background-color: ${colors.foreground.css}; }`;\n\n    this._themeStyleElement.textContent = styles;\n  }\n\n  /**\n   * default letter spacing\n   * Due to rounding issues in dimensions dpr calc glyph might render\n   * slightly too wide or too narrow. The method corrects the stacking offsets\n   * by applying a default letter-spacing for all chars.\n   * The value gets passed to the row factory to avoid setting this value again\n   * (render speedup is roughly 10%).\n   */\n  private _setDefaultSpacing(): void {\n    // measure same char as in CharSizeService to get the base deviation\n    const spacing = this.dimensions.css.cell.width - this._widthCache.get('W', false, false);\n    this._rowContainer.style.letterSpacing = `${spacing}px`;\n    this._rowFactory.defaultSpacing = spacing;\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    this._updateDimensions();\n    this._widthCache.clear();\n    this._setDefaultSpacing();\n  }\n\n  private _refreshRowElements(cols: number, rows: number): void {\n    // Add missing elements\n    for (let i = this._rowElements.length; i <= rows; i++) {\n      const row = document.createElement('div');\n      this._rowContainer.appendChild(row);\n      this._rowElements.push(row);\n    }\n    // Remove excess elements\n    while (this._rowElements.length > rows) {\n      this._rowContainer.removeChild(this._rowElements.pop()!);\n    }\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    this._refreshRowElements(cols, rows);\n    this._updateDimensions();\n  }\n\n  public handleCharSizeChanged(): void {\n    this._updateDimensions();\n    this._widthCache.clear();\n    this._setDefaultSpacing();\n  }\n\n  public handleBlur(): void {\n    this._rowContainer.classList.remove(FOCUS_CLASS);\n  }\n\n  public handleFocus(): void {\n    this._rowContainer.classList.add(FOCUS_CLASS);\n    this.renderRows(this._bufferService.buffer.y, this._bufferService.buffer.y);\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    // Remove all selections\n    this._selectionContainer.replaceChildren();\n    this._rowFactory.handleSelectionChanged(start, end, columnSelectMode);\n    this.renderRows(0, this._bufferService.rows - 1);\n\n    // Selection does not exist\n    if (!start || !end) {\n      return;\n    }\n\n    // Translate from buffer position to viewport position\n    const viewportStartRow = start[1] - this._bufferService.buffer.ydisp;\n    const viewportEndRow = end[1] - this._bufferService.buffer.ydisp;\n    const viewportCappedStartRow = Math.max(viewportStartRow, 0);\n    const viewportCappedEndRow = Math.min(viewportEndRow, this._bufferService.rows - 1);\n\n    // No need to draw the selection\n    if (viewportCappedStartRow >= this._bufferService.rows || viewportCappedEndRow < 0) {\n      return;\n    }\n\n    // Create the selections\n    const documentFragment = document.createDocumentFragment();\n\n    if (columnSelectMode) {\n      const isXFlipped = start[0] > end[0];\n      documentFragment.appendChild(\n        this._createSelectionElement(viewportCappedStartRow, isXFlipped ? end[0] : start[0], isXFlipped ? start[0] : end[0], viewportCappedEndRow - viewportCappedStartRow + 1)\n      );\n    } else {\n      // Draw first row\n      const startCol = viewportStartRow === viewportCappedStartRow ? start[0] : 0;\n      const endCol = viewportCappedStartRow === viewportEndRow ? end[0] : this._bufferService.cols;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow, startCol, endCol));\n      // Draw middle rows\n      const middleRowsCount = viewportCappedEndRow - viewportCappedStartRow - 1;\n      documentFragment.appendChild(this._createSelectionElement(viewportCappedStartRow + 1, 0, this._bufferService.cols, middleRowsCount));\n      // Draw final row\n      if (viewportCappedStartRow !== viewportCappedEndRow) {\n        // Only draw viewportEndRow if it's not the same as viewporttartRow\n        const endCol = viewportEndRow === viewportCappedEndRow ? end[0] : this._bufferService.cols;\n        documentFragment.appendChild(this._createSelectionElement(viewportCappedEndRow, 0, endCol));\n      }\n    }\n    this._selectionContainer.appendChild(documentFragment);\n  }\n\n  /**\n   * Creates a selection element at the specified position.\n   * @param row The row of the selection.\n   * @param colStart The start column.\n   * @param colEnd The end columns.\n   */\n  private _createSelectionElement(row: number, colStart: number, colEnd: number, rowCount: number = 1): HTMLElement {\n    const element = document.createElement('div');\n    element.style.height = `${rowCount * this.dimensions.css.cell.height}px`;\n    element.style.top = `${row * this.dimensions.css.cell.height}px`;\n    element.style.left = `${colStart * this.dimensions.css.cell.width}px`;\n    element.style.width = `${this.dimensions.css.cell.width * (colEnd - colStart)}px`;\n    return element;\n  }\n\n  public handleCursorMove(): void {\n    // No-op, the cursor is drawn when rows are drawn\n  }\n\n  private _handleOptionsChanged(): void {\n    // Force a refresh\n    this._updateDimensions();\n    // Refresh CSS\n    this._injectCss(this._themeService.colors);\n    // update spacing cache\n    this._widthCache.setFont(\n      this._optionsService.rawOptions.fontFamily,\n      this._optionsService.rawOptions.fontSize,\n      this._optionsService.rawOptions.fontWeight,\n      this._optionsService.rawOptions.fontWeightBold\n    );\n    this._setDefaultSpacing();\n  }\n\n  public clear(): void {\n    for (const e of this._rowElements) {\n      /**\n       * NOTE: This used to be `e.innerText = '';` but that doesn't work when using `jsdom` and\n       * `@testing-library/react`\n       *\n       * references:\n       * - https://github.com/testing-library/react-testing-library/issues/1146\n       * - https://github.com/jsdom/jsdom/issues/1245\n       */\n      e.replaceChildren();\n    }\n  }\n\n  public renderRows(start: number, end: number): void {\n    const buffer = this._bufferService.buffer;\n    const cursorAbsoluteY = buffer.ybase + buffer.y;\n    const cursorX = Math.min(buffer.x, this._bufferService.cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n    const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n    const cursorInactiveStyle = this._optionsService.rawOptions.cursorInactiveStyle;\n\n    for (let y = start; y <= end; y++) {\n      const row = y + buffer.ydisp;\n      const rowElement = this._rowElements[y];\n      const lineData = buffer.lines.get(row);\n      if (!rowElement || !lineData) {\n        break;\n      }\n      rowElement.replaceChildren(\n        ...this._rowFactory.createRow(\n          lineData,\n          row,\n          row === cursorAbsoluteY,\n          cursorStyle,\n          cursorInactiveStyle,\n          cursorX,\n          cursorBlink,\n          this.dimensions.css.cell.width,\n          this._widthCache,\n          -1,\n          -1\n        )\n      );\n    }\n  }\n\n  private get _terminalSelector(): string {\n    return `.${TERMINAL_CLASS_PREFIX}${this._terminalClass}`;\n  }\n\n  private _handleLinkHover(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, true);\n  }\n\n  private _handleLinkLeave(e: ILinkifierEvent): void {\n    this._setCellUnderline(e.x1, e.x2, e.y1, e.y2, e.cols, false);\n  }\n\n  private _setCellUnderline(x: number, x2: number, y: number, y2: number, cols: number, enabled: boolean): void {\n    /**\n     * NOTE: The linkifier may send out of viewport y-values if:\n     * - negative y-value: the link started at a higher line\n     * - y-value >= maxY: the link ends at a line below viewport\n     *\n     * For negative y-values we can simply adjust x = 0,\n     * as higher up link start means, that everything from\n     * (0,0) is a link under top-down-left-right char progression\n     *\n     * Additionally there might be a small chance of out-of-sync x|y-values\n     * from a race condition of render updates vs. link event handler execution:\n     * - (sync) resize: chances terminal buffer in sync, schedules render update async\n     * - (async) link handler race condition: new buffer metrics, but still on old render state\n     * - (async) render update: brings term metrics and render state back in sync\n     */\n    // clip coords into viewport\n    if (y < 0) x = 0;\n    if (y2 < 0) x2 = 0;\n    const maxY = this._bufferService.rows - 1;\n    y = Math.max(Math.min(y, maxY), 0);\n    y2 = Math.max(Math.min(y2, maxY), 0);\n\n    cols = Math.min(cols, this._bufferService.cols);\n    const buffer = this._bufferService.buffer;\n    const cursorAbsoluteY = buffer.ybase + buffer.y;\n    const cursorX = Math.min(buffer.x, cols - 1);\n    const cursorBlink = this._optionsService.rawOptions.cursorBlink;\n    const cursorStyle = this._optionsService.rawOptions.cursorStyle;\n    const cursorInactiveStyle = this._optionsService.rawOptions.cursorInactiveStyle;\n\n    // refresh rows within link range\n    for (let i = y; i <= y2; ++i) {\n      const row = i + buffer.ydisp;\n      const rowElement = this._rowElements[i];\n      const bufferline = buffer.lines.get(row);\n      if (!rowElement || !bufferline) {\n        break;\n      }\n      rowElement.replaceChildren(\n        ...this._rowFactory.createRow(\n          bufferline,\n          row,\n          row === cursorAbsoluteY,\n          cursorStyle,\n          cursorInactiveStyle,\n          cursorX,\n          cursorBlink,\n          this.dimensions.css.cell.width,\n          this._widthCache,\n          enabled ? (i === y ? x : 0) : -1,\n          enabled ? ((i === y2 ? x2 : cols) - 1) : -1\n        )\n      );\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018, 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, IColor } from 'common/Types';\nimport { INVERTED_DEFAULT_COLOR } from 'browser/renderer/shared/Constants';\nimport { WHITESPACE_CELL_CHAR, Attributes } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { ICoreService, IDecorationService, IOptionsService } from 'common/services/Services';\nimport { color, rgba } from 'common/Color';\nimport { ICharacterJoinerService, ICoreBrowserService, IThemeService } from 'browser/services/Services';\nimport { JoinedCellData } from 'browser/services/CharacterJoinerService';\nimport { excludeFromContrastRatioDemands } from 'browser/renderer/shared/RendererUtils';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WidthCache } from 'browser/renderer/dom/WidthCache';\nimport { IColorContrastCache } from 'browser/Types';\n\n\nexport const enum RowCss {\n  BOLD_CLASS = 'xterm-bold',\n  DIM_CLASS = 'xterm-dim',\n  ITALIC_CLASS = 'xterm-italic',\n  UNDERLINE_CLASS = 'xterm-underline',\n  OVERLINE_CLASS = 'xterm-overline',\n  STRIKETHROUGH_CLASS = 'xterm-strikethrough',\n  CURSOR_CLASS = 'xterm-cursor',\n  CURSOR_BLINK_CLASS = 'xterm-cursor-blink',\n  CURSOR_STYLE_BLOCK_CLASS = 'xterm-cursor-block',\n  CURSOR_STYLE_OUTLINE_CLASS = 'xterm-cursor-outline',\n  CURSOR_STYLE_BAR_CLASS = 'xterm-cursor-bar',\n  CURSOR_STYLE_UNDERLINE_CLASS = 'xterm-cursor-underline'\n}\n\n\nexport class DomRendererRowFactory {\n  private _workCell: CellData = new CellData();\n\n  private _selectionStart: [number, number] | undefined;\n  private _selectionEnd: [number, number] | undefined;\n  private _columnSelectMode: boolean = false;\n\n  public defaultSpacing = 0;\n\n  constructor(\n    private readonly _document: Document,\n    @ICharacterJoinerService private readonly _characterJoinerService: ICharacterJoinerService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IDecorationService private readonly _decorationService: IDecorationService,\n    @IThemeService private readonly _themeService: IThemeService\n  ) {}\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionStart = start;\n    this._selectionEnd = end;\n    this._columnSelectMode = columnSelectMode;\n  }\n\n  public createRow(\n    lineData: IBufferLine,\n    row: number,\n    isCursorRow: boolean,\n    cursorStyle: string | undefined,\n    cursorInactiveStyle: string | undefined,\n    cursorX: number,\n    cursorBlink: boolean,\n    cellWidth: number,\n    widthCache: WidthCache,\n    linkStart: number,\n    linkEnd: number\n  ): HTMLSpanElement[] {\n\n    const elements: HTMLSpanElement[] = [];\n    const joinedRanges = this._characterJoinerService.getJoinedCharacters(row);\n    const colors = this._themeService.colors;\n\n    let lineLength = lineData.getNoBgTrimmedLength();\n    if (isCursorRow && lineLength < cursorX + 1) {\n      lineLength = cursorX + 1;\n    }\n\n    let charElement: HTMLSpanElement | undefined;\n    let cellAmount = 0;\n    let text = '';\n    let oldBg = 0;\n    let oldFg = 0;\n    let oldExt = 0;\n    let oldLinkHover: number | boolean = false;\n    let oldSpacing = 0;\n    let oldIsInSelection: boolean = false;\n    let spacing = 0;\n    const classes: string[] = [];\n\n    const hasHover = linkStart !== -1 && linkEnd !== -1;\n\n    for (let x = 0; x < lineLength; x++) {\n      lineData.loadCell(x, this._workCell);\n      let width = this._workCell.getWidth();\n\n      // The character to the left is a wide character, drawing is owned by the char at x-1\n      if (width === 0) {\n        continue;\n      }\n\n      // If true, indicates that the current character(s) to draw were joined.\n      let isJoined = false;\n      let lastCharX = x;\n\n      // Process any joined character ranges as needed. Because of how the\n      // ranges are produced, we know that they are valid for the characters\n      // and attributes of our input.\n      let cell = this._workCell;\n      if (joinedRanges.length > 0 && x === joinedRanges[0][0]) {\n        isJoined = true;\n        const range = joinedRanges.shift()!;\n\n        // We already know the exact start and end column of the joined range,\n        // so we get the string and width representing it directly\n        cell = new JoinedCellData(\n          this._workCell,\n          lineData.translateToString(true, range[0], range[1]),\n          range[1] - range[0]\n        );\n\n        // Skip over the cells occupied by this range in the loop\n        lastCharX = range[1] - 1;\n\n        // Recalculate width\n        width = cell.getWidth();\n      }\n\n      const isInSelection = this._isCellInSelection(x, row);\n      const isCursorCell = isCursorRow && x === cursorX;\n      const isLinkHover = hasHover && x >= linkStart && x <= linkEnd;\n\n      let isDecorated = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        isDecorated = true;\n      });\n\n      // get chars to render for this cell\n      let chars = cell.getChars() || WHITESPACE_CELL_CHAR;\n      if (chars === ' ' && (cell.isUnderline() || cell.isOverline())) {\n        chars = '\\xa0';\n      }\n\n      // lookup char render width and calc spacing\n      spacing = width * cellWidth - widthCache.get(chars, cell.isBold(), cell.isItalic());\n\n      if (!charElement) {\n        charElement = this._document.createElement('span');\n      } else {\n        /**\n         * chars can only be merged on existing span if:\n         * - existing span only contains mergeable chars (cellAmount != 0)\n         * - bg did not change (or both are in selection)\n         * - fg did not change (or both are in selection and selection fg is set)\n         * - ext did not change\n         * - underline from hover state did not change\n         * - cell content renders to same letter-spacing\n         * - cell is not cursor\n         */\n        if (\n          cellAmount\n          && (\n            (isInSelection && oldIsInSelection)\n            || (!isInSelection && !oldIsInSelection && cell.bg === oldBg)\n          )\n          && (\n            (isInSelection && oldIsInSelection && colors.selectionForeground)\n            || cell.fg === oldFg\n          )\n          && cell.extended.ext === oldExt\n          && isLinkHover === oldLinkHover\n          && spacing === oldSpacing\n          && !isCursorCell\n          && !isJoined\n          && !isDecorated\n        ) {\n          // no span alterations, thus only account chars skipping all code below\n          text += chars;\n          cellAmount++;\n          continue;\n        } else {\n          /**\n           * cannot merge:\n           * - apply left-over text to old span\n           * - create new span, reset state holders cellAmount & text\n           */\n          if (cellAmount) {\n            charElement.textContent = text;\n          }\n          charElement = this._document.createElement('span');\n          cellAmount = 0;\n          text = '';\n        }\n      }\n      // preserve conditions for next merger eval round\n      oldBg = cell.bg;\n      oldFg = cell.fg;\n      oldExt = cell.extended.ext;\n      oldLinkHover = isLinkHover;\n      oldSpacing = spacing;\n      oldIsInSelection = isInSelection;\n\n      if (isJoined) {\n        // The DOM renderer colors the background of the cursor but for ligatures all cells are\n        // joined. The workaround here is to show a cursor around the whole ligature so it shows up,\n        // the cursor looks the same when on any character of the ligature though\n        if (cursorX >= x && cursorX <= lastCharX) {\n          cursorX = x;\n        }\n      }\n\n      if (!this._coreService.isCursorHidden && isCursorCell) {\n        classes.push(RowCss.CURSOR_CLASS);\n        if (this._coreBrowserService.isFocused) {\n          if (cursorBlink) {\n            classes.push(RowCss.CURSOR_BLINK_CLASS);\n          }\n          classes.push(\n            cursorStyle === 'bar'\n              ? RowCss.CURSOR_STYLE_BAR_CLASS\n              : cursorStyle === 'underline'\n                ? RowCss.CURSOR_STYLE_UNDERLINE_CLASS\n                : RowCss.CURSOR_STYLE_BLOCK_CLASS\n          );\n        } else {\n          if (cursorInactiveStyle) {\n            switch (cursorInactiveStyle) {\n              case 'outline':\n                classes.push(RowCss.CURSOR_STYLE_OUTLINE_CLASS);\n                break;\n              case 'block':\n                classes.push(RowCss.CURSOR_STYLE_BLOCK_CLASS);\n                break;\n              case 'bar':\n                classes.push(RowCss.CURSOR_STYLE_BAR_CLASS);\n                break;\n              case 'underline':\n                classes.push(RowCss.CURSOR_STYLE_UNDERLINE_CLASS);\n                break;\n              default:\n                break;\n            }\n          }\n        }\n      }\n\n      if (cell.isBold()) {\n        classes.push(RowCss.BOLD_CLASS);\n      }\n\n      if (cell.isItalic()) {\n        classes.push(RowCss.ITALIC_CLASS);\n      }\n\n      if (cell.isDim()) {\n        classes.push(RowCss.DIM_CLASS);\n      }\n\n      if (cell.isInvisible()) {\n        text = WHITESPACE_CELL_CHAR;\n      } else {\n        text = cell.getChars() || WHITESPACE_CELL_CHAR;\n      }\n\n      if (cell.isUnderline()) {\n        classes.push(`${RowCss.UNDERLINE_CLASS}-${cell.extended.underlineStyle}`);\n        if (text === ' ') {\n          text = '\\xa0'; // = &nbsp;\n        }\n        if (!cell.isUnderlineColorDefault()) {\n          if (cell.isUnderlineColorRGB()) {\n            charElement.style.textDecorationColor = `rgb(${AttributeData.toColorRGB(cell.getUnderlineColor()).join(',')})`;\n          } else {\n            let fg = cell.getUnderlineColor();\n            if (this._optionsService.rawOptions.drawBoldTextInBrightColors && cell.isBold() && fg < 8) {\n              fg += 8;\n            }\n            charElement.style.textDecorationColor = colors.ansi[fg].css;\n          }\n        }\n      }\n\n      if (cell.isOverline()) {\n        classes.push(RowCss.OVERLINE_CLASS);\n        if (text === ' ') {\n          text = '\\xa0'; // = &nbsp;\n        }\n      }\n\n      if (cell.isStrikethrough()) {\n        classes.push(RowCss.STRIKETHROUGH_CLASS);\n      }\n\n      // apply link hover underline late, effectively overrides any previous text-decoration\n      // settings\n      if (isLinkHover) {\n        charElement.style.textDecoration = 'underline';\n      }\n\n      let fg = cell.getFgColor();\n      let fgColorMode = cell.getFgColorMode();\n      let bg = cell.getBgColor();\n      let bgColorMode = cell.getBgColorMode();\n      const isInverse = !!cell.isInverse();\n      if (isInverse) {\n        const temp = fg;\n        fg = bg;\n        bg = temp;\n        const temp2 = fgColorMode;\n        fgColorMode = bgColorMode;\n        bgColorMode = temp2;\n      }\n\n      // Apply any decoration foreground/background overrides, this must happen after inverse has\n      // been applied\n      let bgOverride: IColor | undefined;\n      let fgOverride: IColor | undefined;\n      let isTop = false;\n      this._decorationService.forEachDecorationAtCell(x, row, undefined, d => {\n        if (d.options.layer !== 'top' && isTop) {\n          return;\n        }\n        if (d.backgroundColorRGB) {\n          bgColorMode = Attributes.CM_RGB;\n          bg = d.backgroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          bgOverride = d.backgroundColorRGB;\n        }\n        if (d.foregroundColorRGB) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = d.foregroundColorRGB.rgba >> 8 & 0xFFFFFF;\n          fgOverride = d.foregroundColorRGB;\n        }\n        isTop = d.options.layer === 'top';\n      });\n\n      // Apply selection\n      if (!isTop && isInSelection) {\n        // If in the selection, force the element to be above the selection to improve contrast and\n        // support opaque selections. The applies background is not actually needed here as\n        // selection is drawn in a seperate container, the main purpose of this to ensuring minimum\n        // contrast ratio\n        bgOverride = this._coreBrowserService.isFocused ? colors.selectionBackgroundOpaque : colors.selectionInactiveBackgroundOpaque;\n        bg = bgOverride.rgba >> 8 & 0xFFFFFF;\n        bgColorMode = Attributes.CM_RGB;\n        // Since an opaque selection is being rendered, the selection pretends to be a decoration to\n        // ensure text is drawn above the selection.\n        isTop = true;\n        // Apply selection foreground if applicable\n        if (colors.selectionForeground) {\n          fgColorMode = Attributes.CM_RGB;\n          fg = colors.selectionForeground.rgba >> 8 & 0xFFFFFF;\n          fgOverride = colors.selectionForeground;\n        }\n      }\n\n      // If it's a top decoration, render above the selection\n      if (isTop) {\n        classes.push('xterm-decoration-top');\n      }\n\n      // Background\n      let resolvedBg: IColor;\n      switch (bgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          resolvedBg = colors.ansi[bg];\n          classes.push(`xterm-bg-${bg}`);\n          break;\n        case Attributes.CM_RGB:\n          resolvedBg = rgba.toColor(bg >> 16, bg >> 8 & 0xFF, bg & 0xFF);\n          this._addStyle(charElement, `background-color:#${padStart((bg >>> 0).toString(16), '0', 6)}`);\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (isInverse) {\n            resolvedBg = colors.foreground;\n            classes.push(`xterm-bg-${INVERTED_DEFAULT_COLOR}`);\n          } else {\n            resolvedBg = colors.background;\n          }\n      }\n\n      // If there is no background override by now it's the original color, so apply dim if needed\n      if (!bgOverride) {\n        if (cell.isDim()) {\n          bgOverride = color.multiplyOpacity(resolvedBg, 0.5);\n        }\n      }\n\n      // Foreground\n      switch (fgColorMode) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:\n          if (cell.isBold() && fg < 8 && this._optionsService.rawOptions.drawBoldTextInBrightColors) {\n            fg += 8;\n          }\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.ansi[fg], cell, bgOverride, undefined)) {\n            classes.push(`xterm-fg-${fg}`);\n          }\n          break;\n        case Attributes.CM_RGB:\n          const color = rgba.toColor(\n            (fg >> 16) & 0xFF,\n            (fg >>  8) & 0xFF,\n            (fg      ) & 0xFF\n          );\n          if (!this._applyMinimumContrast(charElement, resolvedBg, color, cell, bgOverride, fgOverride)) {\n            this._addStyle(charElement, `color:#${padStart(fg.toString(16), '0', 6)}`);\n          }\n          break;\n        case Attributes.CM_DEFAULT:\n        default:\n          if (!this._applyMinimumContrast(charElement, resolvedBg, colors.foreground, cell, bgOverride, undefined)) {\n            if (isInverse) {\n              classes.push(`xterm-fg-${INVERTED_DEFAULT_COLOR}`);\n            }\n          }\n      }\n\n      // apply CSS classes\n      // slightly faster than using classList by omitting\n      // checks for doubled entries (code above should not have doublets)\n      if (classes.length) {\n        charElement.className = classes.join(' ');\n        classes.length = 0;\n      }\n\n      // exclude conditions for cell merging - never merge these\n      if (!isCursorCell && !isJoined && !isDecorated) {\n        cellAmount++;\n      } else {\n        charElement.textContent = text;\n      }\n      // apply letter-spacing rule\n      if (spacing !== this.defaultSpacing) {\n        charElement.style.letterSpacing = `${spacing}px`;\n      }\n\n      elements.push(charElement);\n      x = lastCharX;\n    }\n\n    // postfix text of last merged span\n    if (charElement && cellAmount) {\n      charElement.textContent = text;\n    }\n\n    return elements;\n  }\n\n  private _applyMinimumContrast(element: HTMLElement, bg: IColor, fg: IColor, cell: ICellData, bgOverride: IColor | undefined, fgOverride: IColor | undefined): boolean {\n    if (this._optionsService.rawOptions.minimumContrastRatio === 1 || excludeFromContrastRatioDemands(cell.getCode())) {\n      return false;\n    }\n\n    // Try get from cache first, only use the cache when there are no decoration overrides\n    const cache = this._getContrastCache(cell);\n    let adjustedColor: IColor | undefined | null = undefined;\n    if (!bgOverride && !fgOverride) {\n      adjustedColor = cache.getColor(bg.rgba, fg.rgba);\n    }\n\n    // Calculate and store in cache\n    if (adjustedColor === undefined) {\n      // Dim cells only require half the contrast, otherwise they wouldn't be distinguishable from\n      // non-dim cells\n      const ratio = this._optionsService.rawOptions.minimumContrastRatio / (cell.isDim() ? 2 : 1);\n      adjustedColor = color.ensureContrastRatio(bgOverride || bg, fgOverride || fg, ratio);\n      cache.setColor((bgOverride || bg).rgba, (fgOverride || fg).rgba, adjustedColor ?? null);\n    }\n\n    if (adjustedColor) {\n      this._addStyle(element, `color:${adjustedColor.css}`);\n      return true;\n    }\n\n    return false;\n  }\n\n  private _getContrastCache(cell: ICellData): IColorContrastCache {\n    if (cell.isDim()) {\n      return this._themeService.colors.halfContrastCache;\n    }\n    return this._themeService.colors.contrastCache;\n  }\n\n  private _addStyle(element: HTMLElement, style: string): void {\n    element.setAttribute('style', `${element.getAttribute('style') || ''}${style};`);\n  }\n\n  private _isCellInSelection(x: number, y: number): boolean {\n    const start = this._selectionStart;\n    const end = this._selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    if (this._columnSelectMode) {\n      if (start[0] <= end[0]) {\n        return x >= start[0] && y >= start[1] &&\n          x < end[0] && y <= end[1];\n      }\n      return x < start[0] && y >= start[1] &&\n        x >= end[0] && y <= end[1];\n    }\n    return (y > start[1] && y < end[1]) ||\n        (start[1] === end[1] && y === start[1] && x >= start[0] && x < end[0]) ||\n        (start[1] < end[1] && y === end[1] && x < end[0]) ||\n        (start[1] < end[1] && y === start[1] && x >= start[0]);\n  }\n}\n\nfunction padStart(text: string, padChar: string, length: number): string {\n  while (text.length < length) {\n    text = padChar + text;\n  }\n  return text;\n}\n", "/**\n * Copyright (c) 2023 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { FontWeight } from 'common/services/Services';\n\n\nexport const enum WidthCacheSettings {\n  /** sentinel for unset values in flat cache */\n  FLAT_UNSET = -9999,\n  /** size of flat cache, size-1 equals highest codepoint handled by flat */\n  FLAT_SIZE = 256,\n  /** char repeat for measuring */\n  REPEAT = 32\n}\n\n\nconst enum FontVariant {\n  REGULAR = 0,\n  BOLD = 1,\n  ITALIC = 2,\n  BOLD_ITALIC = 3\n}\n\n\nexport class WidthCache implements IDisposable {\n  // flat cache for regular variant up to CacheSettings.FLAT_SIZE\n  // NOTE: ~4x faster access than holey (serving >>80% of terminal content)\n  //       It has a small memory footprint (only 1MB for full BMP caching),\n  //       still the sweet spot is not reached before touching 32k different codepoints,\n  //       thus we store the remaining <<20% of terminal data in a holey structure.\n  protected _flat = new Float32Array(WidthCacheSettings.FLAT_SIZE);\n\n  // holey cache for bold, italic and bold&italic for any string\n  // FIXME: can grow really big over time (~8.5 MB for full BMP caching),\n  //        so a shared API across terminals is needed\n  protected _holey: Map<string, number> | undefined;\n\n  private _font = '';\n  private _fontSize = 0;\n  private _weight: FontWeight = 'normal';\n  private _weightBold: FontWeight = 'bold';\n  private _container: HTMLDivElement;\n  private _measureElements: HTMLSpanElement[] = [];\n\n  constructor(_document: Document) {\n    this._container = _document.createElement('div');\n    this._container.style.position = 'absolute';\n    this._container.style.top = '-50000px';\n    this._container.style.width = '50000px';\n    // SP should stack in spans\n    this._container.style.whiteSpace = 'pre';\n    // avoid undercuts in non-monospace fonts from kerning\n    this._container.style.fontKerning = 'none';\n\n    const regular = _document.createElement('span');\n\n    const bold = _document.createElement('span');\n    bold.style.fontWeight = 'bold';\n\n    const italic = _document.createElement('span');\n    italic.style.fontStyle = 'italic';\n\n    const boldItalic = _document.createElement('span');\n    boldItalic.style.fontWeight = 'bold';\n    boldItalic.style.fontStyle = 'italic';\n\n    // NOTE: must be in order of FontVariant\n    this._measureElements = [regular, bold, italic, boldItalic];\n    this._container.appendChild(regular);\n    this._container.appendChild(bold);\n    this._container.appendChild(italic);\n    this._container.appendChild(boldItalic);\n\n    _document.body.appendChild(this._container);\n\n    this.clear();\n  }\n\n  public dispose(): void {\n    this._container.remove();           // remove elements from DOM\n    this._measureElements.length = 0;   // release element refs\n    this._holey = undefined;            // free cache memory via GC\n  }\n\n  /**\n   * Clear the width cache.\n   */\n  public clear(): void {\n    this._flat.fill(WidthCacheSettings.FLAT_UNSET);\n    // .clear() has some overhead, re-assign instead (>3 times faster)\n    this._holey = new Map<string, number>();\n  }\n\n  /**\n   * Set the font for measuring.\n   * Must be called for any changes on font settings.\n   * Also clears the cache.\n   */\n  public setFont(font: string, fontSize: number, weight: FontWeight, weightBold: FontWeight): void {\n    // skip if nothing changed\n    if (font === this._font\n      && fontSize === this._fontSize\n      && weight === this._weight\n      && weightBold === this._weightBold\n    ) {\n      return;\n    }\n\n    this._font = font;\n    this._fontSize = fontSize;\n    this._weight = weight;\n    this._weightBold = weightBold;\n\n    this._container.style.fontFamily = this._font;\n    this._container.style.fontSize = `${this._fontSize}px`;\n    this._measureElements[FontVariant.REGULAR].style.fontWeight = `${weight}`;\n    this._measureElements[FontVariant.BOLD].style.fontWeight = `${weightBold}`;\n    this._measureElements[FontVariant.ITALIC].style.fontWeight = `${weight}`;\n    this._measureElements[FontVariant.BOLD_ITALIC].style.fontWeight = `${weightBold}`;\n\n    this.clear();\n  }\n\n  /**\n   * Get the render width for cell content `c` with current font settings.\n   * `variant` denotes the font variant to be used.\n   */\n  public get(c: string, bold: boolean | number, italic: boolean | number): number {\n    let cp = 0;\n    if (!bold && !italic && c.length === 1 && (cp = c.charCodeAt(0)) < WidthCacheSettings.FLAT_SIZE) {\n      return this._flat[cp] !== WidthCacheSettings.FLAT_UNSET\n        ? this._flat[cp]\n        : (this._flat[cp] = this._measure(c, 0));\n    }\n    let key = c;\n    if (bold) key += 'B';\n    if (italic) key += 'I';\n    let width = this._holey!.get(key);\n    if (width === undefined) {\n      let variant = 0;\n      if (bold) variant |= FontVariant.BOLD;\n      if (italic) variant |= FontVariant.ITALIC;\n      width = this._measure(c, variant);\n      this._holey!.set(key, width);\n    }\n    return width;\n  }\n\n  protected _measure(c: string, variant: FontVariant): number {\n    const el = this._measureElements[variant];\n    el.textContent = c.repeat(WidthCacheSettings.REPEAT);\n    return el.offsetWidth / WidthCacheSettings.REPEAT;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isFirefox, isLegacyEdge } from 'common/Platform';\n\nexport const INVERTED_DEFAULT_COLOR = 257;\n\nexport const DIM_OPACITY = 0.5;\n// The text baseline is set conditionally by browser. Using 'ideographic' for Firefox or Legacy Edge\n// would result in truncated text (Issue 3353). Using 'bottom' for Chrome would result in slightly\n// unaligned Powerline fonts (PR 3356#issuecomment-850928179).\nexport const TEXT_BASELINE: CanvasTextBaseline = isFirefox || isLegacyEdge ? 'bottom' : 'ideographic';\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDimensions, IRenderDimensions } from 'browser/renderer/shared/Types';\n\nexport function throwIfFalsy<T>(value: T | undefined | null): T {\n  if (!value) {\n    throw new Error('value must not be falsy');\n  }\n  return value;\n}\n\nexport function isPowerlineGlyph(codepoint: number): boolean {\n  // Only return true for Powerline symbols which require\n  // different padding and should be excluded from minimum contrast\n  // ratio standards\n  return 0xE0A4 <= codepoint && codepoint <= 0xE0D6;\n}\n\nexport function isRestrictedPowerlineGlyph(codepoint: number): boolean {\n  return 0xE0B0 <= codepoint && codepoint <= 0xE0B7;\n}\n\nfunction isBoxOrBlockGlyph(codepoint: number): boolean {\n  return 0x2500 <= codepoint && codepoint <= 0x259F;\n}\n\nexport function excludeFromContrastRatioDemands(codepoint: number): boolean {\n  return isPowerlineGlyph(codepoint) || isBoxOrBlockGlyph(codepoint);\n}\n\nexport function createRenderDimensions(): IRenderDimensions {\n  return {\n    css: {\n      canvas: createDimension(),\n      cell: createDimension()\n    },\n    device: {\n      canvas: createDimension(),\n      cell: createDimension(),\n      char: {\n        width: 0,\n        height: 0,\n        left: 0,\n        top: 0\n      }\n    }\n  };\n}\n\nfunction createDimension(): IDimensions {\n  return {\n    width: 0,\n    height: 0\n  };\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferService } from 'common/services/Services';\n\n/**\n * Represents a selection within the buffer. This model only cares about column\n * and row coordinates, not wide characters.\n */\nexport class SelectionModel {\n  /**\n   * Whether select all is currently active.\n   */\n  public isSelectAllActive: boolean = false;\n\n  /**\n   * The minimal length of the selection from the start position. When double\n   * clicking on a word, the word will be selected which makes the selection\n   * start at the start of the word and makes this variable the length.\n   */\n  public selectionStartLength: number = 0;\n\n  /**\n   * The [x, y] position the selection starts at.\n   */\n  public selectionStart: [number, number] | undefined;\n\n  /**\n   * The [x, y] position the selection ends at.\n   */\n  public selectionEnd: [number, number] | undefined;\n\n  constructor(\n    private _bufferService: IBufferService\n  ) {\n  }\n\n  /**\n   * Clears the current selection.\n   */\n  public clearSelection(): void {\n    this.selectionStart = undefined;\n    this.selectionEnd = undefined;\n    this.isSelectAllActive = false;\n    this.selectionStartLength = 0;\n  }\n\n  /**\n   * The final selection start, taking into consideration select all.\n   */\n  public get finalSelectionStart(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [0, 0];\n    }\n\n    if (!this.selectionEnd || !this.selectionStart) {\n      return this.selectionStart;\n    }\n\n    return this.areSelectionValuesReversed() ? this.selectionEnd : this.selectionStart;\n  }\n\n  /**\n   * The final selection end, taking into consideration select all, double click\n   * word selection and triple click line selection.\n   */\n  public get finalSelectionEnd(): [number, number] | undefined {\n    if (this.isSelectAllActive) {\n      return [this._bufferService.cols, this._bufferService.buffer.ybase + this._bufferService.rows - 1];\n    }\n\n    if (!this.selectionStart) {\n      return undefined;\n    }\n\n    // Use the selection start + length if the end doesn't exist or they're reversed\n    if (!this.selectionEnd || this.areSelectionValuesReversed()) {\n      const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n      if (startPlusLength > this._bufferService.cols) {\n        // Ensure the trailing EOL isn't included when the selection ends on the right edge\n        if (startPlusLength % this._bufferService.cols === 0) {\n          return [this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols) - 1];\n        }\n        return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n      }\n      return [startPlusLength, this.selectionStart[1]];\n    }\n\n    // Ensure the the word/line is selected after a double/triple click\n    if (this.selectionStartLength) {\n      // Select the larger of the two when start and end are on the same line\n      if (this.selectionEnd[1] === this.selectionStart[1]) {\n        // Keep the whole wrapped word/line selected if the content wraps multiple lines\n        const startPlusLength = this.selectionStart[0] + this.selectionStartLength;\n        if (startPlusLength > this._bufferService.cols) {\n          return [startPlusLength % this._bufferService.cols, this.selectionStart[1] + Math.floor(startPlusLength / this._bufferService.cols)];\n        }\n        return [Math.max(startPlusLength, this.selectionEnd[0]), this.selectionEnd[1]];\n      }\n    }\n    return this.selectionEnd;\n  }\n\n  /**\n   * Returns whether the selection start and end are reversed.\n   */\n  public areSelectionValuesReversed(): boolean {\n    const start = this.selectionStart;\n    const end = this.selectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[1] > end[1] || (start[1] === end[1] && start[0] > end[0]);\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   * @returns Whether a refresh is necessary.\n   */\n  public handleTrim(amount: number): boolean {\n    // Adjust the selection position based on the trimmed amount.\n    if (this.selectionStart) {\n      this.selectionStart[1] -= amount;\n    }\n    if (this.selectionEnd) {\n      this.selectionEnd[1] -= amount;\n    }\n\n    // The selection has moved off the buffer, clear it.\n    if (this.selectionEnd && this.selectionEnd[1] < 0) {\n      this.clearSelection();\n      return true;\n    }\n\n    // If the selection start is trimmed, ensure the start column is 0.\n    if (this.selectionStart && this.selectionStart[1] < 0) {\n      this.selectionStart[1] = 0;\n    }\n    return false;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOptionsService } from 'common/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICharSizeService } from 'browser/services/Services';\nimport { Disposable } from 'common/Lifecycle';\n\n\nconst enum MeasureSettings {\n  REPEAT = 32\n}\n\n\nexport class CharSizeService extends Disposable implements ICharSizeService {\n  public serviceBrand: undefined;\n\n  public width: number = 0;\n  public height: number = 0;\n  private _measureStrategy: IMeasureStrategy;\n\n  public get hasValidSize(): boolean { return this.width > 0 && this.height > 0; }\n\n  private readonly _onCharSizeChange = this.register(new EventEmitter<void>());\n  public readonly onCharSizeChange = this._onCharSizeChange.event;\n\n  constructor(\n    document: Document,\n    parentElement: HTMLElement,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._measureStrategy = new DomMeasureStrategy(document, parentElement, this._optionsService);\n    this.register(this._optionsService.onMultipleOptionChange(['fontFamily', 'fontSize'], () => this.measure()));\n  }\n\n  public measure(): void {\n    const result = this._measureStrategy.measure();\n    if (result.width !== this.width || result.height !== this.height) {\n      this.width = result.width;\n      this.height = result.height;\n      this._onCharSizeChange.fire();\n    }\n  }\n}\n\ninterface IMeasureStrategy {\n  measure(): IReadonlyMeasureResult;\n}\n\ninterface IReadonlyMeasureResult {\n  readonly width: number;\n  readonly height: number;\n}\n\ninterface IMeasureResult {\n  width: number;\n  height: number;\n}\n\n// TODO: For supporting browsers we should also provide a CanvasCharDimensionsProvider that uses\n// ctx.measureText\nclass DomMeasureStrategy implements IMeasureStrategy {\n  private _result: IMeasureResult = { width: 0, height: 0 };\n  private _measureElement: HTMLElement;\n\n  constructor(\n    private _document: Document,\n    private _parentElement: HTMLElement,\n    private _optionsService: IOptionsService\n  ) {\n    this._measureElement = this._document.createElement('span');\n    this._measureElement.classList.add('xterm-char-measure-element');\n    this._measureElement.textContent = 'W'.repeat(MeasureSettings.REPEAT);\n    this._measureElement.setAttribute('aria-hidden', 'true');\n    this._measureElement.style.whiteSpace = 'pre';\n    this._measureElement.style.fontKerning = 'none';\n    this._parentElement.appendChild(this._measureElement);\n  }\n\n  public measure(): IReadonlyMeasureResult {\n    this._measureElement.style.fontFamily = this._optionsService.rawOptions.fontFamily;\n    this._measureElement.style.fontSize = `${this._optionsService.rawOptions.fontSize}px`;\n\n    // Note that this triggers a synchronous layout\n    const geometry = {\n      height: Number(this._measureElement.offsetHeight),\n      width: Number(this._measureElement.offsetWidth)\n    };\n\n    // If values are 0 then the element is likely currently display:none, in which case we should\n    // retain the previous value.\n    if (geometry.width !== 0 && geometry.height !== 0) {\n      this._result.width = geometry.width / MeasureSettings.REPEAT;\n      this._result.height = Math.ceil(geometry.height);\n    }\n\n    return this._result;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferLine, ICellData, CharData } from 'common/Types';\nimport { ICharacterJoiner } from 'browser/Types';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { WHITESPACE_CELL_CHAR, Content } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferService } from 'common/services/Services';\nimport { ICharacterJoinerService } from 'browser/services/Services';\n\nexport class JoinedCellData extends AttributeData implements ICellData {\n  private _width: number;\n  // .content carries no meaning for joined CellData, simply nullify it\n  // thus we have to overload all other .content accessors\n  public content: number = 0;\n  public fg: number;\n  public bg: number;\n  public combinedData: string = '';\n\n  constructor(firstCell: ICellData, chars: string, width: number) {\n    super();\n    this.fg = firstCell.fg;\n    this.bg = firstCell.bg;\n    this.combinedData = chars;\n    this._width = width;\n  }\n\n  public isCombined(): number {\n    // always mark joined cell data as combined\n    return Content.IS_COMBINED_MASK;\n  }\n\n  public getWidth(): number {\n    return this._width;\n  }\n\n  public getChars(): string {\n    return this.combinedData;\n  }\n\n  public getCode(): number {\n    // code always gets the highest possible fake codepoint (read as -1)\n    // this is needed as code is used by caches as identifier\n    return 0x1FFFFF;\n  }\n\n  public setFromCharData(value: CharData): void {\n    throw new Error('not implemented');\n  }\n\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n\nexport class CharacterJoinerService implements ICharacterJoinerService {\n  public serviceBrand: undefined;\n\n  private _characterJoiners: ICharacterJoiner[] = [];\n  private _nextCharacterJoinerId: number = 0;\n  private _workCell: CellData = new CellData();\n\n  constructor(\n    @IBufferService private _bufferService: IBufferService\n  ) { }\n\n  public register(handler: (text: string) => [number, number][]): number {\n    const joiner: ICharacterJoiner = {\n      id: this._nextCharacterJoinerId++,\n      handler\n    };\n\n    this._characterJoiners.push(joiner);\n    return joiner.id;\n  }\n\n  public deregister(joinerId: number): boolean {\n    for (let i = 0; i < this._characterJoiners.length; i++) {\n      if (this._characterJoiners[i].id === joinerId) {\n        this._characterJoiners.splice(i, 1);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public getJoinedCharacters(row: number): [number, number][] {\n    if (this._characterJoiners.length === 0) {\n      return [];\n    }\n\n    const line = this._bufferService.buffer.lines.get(row);\n    if (!line || line.length === 0) {\n      return [];\n    }\n\n    const ranges: [number, number][] = [];\n    const lineStr = line.translateToString(true);\n\n    // Because some cells can be represented by multiple javascript characters,\n    // we track the cell and the string indexes separately. This allows us to\n    // translate the string ranges we get from the joiners back into cell ranges\n    // for use when rendering\n    let rangeStartColumn = 0;\n    let currentStringIndex = 0;\n    let rangeStartStringIndex = 0;\n    let rangeAttrFG = line.getFg(0);\n    let rangeAttrBG = line.getBg(0);\n\n    for (let x = 0; x < line.getTrimmedLength(); x++) {\n      line.loadCell(x, this._workCell);\n\n      if (this._workCell.getWidth() === 0) {\n        // If this character is of width 0, skip it.\n        continue;\n      }\n\n      // End of range\n      if (this._workCell.fg !== rangeAttrFG || this._workCell.bg !== rangeAttrBG) {\n        // If we ended up with a sequence of more than one character,\n        // look for ranges to join.\n        if (x - rangeStartColumn > 1) {\n          const joinedRanges = this._getJoinedRanges(\n            lineStr,\n            rangeStartStringIndex,\n            currentStringIndex,\n            line,\n            rangeStartColumn\n          );\n          for (let i = 0; i < joinedRanges.length; i++) {\n            ranges.push(joinedRanges[i]);\n          }\n        }\n\n        // Reset our markers for a new range.\n        rangeStartColumn = x;\n        rangeStartStringIndex = currentStringIndex;\n        rangeAttrFG = this._workCell.fg;\n        rangeAttrBG = this._workCell.bg;\n      }\n\n      currentStringIndex += this._workCell.getChars().length || WHITESPACE_CELL_CHAR.length;\n    }\n\n    // Process any trailing ranges.\n    if (this._bufferService.cols - rangeStartColumn > 1) {\n      const joinedRanges = this._getJoinedRanges(\n        lineStr,\n        rangeStartStringIndex,\n        currentStringIndex,\n        line,\n        rangeStartColumn\n      );\n      for (let i = 0; i < joinedRanges.length; i++) {\n        ranges.push(joinedRanges[i]);\n      }\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Given a segment of a line of text, find all ranges of text that should be\n   * joined in a single rendering unit. Ranges are internally converted to\n   * column ranges, rather than string ranges.\n   * @param line String representation of the full line of text\n   * @param startIndex Start position of the range to search in the string (inclusive)\n   * @param endIndex End position of the range to search in the string (exclusive)\n   */\n  private _getJoinedRanges(line: string, startIndex: number, endIndex: number, lineData: IBufferLine, startCol: number): [number, number][] {\n    const text = line.substring(startIndex, endIndex);\n    // At this point we already know that there is at least one joiner so\n    // we can just pull its value and assign it directly rather than\n    // merging it into an empty array, which incurs unnecessary writes.\n    let allJoinedRanges: [number, number][] = [];\n    try {\n      allJoinedRanges = this._characterJoiners[0].handler(text);\n    } catch (error) {\n      console.error(error);\n    }\n    for (let i = 1; i < this._characterJoiners.length; i++) {\n      // We merge any overlapping ranges across the different joiners\n      try {\n        const joinerRanges = this._characterJoiners[i].handler(text);\n        for (let j = 0; j < joinerRanges.length; j++) {\n          CharacterJoinerService._mergeRanges(allJoinedRanges, joinerRanges[j]);\n        }\n      } catch (error) {\n        console.error(error);\n      }\n    }\n    this._stringRangesToCellRanges(allJoinedRanges, lineData, startCol);\n    return allJoinedRanges;\n  }\n\n  /**\n   * Modifies the provided ranges in-place to adjust for variations between\n   * string length and cell width so that the range represents a cell range,\n   * rather than the string range the joiner provides.\n   * @param ranges String ranges containing start (inclusive) and end (exclusive) index\n   * @param line Cell data for the relevant line in the terminal\n   * @param startCol Offset within the line to start from\n   */\n  private _stringRangesToCellRanges(ranges: [number, number][], line: IBufferLine, startCol: number): void {\n    let currentRangeIndex = 0;\n    let currentRangeStarted = false;\n    let currentStringIndex = 0;\n    let currentRange = ranges[currentRangeIndex];\n\n    // If we got through all of the ranges, stop searching\n    if (!currentRange) {\n      return;\n    }\n\n    for (let x = startCol; x < this._bufferService.cols; x++) {\n      const width = line.getWidth(x);\n      const length = line.getString(x).length || WHITESPACE_CELL_CHAR.length;\n\n      // We skip zero-width characters when creating the string to join the text\n      // so we do the same here\n      if (width === 0) {\n        continue;\n      }\n\n      // Adjust the start of the range\n      if (!currentRangeStarted && currentRange[0] <= currentStringIndex) {\n        currentRange[0] = x;\n        currentRangeStarted = true;\n      }\n\n      // Adjust the end of the range\n      if (currentRange[1] <= currentStringIndex) {\n        currentRange[1] = x;\n\n        // We're finished with this range, so we move to the next one\n        currentRange = ranges[++currentRangeIndex];\n\n        // If there are no more ranges left, stop searching\n        if (!currentRange) {\n          break;\n        }\n\n        // Ranges can be on adjacent characters. Because the end index of the\n        // ranges are exclusive, this means that the index for the start of a\n        // range can be the same as the end index of the previous range. To\n        // account for the start of the next range, we check here just in case.\n        if (currentRange[0] <= currentStringIndex) {\n          currentRange[0] = x;\n          currentRangeStarted = true;\n        } else {\n          currentRangeStarted = false;\n        }\n      }\n\n      // Adjust the string index based on the character length to line up with\n      // the column adjustment\n      currentStringIndex += length;\n    }\n\n    // If there is still a range left at the end, it must extend all the way to\n    // the end of the line.\n    if (currentRange) {\n      currentRange[1] = this._bufferService.cols;\n    }\n  }\n\n  /**\n   * Merges the range defined by the provided start and end into the list of\n   * existing ranges. The merge is done in place on the existing range for\n   * performance and is also returned.\n   * @param ranges Existing range list\n   * @param newRange Tuple of two numbers representing the new range to merge in.\n   * @returns The ranges input with the new range merged in place\n   */\n  private static _mergeRanges(ranges: [number, number][], newRange: [number, number]): [number, number][] {\n    let inRange = false;\n    for (let i = 0; i < ranges.length; i++) {\n      const range = ranges[i];\n      if (!inRange) {\n        if (newRange[1] <= range[0]) {\n          // Case 1: New range is before the search range\n          ranges.splice(i, 0, newRange);\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 2: New range is either wholly contained within the\n          // search range or overlaps with the front of it\n          range[0] = Math.min(newRange[0], range[0]);\n          return ranges;\n        }\n\n        if (newRange[0] < range[1]) {\n          // Case 3: New range either wholly contains the search range\n          // or overlaps with the end of it\n          range[0] = Math.min(newRange[0], range[0]);\n          inRange = true;\n        }\n\n        // Case 4: New range starts after the search range\n        continue;\n      } else {\n        if (newRange[1] <= range[0]) {\n          // Case 5: New range extends from previous range but doesn't\n          // reach the current one\n          ranges[i - 1][1] = newRange[1];\n          return ranges;\n        }\n\n        if (newRange[1] <= range[1]) {\n          // Case 6: New range extends from prvious range into the\n          // current range\n          ranges[i - 1][1] = Math.max(newRange[1], range[1]);\n          ranges.splice(i, 1);\n          return ranges;\n        }\n\n        // Case 7: New range extends from previous range past the\n        // end of the current range\n        ranges.splice(i, 1);\n        i--;\n      }\n    }\n\n    if (inRange) {\n      // Case 8: New range extends past the last existing range\n      ranges[ranges.length - 1][1] = newRange[1];\n    } else {\n      // Case 9: New range starts after the last existing range\n      ranges.push(newRange);\n    }\n\n    return ranges;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreBrowserService } from './Services';\n\nexport class CoreBrowserService implements ICoreBrowserService {\n  public serviceBrand: undefined;\n\n  private _isFocused = false;\n  private _cachedIsFocused: boolean | undefined = undefined;\n\n  constructor(\n    private _textarea: HTMLTextAreaElement,\n    public readonly window: Window & typeof globalThis\n  ) {\n    this._textarea.addEventListener('focus', () => this._isFocused = true);\n    this._textarea.addEventListener('blur', () => this._isFocused = false);\n  }\n\n  public get dpr(): number {\n    return this.window.devicePixelRatio;\n  }\n\n  public get isFocused(): boolean {\n    if (this._cachedIsFocused === undefined) {\n      this._cachedIsFocused = this._isFocused && this._textarea.ownerDocument.hasFocus();\n      queueMicrotask(() => this._cachedIsFocused = undefined);\n    }\n    return this._cachedIsFocused;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharSizeService, IRenderService, IMouseService } from './Services';\nimport { getCoords, getCoordsRelativeToElement } from 'browser/input/Mouse';\n\nexport class MouseService implements IMouseService {\n  public serviceBrand: undefined;\n\n  constructor(\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService\n  ) {\n  }\n\n  public getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined {\n    return getCoords(\n      window,\n      event,\n      element,\n      colCount,\n      rowCount,\n      this._charSizeService.hasValidSize,\n      this._renderService.dimensions.css.cell.width,\n      this._renderService.dimensions.css.cell.height,\n      isSelection\n    );\n  }\n\n  public getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined {\n    const coords = getCoordsRelativeToElement(window, event, element);\n    if (!this._charSizeService.hasValidSize) {\n      return undefined;\n    }\n    coords[0] = Math.min(Math.max(coords[0], 0), this._renderService.dimensions.css.canvas.width - 1);\n    coords[1] = Math.min(Math.max(coords[1], 0), this._renderService.dimensions.css.canvas.height - 1);\n    return {\n      col: Math.floor(coords[0] / this._renderService.dimensions.css.cell.width),\n      row: Math.floor(coords[1] / this._renderService.dimensions.css.cell.height),\n      x: Math.floor(coords[0]),\n      y: Math.floor(coords[1])\n    };\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { addDisposableDomListener } from 'browser/Lifecycle';\nimport { RenderDebouncer } from 'browser/RenderDebouncer';\nimport { ScreenDprMonitor } from 'browser/ScreenDprMonitor';\nimport { IRenderDebouncerWithCallback } from 'browser/Types';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/shared/Types';\nimport { ICharSizeService, ICoreBrowserService, IRenderService, IThemeService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, MutableDisposable } from 'common/Lifecycle';\nimport { DebouncedIdleTask } from 'common/TaskQueue';\nimport { IBufferService, IDecorationService, IOptionsService } from 'common/services/Services';\n\ninterface ISelectionState {\n  start: [number, number] | undefined;\n  end: [number, number] | undefined;\n  columnSelectMode: boolean;\n}\n\nexport class RenderService extends Disposable implements IRenderService {\n  public serviceBrand: undefined;\n\n  private _renderer: MutableDisposable<IRenderer> = this.register(new MutableDisposable());\n  private _renderDebouncer: IRenderDebouncerWithCallback;\n  private _screenDprMonitor: ScreenDprMonitor;\n  private _pausedResizeTask = new DebouncedIdleTask();\n\n  private _isPaused: boolean = false;\n  private _needsFullRefresh: boolean = false;\n  private _isNextRenderRedrawOnly: boolean = true;\n  private _needsSelectionRefresh: boolean = false;\n  private _canvasWidth: number = 0;\n  private _canvasHeight: number = 0;\n  private _selectionState: ISelectionState = {\n    start: undefined,\n    end: undefined,\n    columnSelectMode: false\n  };\n\n  private readonly _onDimensionsChange = this.register(new EventEmitter<IRenderDimensions>());\n  public readonly onDimensionsChange =  this._onDimensionsChange.event;\n  private readonly _onRenderedViewportChange = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRenderedViewportChange = this._onRenderedViewportChange.event;\n  private readonly _onRender = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRender = this._onRender.event;\n  private readonly _onRefreshRequest = this.register(new EventEmitter<{ start: number, end: number }>());\n  public readonly onRefreshRequest = this._onRefreshRequest.event;\n\n  public get dimensions(): IRenderDimensions { return this._renderer.value!.dimensions; }\n\n  constructor(\n    private _rowCount: number,\n    screenElement: HTMLElement,\n    @IOptionsService optionsService: IOptionsService,\n    @ICharSizeService private readonly _charSizeService: ICharSizeService,\n    @IDecorationService decorationService: IDecorationService,\n    @IBufferService bufferService: IBufferService,\n    @ICoreBrowserService coreBrowserService: ICoreBrowserService,\n    @IThemeService themeService: IThemeService\n  ) {\n    super();\n\n    this._renderDebouncer = new RenderDebouncer(coreBrowserService.window, (start, end) => this._renderRows(start, end));\n    this.register(this._renderDebouncer);\n\n    this._screenDprMonitor = new ScreenDprMonitor(coreBrowserService.window);\n    this._screenDprMonitor.setListener(() => this.handleDevicePixelRatioChange());\n    this.register(this._screenDprMonitor);\n\n    this.register(bufferService.onResize(() => this._fullRefresh()));\n    this.register(bufferService.buffers.onBufferActivate(() => this._renderer.value?.clear()));\n    this.register(optionsService.onOptionChange(() => this._handleOptionsChanged()));\n    this.register(this._charSizeService.onCharSizeChange(() => this.handleCharSizeChanged()));\n\n    // Do a full refresh whenever any decoration is added or removed. This may not actually result\n    // in changes but since decorations should be used sparingly or added/removed all in the same\n    // frame this should have minimal performance impact.\n    this.register(decorationService.onDecorationRegistered(() => this._fullRefresh()));\n    this.register(decorationService.onDecorationRemoved(() => this._fullRefresh()));\n\n    // Clear the renderer when the a change that could affect glyphs occurs\n    this.register(optionsService.onMultipleOptionChange([\n      'customGlyphs',\n      'drawBoldTextInBrightColors',\n      'letterSpacing',\n      'lineHeight',\n      'fontFamily',\n      'fontSize',\n      'fontWeight',\n      'fontWeightBold',\n      'minimumContrastRatio'\n    ], () => {\n      this.clear();\n      this.handleResize(bufferService.cols, bufferService.rows);\n      this._fullRefresh();\n    }));\n\n    // Refresh the cursor line when the cursor changes\n    this.register(optionsService.onMultipleOptionChange([\n      'cursorBlink',\n      'cursorStyle'\n    ], () => this.refreshRows(bufferService.buffer.y, bufferService.buffer.y, true)));\n\n    // dprchange should handle this case, we need this as well for browsers that don't support the\n    // matchMedia query.\n    this.register(addDisposableDomListener(coreBrowserService.window, 'resize', () => this.handleDevicePixelRatioChange()));\n\n    this.register(themeService.onChangeColors(() => this._fullRefresh()));\n\n    // Detect whether IntersectionObserver is detected and enable renderer pause\n    // and resume based on terminal visibility if so\n    if ('IntersectionObserver' in coreBrowserService.window) {\n      const observer = new coreBrowserService.window.IntersectionObserver(e => this._handleIntersectionChange(e[e.length - 1]), { threshold: 0 });\n      observer.observe(screenElement);\n      this.register({ dispose: () => observer.disconnect() });\n    }\n  }\n\n  private _handleIntersectionChange(entry: IntersectionObserverEntry): void {\n    this._isPaused = entry.isIntersecting === undefined ? (entry.intersectionRatio === 0) : !entry.isIntersecting;\n\n    // Terminal was hidden on open\n    if (!this._isPaused && !this._charSizeService.hasValidSize) {\n      this._charSizeService.measure();\n    }\n\n    if (!this._isPaused && this._needsFullRefresh) {\n      this._pausedResizeTask.flush();\n      this.refreshRows(0, this._rowCount - 1);\n      this._needsFullRefresh = false;\n    }\n  }\n\n  public refreshRows(start: number, end: number, isRedrawOnly: boolean = false): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n      return;\n    }\n    if (!isRedrawOnly) {\n      this._isNextRenderRedrawOnly = false;\n    }\n    this._renderDebouncer.refresh(start, end, this._rowCount);\n  }\n\n  private _renderRows(start: number, end: number): void {\n    if (!this._renderer.value) {\n      return;\n    }\n\n    // Since this is debounced, a resize event could have happened between the time a refresh was\n    // requested and when this triggers. Clamp the values of start and end to ensure they're valid\n    // given the current viewport state.\n    start = Math.min(start, this._rowCount - 1);\n    end = Math.min(end, this._rowCount - 1);\n\n    // Render\n    this._renderer.value.renderRows(start, end);\n\n    // Update selection if needed\n    if (this._needsSelectionRefresh) {\n      this._renderer.value.handleSelectionChanged(this._selectionState.start, this._selectionState.end, this._selectionState.columnSelectMode);\n      this._needsSelectionRefresh = false;\n    }\n\n    // Fire render event only if it was not a redraw\n    if (!this._isNextRenderRedrawOnly) {\n      this._onRenderedViewportChange.fire({ start, end });\n    }\n    this._onRender.fire({ start, end });\n    this._isNextRenderRedrawOnly = true;\n  }\n\n  public resize(cols: number, rows: number): void {\n    this._rowCount = rows;\n    this._fireOnCanvasResize();\n  }\n\n  private _handleOptionsChanged(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    this.refreshRows(0, this._rowCount - 1);\n    this._fireOnCanvasResize();\n  }\n\n  private _fireOnCanvasResize(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    // Don't fire the event if the dimensions haven't changed\n    if (this._renderer.value.dimensions.css.canvas.width === this._canvasWidth && this._renderer.value.dimensions.css.canvas.height === this._canvasHeight) {\n      return;\n    }\n    this._onDimensionsChange.fire(this._renderer.value.dimensions);\n  }\n\n  public hasRenderer(): boolean {\n    return !!this._renderer.value;\n  }\n\n  public setRenderer(renderer: IRenderer): void {\n    this._renderer.value = renderer;\n    this._renderer.value.onRequestRedraw(e => this.refreshRows(e.start, e.end, true));\n\n    // Force a refresh\n    this._needsSelectionRefresh = true;\n    this._fullRefresh();\n  }\n\n  public addRefreshCallback(callback: FrameRequestCallback): number {\n    return this._renderDebouncer.addRefreshCallback(callback);\n  }\n\n  private _fullRefresh(): void {\n    if (this._isPaused) {\n      this._needsFullRefresh = true;\n    } else {\n      this.refreshRows(0, this._rowCount - 1);\n    }\n  }\n\n  public clearTextureAtlas(): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    this._renderer.value.clearTextureAtlas?.();\n    this._fullRefresh();\n  }\n\n  public handleDevicePixelRatioChange(): void {\n    // Force char size measurement as DomMeasureStrategy(getBoundingClientRect) is not stable\n    // when devicePixelRatio changes\n    this._charSizeService.measure();\n\n    if (!this._renderer.value) {\n      return;\n    }\n    this._renderer.value.handleDevicePixelRatioChange();\n    this.refreshRows(0, this._rowCount - 1);\n  }\n\n  public handleResize(cols: number, rows: number): void {\n    if (!this._renderer.value) {\n      return;\n    }\n    if (this._isPaused) {\n      this._pausedResizeTask.set(() => this._renderer.value!.handleResize(cols, rows));\n    } else {\n      this._renderer.value.handleResize(cols, rows);\n    }\n    this._fullRefresh();\n  }\n\n  // TODO: Is this useful when we have onResize?\n  public handleCharSizeChanged(): void {\n    this._renderer.value?.handleCharSizeChanged();\n  }\n\n  public handleBlur(): void {\n    this._renderer.value?.handleBlur();\n  }\n\n  public handleFocus(): void {\n    this._renderer.value?.handleFocus();\n  }\n\n  public handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void {\n    this._selectionState.start = start;\n    this._selectionState.end = end;\n    this._selectionState.columnSelectMode = columnSelectMode;\n    this._renderer.value?.handleSelectionChanged(start, end, columnSelectMode);\n  }\n\n  public handleCursorMove(): void {\n    this._renderer.value?.handleCursorMove();\n  }\n\n  public clear(): void {\n    this._renderer.value?.clear();\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange, ILinkifier2 } from 'browser/Types';\nimport { getCoordsRelativeToElement } from 'browser/input/Mouse';\nimport { moveToCellSequence } from 'browser/input/MoveToCell';\nimport { SelectionModel } from 'browser/selection/SelectionModel';\nimport { ISelectionRedrawRequestEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { ICoreBrowserService, IMouseService, IRenderService, ISelectionService } from 'browser/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport * as Browser from 'common/Platform';\nimport { IBufferLine, IDisposable } from 'common/Types';\nimport { getRangeLength } from 'common/buffer/BufferRange';\nimport { CellData } from 'common/buffer/CellData';\nimport { IBuffer } from 'common/buffer/Types';\nimport { IBufferService, ICoreService, IOptionsService } from 'common/services/Services';\n\n/**\n * The number of pixels the mouse needs to be above or below the viewport in\n * order to scroll at the maximum speed.\n */\nconst DRAG_SCROLL_MAX_THRESHOLD = 50;\n\n/**\n * The maximum scrolling speed\n */\nconst DRAG_SCROLL_MAX_SPEED = 15;\n\n/**\n * The number of milliseconds between drag scroll updates.\n */\nconst DRAG_SCROLL_INTERVAL = 50;\n\n/**\n * The maximum amount of time that can have elapsed for an alt click to move the\n * cursor.\n */\nconst ALT_CLICK_MOVE_CURSOR_TIME = 500;\n\nconst NON_BREAKING_SPACE_CHAR = String.fromCharCode(160);\nconst ALL_NON_BREAKING_SPACE_REGEX = new RegExp(NON_BREAKING_SPACE_CHAR, 'g');\n\n/**\n * Represents a position of a word on a line.\n */\ninterface IWordPosition {\n  start: number;\n  length: number;\n}\n\n/**\n * A selection mode, this drives how the selection behaves on mouse move.\n */\nexport const enum SelectionMode {\n  NORMAL,\n  WORD,\n  LINE,\n  COLUMN\n}\n\n/**\n * A class that manages the selection of the terminal. With help from\n * SelectionModel, SelectionService handles with all logic associated with\n * dealing with the selection, including handling mouse interaction, wide\n * characters and fetching the actual text within the selection. Rendering is\n * not handled by the SelectionService but the onRedrawRequest event is fired\n * when the selection is ready to be redrawn (on an animation frame).\n */\nexport class SelectionService extends Disposable implements ISelectionService {\n  public serviceBrand: undefined;\n\n  protected _model: SelectionModel;\n\n  /**\n   * The amount to scroll every drag scroll update (depends on how far the mouse\n   * drag is above or below the terminal).\n   */\n  private _dragScrollAmount: number = 0;\n\n  /**\n   * The current selection mode.\n   */\n  protected _activeSelectionMode: SelectionMode;\n\n  /**\n   * A setInterval timer that is active while the mouse is down whose callback\n   * scrolls the viewport when necessary.\n   */\n  private _dragScrollIntervalTimer: number | undefined;\n\n  /**\n   * The animation frame ID used for refreshing the selection.\n   */\n  private _refreshAnimationFrame: number | undefined;\n\n  /**\n   * Whether selection is enabled.\n   */\n  private _enabled = true;\n\n  private _mouseMoveListener: EventListener;\n  private _mouseUpListener: EventListener;\n  private _trimListener: IDisposable;\n  private _workCell: CellData = new CellData();\n\n  private _mouseDownTimeStamp: number = 0;\n  private _oldHasSelection: boolean = false;\n  private _oldSelectionStart: [number, number] | undefined = undefined;\n  private _oldSelectionEnd: [number, number] | undefined = undefined;\n\n  private readonly _onLinuxMouseSelection = this.register(new EventEmitter<string>());\n  public readonly onLinuxMouseSelection = this._onLinuxMouseSelection.event;\n  private readonly _onRedrawRequest = this.register(new EventEmitter<ISelectionRedrawRequestEvent>());\n  public readonly onRequestRedraw = this._onRedrawRequest.event;\n  private readonly _onSelectionChange = this.register(new EventEmitter<void>());\n  public readonly onSelectionChange = this._onSelectionChange.event;\n  private readonly _onRequestScrollLines = this.register(new EventEmitter<ISelectionRequestScrollLinesEvent>());\n  public readonly onRequestScrollLines = this._onRequestScrollLines.event;\n\n  constructor(\n    private readonly _element: HTMLElement,\n    private readonly _screenElement: HTMLElement,\n    private readonly _linkifier: ILinkifier2,\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService,\n    @IMouseService private readonly _mouseService: IMouseService,\n    @IOptionsService private readonly _optionsService: IOptionsService,\n    @IRenderService private readonly _renderService: IRenderService,\n    @ICoreBrowserService private readonly _coreBrowserService: ICoreBrowserService\n  ) {\n    super();\n\n    // Init listeners\n    this._mouseMoveListener = event => this._handleMouseMove(event as MouseEvent);\n    this._mouseUpListener = event => this._handleMouseUp(event as MouseEvent);\n    this._coreService.onUserInput(() => {\n      if (this.hasSelection) {\n        this.clearSelection();\n      }\n    });\n    this._trimListener = this._bufferService.buffer.lines.onTrim(amount => this._handleTrim(amount));\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._handleBufferActivate(e)));\n\n    this.enable();\n\n    this._model = new SelectionModel(this._bufferService);\n    this._activeSelectionMode = SelectionMode.NORMAL;\n\n    this.register(toDisposable(() => {\n      this._removeMouseDownListeners();\n    }));\n  }\n\n  public reset(): void {\n    this.clearSelection();\n  }\n\n  /**\n   * Disables the selection manager. This is useful for when terminal mouse\n   * are enabled.\n   */\n  public disable(): void {\n    this.clearSelection();\n    this._enabled = false;\n  }\n\n  /**\n   * Enable the selection manager.\n   */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  public get selectionStart(): [number, number] | undefined { return this._model.finalSelectionStart; }\n  public get selectionEnd(): [number, number] | undefined { return this._model.finalSelectionEnd; }\n\n  /**\n   * Gets whether there is an active text selection.\n   */\n  public get hasSelection(): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return start[0] !== end[0] || start[1] !== end[1];\n  }\n\n  /**\n   * Gets the text currently selected.\n   */\n  public get selectionText(): string {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return '';\n    }\n\n    const buffer = this._bufferService.buffer;\n    const result: string[] = [];\n\n    if (this._activeSelectionMode === SelectionMode.COLUMN) {\n      // Ignore zero width selections\n      if (start[0] === end[0]) {\n        return '';\n      }\n\n      // For column selection it's not enough to rely on final selection's swapping of reversed\n      // values, it also needs the x coordinates to swap independently of the y coordinate is needed\n      const startCol = start[0] < end[0] ? start[0] : end[0];\n      const endCol = start[0] < end[0] ? end[0] : start[0];\n      for (let i = start[1]; i <= end[1]; i++) {\n        const lineText = buffer.translateBufferLineToString(i, true, startCol, endCol);\n        result.push(lineText);\n      }\n    } else {\n      // Get first row\n      const startRowEndCol = start[1] === end[1] ? end[0] : undefined;\n      result.push(buffer.translateBufferLineToString(start[1], true, start[0], startRowEndCol));\n\n      // Get middle rows\n      for (let i = start[1] + 1; i <= end[1] - 1; i++) {\n        const bufferLine = buffer.lines.get(i);\n        const lineText = buffer.translateBufferLineToString(i, true);\n        if (bufferLine?.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n\n      // Get final row\n      if (start[1] !== end[1]) {\n        const bufferLine = buffer.lines.get(end[1]);\n        const lineText = buffer.translateBufferLineToString(end[1], true, 0, end[0]);\n        if (bufferLine && bufferLine!.isWrapped) {\n          result[result.length - 1] += lineText;\n        } else {\n          result.push(lineText);\n        }\n      }\n    }\n\n    // Format string by replacing non-breaking space chars with regular spaces\n    // and joining the array into a multi-line string.\n    const formattedResult = result.map(line => {\n      return line.replace(ALL_NON_BREAKING_SPACE_REGEX, ' ');\n    }).join(Browser.isWindows ? '\\r\\n' : '\\n');\n\n    return formattedResult;\n  }\n\n  /**\n   * Clears the current terminal selection.\n   */\n  public clearSelection(): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Queues a refresh, redrawing the selection on the next opportunity.\n   * @param isLinuxMouseSelection Whether the selection should be registered as a new\n   * selection on Linux.\n   */\n  public refresh(isLinuxMouseSelection?: boolean): void {\n    // Queue the refresh for the renderer\n    if (!this._refreshAnimationFrame) {\n      this._refreshAnimationFrame = this._coreBrowserService.window.requestAnimationFrame(() => this._refresh());\n    }\n\n    // If the platform is Linux and the refresh call comes from a mouse event,\n    // we need to update the selection for middle click to paste selection.\n    if (Browser.isLinux && isLinuxMouseSelection) {\n      const selectionText = this.selectionText;\n      if (selectionText.length) {\n        this._onLinuxMouseSelection.fire(this.selectionText);\n      }\n    }\n  }\n\n  /**\n   * Fires the refresh event, causing consumers to pick it up and redraw the\n   * selection state.\n   */\n  private _refresh(): void {\n    this._refreshAnimationFrame = undefined;\n    this._onRedrawRequest.fire({\n      start: this._model.finalSelectionStart,\n      end: this._model.finalSelectionEnd,\n      columnSelectMode: this._activeSelectionMode === SelectionMode.COLUMN\n    });\n  }\n\n  /**\n   * Checks if the current click was inside the current selection\n   * @param event The mouse event\n   */\n  private _isClickInSelection(event: MouseEvent): boolean {\n    const coords = this._getMouseBufferCoords(event);\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n\n    if (!start || !end || !coords) {\n      return false;\n    }\n\n    return this._areCoordsInSelection(coords, start, end);\n  }\n\n  public isCellInSelection(x: number, y: number): boolean {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    if (!start || !end) {\n      return false;\n    }\n    return this._areCoordsInSelection([x, y], start, end);\n  }\n\n  protected _areCoordsInSelection(coords: [number, number], start: [number, number], end: [number, number]): boolean {\n    return (coords[1] > start[1] && coords[1] < end[1]) ||\n        (start[1] === end[1] && coords[1] === start[1] && coords[0] >= start[0] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === end[1] && coords[0] < end[0]) ||\n        (start[1] < end[1] && coords[1] === start[1] && coords[0] >= start[0]);\n  }\n\n  /**\n   * Selects word at the current mouse event coordinates.\n   * @param event The mouse event.\n   */\n  private _selectWordAtCursor(event: MouseEvent, allowWhitespaceOnlySelection: boolean): boolean {\n    // Check if there is a link under the cursor first and select that if so\n    const range = this._linkifier.currentLink?.link?.range;\n    if (range) {\n      this._model.selectionStart = [range.start.x - 1, range.start.y - 1];\n      this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._selectWordAt(coords, allowWhitespaceOnlySelection);\n      this._model.selectionEnd = undefined;\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Selects all text within the terminal.\n   */\n  public selectAll(): void {\n    this._model.isSelectAllActive = true;\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  public selectLines(start: number, end: number): void {\n    this._model.clearSelection();\n    start = Math.max(start, 0);\n    end = Math.min(end, this._bufferService.buffer.lines.length - 1);\n    this._model.selectionStart = [0, start];\n    this._model.selectionEnd = [this._bufferService.cols, end];\n    this.refresh();\n    this._onSelectionChange.fire();\n  }\n\n  /**\n   * Handle the buffer being trimmed, adjust the selection position.\n   * @param amount The amount the buffer is being trimmed.\n   */\n  private _handleTrim(amount: number): void {\n    const needsRefresh = this._model.handleTrim(amount);\n    if (needsRefresh) {\n      this.refresh();\n    }\n  }\n\n  /**\n   * Gets the 0-based [x, y] buffer coordinates of the current mouse event.\n   * @param event The mouse event.\n   */\n  private _getMouseBufferCoords(event: MouseEvent): [number, number] | undefined {\n    const coords = this._mouseService.getCoords(event, this._screenElement, this._bufferService.cols, this._bufferService.rows, true);\n    if (!coords) {\n      return undefined;\n    }\n\n    // Convert to 0-based\n    coords[0]--;\n    coords[1]--;\n\n    // Convert viewport coords to buffer coords\n    coords[1] += this._bufferService.buffer.ydisp;\n    return coords;\n  }\n\n  /**\n   * Gets the amount the viewport should be scrolled based on how far out of the\n   * terminal the mouse is.\n   * @param event The mouse event.\n   */\n  private _getMouseEventScrollAmount(event: MouseEvent): number {\n    let offset = getCoordsRelativeToElement(this._coreBrowserService.window, event, this._screenElement)[1];\n    const terminalHeight = this._renderService.dimensions.css.canvas.height;\n    if (offset >= 0 && offset <= terminalHeight) {\n      return 0;\n    }\n    if (offset > terminalHeight) {\n      offset -= terminalHeight;\n    }\n\n    offset = Math.min(Math.max(offset, -DRAG_SCROLL_MAX_THRESHOLD), DRAG_SCROLL_MAX_THRESHOLD);\n    offset /= DRAG_SCROLL_MAX_THRESHOLD;\n    return (offset / Math.abs(offset)) + Math.round(offset * (DRAG_SCROLL_MAX_SPEED - 1));\n  }\n\n  /**\n   * Returns whether the selection manager should force selection, regardless of\n   * whether the terminal is in mouse events mode.\n   * @param event The mouse event.\n   */\n  public shouldForceSelection(event: MouseEvent): boolean {\n    if (Browser.isMac) {\n      return event.altKey && this._optionsService.rawOptions.macOptionClickForcesSelection;\n    }\n\n    return event.shiftKey;\n  }\n\n  /**\n   * Handles te mousedown event, setting up for a new selection.\n   * @param event The mousedown event.\n   */\n  public handleMouseDown(event: MouseEvent): void {\n    this._mouseDownTimeStamp = event.timeStamp;\n    // If we have selection, we want the context menu on right click even if the\n    // terminal is in mouse mode.\n    if (event.button === 2 && this.hasSelection) {\n      return;\n    }\n\n    // Only action the primary button\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Allow selection when using a specific modifier key, even when disabled\n    if (!this._enabled) {\n      if (!this.shouldForceSelection(event)) {\n        return;\n      }\n\n      // Don't send the mouse down event to the current process, we want to select\n      event.stopPropagation();\n    }\n\n    // Tell the browser not to start a regular selection\n    event.preventDefault();\n\n    // Reset drag scroll state\n    this._dragScrollAmount = 0;\n\n    if (this._enabled && event.shiftKey) {\n      this._handleIncrementalClick(event);\n    } else {\n      if (event.detail === 1) {\n        this._handleSingleClick(event);\n      } else if (event.detail === 2) {\n        this._handleDoubleClick(event);\n      } else if (event.detail === 3) {\n        this._handleTripleClick(event);\n      }\n    }\n\n    this._addMouseDownListeners();\n    this.refresh(true);\n  }\n\n  /**\n   * Adds listeners when mousedown is triggered.\n   */\n  private _addMouseDownListeners(): void {\n    // Listen on the document so that dragging outside of viewport works\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.addEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.addEventListener('mouseup', this._mouseUpListener);\n    }\n    this._dragScrollIntervalTimer = this._coreBrowserService.window.setInterval(() => this._dragScroll(), DRAG_SCROLL_INTERVAL);\n  }\n\n  /**\n   * Removes the listeners that are registered when mousedown is triggered.\n   */\n  private _removeMouseDownListeners(): void {\n    if (this._screenElement.ownerDocument) {\n      this._screenElement.ownerDocument.removeEventListener('mousemove', this._mouseMoveListener);\n      this._screenElement.ownerDocument.removeEventListener('mouseup', this._mouseUpListener);\n    }\n    this._coreBrowserService.window.clearInterval(this._dragScrollIntervalTimer);\n    this._dragScrollIntervalTimer = undefined;\n  }\n\n  /**\n   * Performs an incremental click, setting the selection end position to the mouse\n   * position.\n   * @param event The mouse event.\n   */\n  private _handleIncrementalClick(event: MouseEvent): void {\n    if (this._model.selectionStart) {\n      this._model.selectionEnd = this._getMouseBufferCoords(event);\n    }\n  }\n\n  /**\n   * Performs a single click, resetting relevant state and setting the selection\n   * start position.\n   * @param event The mouse event.\n   */\n  private _handleSingleClick(event: MouseEvent): void {\n    this._model.selectionStartLength = 0;\n    this._model.isSelectAllActive = false;\n    this._activeSelectionMode = this.shouldColumnSelect(event) ? SelectionMode.COLUMN : SelectionMode.NORMAL;\n\n    // Initialize the new selection\n    this._model.selectionStart = this._getMouseBufferCoords(event);\n    if (!this._model.selectionStart) {\n      return;\n    }\n    this._model.selectionEnd = undefined;\n\n    // Ensure the line exists\n    const line = this._bufferService.buffer.lines.get(this._model.selectionStart[1]);\n    if (!line) {\n      return;\n    }\n\n    // Return early if the click event is not in the buffer (eg. in scroll bar)\n    if (line.length === this._model.selectionStart[0]) {\n      return;\n    }\n\n    // If the mouse is over the second half of a wide character, adjust the\n    // selection to cover the whole character\n    if (line.hasWidth(this._model.selectionStart[0]) === 0) {\n      this._model.selectionStart[0]++;\n    }\n  }\n\n  /**\n   * Performs a double click, selecting the current word.\n   * @param event The mouse event.\n   */\n  private _handleDoubleClick(event: MouseEvent): void {\n    if (this._selectWordAtCursor(event, true)) {\n      this._activeSelectionMode = SelectionMode.WORD;\n    }\n  }\n\n  /**\n   * Performs a triple click, selecting the current line and activating line\n   * select mode.\n   * @param event The mouse event.\n   */\n  private _handleTripleClick(event: MouseEvent): void {\n    const coords = this._getMouseBufferCoords(event);\n    if (coords) {\n      this._activeSelectionMode = SelectionMode.LINE;\n      this._selectLineAt(coords[1]);\n    }\n  }\n\n  /**\n   * Returns whether the selection manager should operate in column select mode\n   * @param event the mouse or keyboard event\n   */\n  public shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean {\n    return event.altKey && !(Browser.isMac && this._optionsService.rawOptions.macOptionClickForcesSelection);\n  }\n\n  /**\n   * Handles the mousemove event when the mouse button is down, recording the\n   * end of the selection and refreshing the selection.\n   * @param event The mousemove event.\n   */\n  private _handleMouseMove(event: MouseEvent): void {\n    // If the mousemove listener is active it means that a selection is\n    // currently being made, we should stop propagation to prevent mouse events\n    // to be sent to the pty.\n    event.stopImmediatePropagation();\n\n    // Do nothing if there is no selection start, this can happen if the first\n    // click in the terminal is an incremental click\n    if (!this._model.selectionStart) {\n      return;\n    }\n\n    // Record the previous position so we know whether to redraw the selection\n    // at the end.\n    const previousSelectionEnd = this._model.selectionEnd ? [this._model.selectionEnd[0], this._model.selectionEnd[1]] : null;\n\n    // Set the initial selection end based on the mouse coordinates\n    this._model.selectionEnd = this._getMouseBufferCoords(event);\n    if (!this._model.selectionEnd) {\n      this.refresh(true);\n      return;\n    }\n\n    // Select the entire line if line select mode is active.\n    if (this._activeSelectionMode === SelectionMode.LINE) {\n      if (this._model.selectionEnd[1] < this._model.selectionStart[1]) {\n        this._model.selectionEnd[0] = 0;\n      } else {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      }\n    } else if (this._activeSelectionMode === SelectionMode.WORD) {\n      this._selectToWordAt(this._model.selectionEnd);\n    }\n\n    // Determine the amount of scrolling that will happen.\n    this._dragScrollAmount = this._getMouseEventScrollAmount(event);\n\n    // If the cursor was above or below the viewport, make sure it's at the\n    // start or end of the viewport respectively. This should only happen when\n    // NOT in column select mode.\n    if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n      if (this._dragScrollAmount > 0) {\n        this._model.selectionEnd[0] = this._bufferService.cols;\n      } else if (this._dragScrollAmount < 0) {\n        this._model.selectionEnd[0] = 0;\n      }\n    }\n\n    // If the character is a wide character include the cell to the right in the\n    // selection. Note that selections at the very end of the line will never\n    // have a character.\n    const buffer = this._bufferService.buffer;\n    if (this._model.selectionEnd[1] < buffer.lines.length) {\n      const line = buffer.lines.get(this._model.selectionEnd[1]);\n      if (line && line.hasWidth(this._model.selectionEnd[0]) === 0) {\n        this._model.selectionEnd[0]++;\n      }\n    }\n\n    // Only draw here if the selection changes.\n    if (!previousSelectionEnd ||\n      previousSelectionEnd[0] !== this._model.selectionEnd[0] ||\n      previousSelectionEnd[1] !== this._model.selectionEnd[1]) {\n      this.refresh(true);\n    }\n  }\n\n  /**\n   * The callback that occurs every DRAG_SCROLL_INTERVAL ms that does the\n   * scrolling of the viewport.\n   */\n  private _dragScroll(): void {\n    if (!this._model.selectionEnd || !this._model.selectionStart) {\n      return;\n    }\n    if (this._dragScrollAmount) {\n      this._onRequestScrollLines.fire({ amount: this._dragScrollAmount, suppressScrollEvent: false });\n      // Re-evaluate selection\n      // If the cursor was above or below the viewport, make sure it's at the\n      // start or end of the viewport respectively. This should only happen when\n      // NOT in column select mode.\n      const buffer = this._bufferService.buffer;\n      if (this._dragScrollAmount > 0) {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = this._bufferService.cols;\n        }\n        this._model.selectionEnd[1] = Math.min(buffer.ydisp + this._bufferService.rows, buffer.lines.length - 1);\n      } else {\n        if (this._activeSelectionMode !== SelectionMode.COLUMN) {\n          this._model.selectionEnd[0] = 0;\n        }\n        this._model.selectionEnd[1] = buffer.ydisp;\n      }\n      this.refresh();\n    }\n  }\n\n  /**\n   * Handles the mouseup event, removing the mousedown listeners.\n   * @param event The mouseup event.\n   */\n  private _handleMouseUp(event: MouseEvent): void {\n    const timeElapsed = event.timeStamp - this._mouseDownTimeStamp;\n\n    this._removeMouseDownListeners();\n\n    if (this.selectionText.length <= 1 && timeElapsed < ALT_CLICK_MOVE_CURSOR_TIME && event.altKey && this._optionsService.rawOptions.altClickMovesCursor) {\n      if (this._bufferService.buffer.ybase === this._bufferService.buffer.ydisp) {\n        const coordinates = this._mouseService.getCoords(\n          event,\n          this._element,\n          this._bufferService.cols,\n          this._bufferService.rows,\n          false\n        );\n        if (coordinates && coordinates[0] !== undefined && coordinates[1] !== undefined) {\n          const sequence = moveToCellSequence(coordinates[0] - 1, coordinates[1] - 1, this._bufferService, this._coreService.decPrivateModes.applicationCursorKeys);\n          this._coreService.triggerDataEvent(sequence, true);\n        }\n      }\n    } else {\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  private _fireEventIfSelectionChanged(): void {\n    const start = this._model.finalSelectionStart;\n    const end = this._model.finalSelectionEnd;\n    const hasSelection = !!start && !!end && (start[0] !== end[0] || start[1] !== end[1]);\n\n    if (!hasSelection) {\n      if (this._oldHasSelection) {\n        this._fireOnSelectionChange(start, end, hasSelection);\n      }\n      return;\n    }\n\n    // Sanity check, these should not be undefined as there is a selection\n    if (!start || !end) {\n      return;\n    }\n\n    if (!this._oldSelectionStart || !this._oldSelectionEnd || (\n      start[0] !== this._oldSelectionStart[0] || start[1] !== this._oldSelectionStart[1] ||\n      end[0] !== this._oldSelectionEnd[0] || end[1] !== this._oldSelectionEnd[1])) {\n\n      this._fireOnSelectionChange(start, end, hasSelection);\n    }\n  }\n\n  private _fireOnSelectionChange(start: [number, number] | undefined, end: [number, number] | undefined, hasSelection: boolean): void {\n    this._oldSelectionStart = start;\n    this._oldSelectionEnd = end;\n    this._oldHasSelection = hasSelection;\n    this._onSelectionChange.fire();\n  }\n\n  private _handleBufferActivate(e: {activeBuffer: IBuffer, inactiveBuffer: IBuffer}): void {\n    this.clearSelection();\n    // Only adjust the selection on trim, shiftElements is rarely used (only in\n    // reverseIndex) and delete in a splice is only ever used when the same\n    // number of elements was just added. Given this is could actually be\n    // beneficial to leave the selection as is for these cases.\n    this._trimListener.dispose();\n    this._trimListener = e.activeBuffer.lines.onTrim(amount => this._handleTrim(amount));\n  }\n\n  /**\n   * Converts a viewport column (0 to cols - 1) to the character index on the\n   * buffer line, the latter takes into account wide and null characters.\n   * @param bufferLine The buffer line to use.\n   * @param x The x index in the buffer line to convert.\n   */\n  private _convertViewportColToCharacterIndex(bufferLine: IBufferLine, x: number): number {\n    let charIndex = x;\n    for (let i = 0; x >= i; i++) {\n      const length = bufferLine.loadCell(i, this._workCell).getChars().length;\n      if (this._workCell.getWidth() === 0) {\n        // Wide characters aren't included in the line string so decrement the\n        // index so the index is back on the wide character.\n        charIndex--;\n      } else if (length > 1 && x !== i) {\n        // Emojis take up multiple characters, so adjust accordingly. For these\n        // we don't want ot include the character at the column as we're\n        // returning the start index in the string, not the end index.\n        charIndex += length - 1;\n      }\n    }\n    return charIndex;\n  }\n\n  public setSelection(col: number, row: number, length: number): void {\n    this._model.clearSelection();\n    this._removeMouseDownListeners();\n    this._model.selectionStart = [col, row];\n    this._model.selectionStartLength = length;\n    this.refresh();\n    this._fireEventIfSelectionChanged();\n  }\n\n  public rightClickSelect(ev: MouseEvent): void {\n    if (!this._isClickInSelection(ev)) {\n      if (this._selectWordAtCursor(ev, false)) {\n        this.refresh(true);\n      }\n      this._fireEventIfSelectionChanged();\n    }\n  }\n\n  /**\n   * Gets positional information for the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _getWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean, followWrappedLinesAbove: boolean = true, followWrappedLinesBelow: boolean = true): IWordPosition | undefined {\n    // Ensure coords are within viewport (eg. not within scroll bar)\n    if (coords[0] >= this._bufferService.cols) {\n      return undefined;\n    }\n\n    const buffer = this._bufferService.buffer;\n    const bufferLine = buffer.lines.get(coords[1]);\n    if (!bufferLine) {\n      return undefined;\n    }\n\n    const line = buffer.translateBufferLineToString(coords[1], false);\n\n    // Get actual index, taking into consideration wide characters\n    let startIndex = this._convertViewportColToCharacterIndex(bufferLine, coords[0]);\n    let endIndex = startIndex;\n\n    // Record offset to be used later\n    const charOffset = coords[0] - startIndex;\n    let leftWideCharCount = 0;\n    let rightWideCharCount = 0;\n    let leftLongCharOffset = 0;\n    let rightLongCharOffset = 0;\n\n    if (line.charAt(startIndex) === ' ') {\n      // Expand until non-whitespace is hit\n      while (startIndex > 0 && line.charAt(startIndex - 1) === ' ') {\n        startIndex--;\n      }\n      while (endIndex < line.length && line.charAt(endIndex + 1) === ' ') {\n        endIndex++;\n      }\n    } else {\n      // Expand until whitespace is hit. This algorithm works by scanning left\n      // and right from the starting position, keeping both the index format\n      // (line) and the column format (bufferLine) in sync. When a wide\n      // character is hit, it is recorded and the column index is adjusted.\n      let startCol = coords[0];\n      let endCol = coords[0];\n\n      // Consider the initial position, skip it and increment the wide char\n      // variable\n      if (bufferLine.getWidth(startCol) === 0) {\n        leftWideCharCount++;\n        startCol--;\n      }\n      if (bufferLine.getWidth(endCol) === 2) {\n        rightWideCharCount++;\n        endCol++;\n      }\n\n      // Adjust the end index for characters whose length are > 1 (emojis)\n      const length = bufferLine.getString(endCol).length;\n      if (length > 1) {\n        rightLongCharOffset += length - 1;\n        endIndex += length - 1;\n      }\n\n      // Expand the string in both directions until a space is hit\n      while (startCol > 0 && startIndex > 0 && !this._isCharWordSeparator(bufferLine.loadCell(startCol - 1, this._workCell))) {\n        bufferLine.loadCell(startCol - 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 0) {\n          // If the next character is a wide char, record it and skip the column\n          leftWideCharCount++;\n          startCol--;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          leftLongCharOffset += length - 1;\n          startIndex -= length - 1;\n        }\n        startIndex--;\n        startCol--;\n      }\n      while (endCol < bufferLine.length && endIndex + 1 < line.length && !this._isCharWordSeparator(bufferLine.loadCell(endCol + 1, this._workCell))) {\n        bufferLine.loadCell(endCol + 1, this._workCell);\n        const length = this._workCell.getChars().length;\n        if (this._workCell.getWidth() === 2) {\n          // If the next character is a wide char, record it and skip the column\n          rightWideCharCount++;\n          endCol++;\n        } else if (length > 1) {\n          // If the next character's string is longer than 1 char (eg. emoji),\n          // adjust the index\n          rightLongCharOffset += length - 1;\n          endIndex += length - 1;\n        }\n        endIndex++;\n        endCol++;\n      }\n    }\n\n    // Incremenet the end index so it is at the start of the next character\n    endIndex++;\n\n    // Calculate the start _column_, converting the the string indexes back to\n    // column coordinates.\n    let start =\n        startIndex // The index of the selection's start char in the line string\n        + charOffset // The difference between the initial char's column and index\n        - leftWideCharCount // The number of wide chars left of the initial char\n        + leftLongCharOffset; // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n\n    // Calculate the length in _columns_, converting the the string indexes back\n    // to column coordinates.\n    let length = Math.min(this._bufferService.cols, // Disallow lengths larger than the terminal cols\n      endIndex // The index of the selection's end char in the line string\n      - startIndex // The index of the selection's start char in the line string\n      + leftWideCharCount // The number of wide chars left of the initial char\n      + rightWideCharCount // The number of wide chars right of the initial char (inclusive)\n      - leftLongCharOffset // The number of additional chars left of the initial char added by columns with strings longer than 1 (emojis)\n      - rightLongCharOffset); // The number of additional chars right of the initial char (inclusive) added by columns with strings longer than 1 (emojis)\n\n    if (!allowWhitespaceOnlySelection && line.slice(startIndex, endIndex).trim() === '') {\n      return undefined;\n    }\n\n    // Recurse upwards if the line is wrapped and the word wraps to the above line\n    if (followWrappedLinesAbove) {\n      if (start === 0 && bufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n        const previousBufferLine = buffer.lines.get(coords[1] - 1);\n        if (previousBufferLine && bufferLine.isWrapped && previousBufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n          const previousLineWordPosition = this._getWordAt([this._bufferService.cols - 1, coords[1] - 1], false, true, false);\n          if (previousLineWordPosition) {\n            const offset = this._bufferService.cols - previousLineWordPosition.start;\n            start -= offset;\n            length += offset;\n          }\n        }\n      }\n    }\n\n    // Recurse downwards if the line is wrapped and the word wraps to the next line\n    if (followWrappedLinesBelow) {\n      if (start + length === this._bufferService.cols && bufferLine.getCodePoint(this._bufferService.cols - 1) !== 32 /* ' ' */) {\n        const nextBufferLine = buffer.lines.get(coords[1] + 1);\n        if (nextBufferLine?.isWrapped && nextBufferLine.getCodePoint(0) !== 32 /* ' ' */) {\n          const nextLineWordPosition = this._getWordAt([0, coords[1] + 1], false, false, true);\n          if (nextLineWordPosition) {\n            length += nextLineWordPosition.length;\n          }\n        }\n      }\n    }\n\n    return { start, length };\n  }\n\n  /**\n   * Selects the word at the coordinates specified.\n   * @param coords The coordinates to get the word at.\n   * @param allowWhitespaceOnlySelection If whitespace should be selected\n   */\n  protected _selectWordAt(coords: [number, number], allowWhitespaceOnlySelection: boolean): void {\n    const wordPosition = this._getWordAt(coords, allowWhitespaceOnlySelection);\n    if (wordPosition) {\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        coords[1]--;\n      }\n      this._model.selectionStart = [wordPosition.start, coords[1]];\n      this._model.selectionStartLength = wordPosition.length;\n    }\n  }\n\n  /**\n   * Sets the selection end to the word at the coordinated specified.\n   * @param coords The coordinates to get the word at.\n   */\n  private _selectToWordAt(coords: [number, number]): void {\n    const wordPosition = this._getWordAt(coords, true);\n    if (wordPosition) {\n      let endRow = coords[1];\n\n      // Adjust negative start value\n      while (wordPosition.start < 0) {\n        wordPosition.start += this._bufferService.cols;\n        endRow--;\n      }\n\n      // Adjust wrapped length value, this only needs to happen when values are reversed as in that\n      // case we're interested in the start of the word, not the end\n      if (!this._model.areSelectionValuesReversed()) {\n        while (wordPosition.start + wordPosition.length > this._bufferService.cols) {\n          wordPosition.length -= this._bufferService.cols;\n          endRow++;\n        }\n      }\n\n      this._model.selectionEnd = [this._model.areSelectionValuesReversed() ? wordPosition.start : wordPosition.start + wordPosition.length, endRow];\n    }\n  }\n\n  /**\n   * Gets whether the character is considered a word separator by the select\n   * word logic.\n   * @param cell The cell to check.\n   */\n  private _isCharWordSeparator(cell: CellData): boolean {\n    // Zero width characters are never separators as they are always to the\n    // right of wide characters\n    if (cell.getWidth() === 0) {\n      return false;\n    }\n    return this._optionsService.rawOptions.wordSeparator.indexOf(cell.getChars()) >= 0;\n  }\n\n  /**\n   * Selects the line specified.\n   * @param line The line index.\n   */\n  protected _selectLineAt(line: number): void {\n    const wrappedRange = this._bufferService.buffer.getWrappedRangeForLine(line);\n    const range: IBufferRange = {\n      start: { x: 0, y: wrappedRange.first },\n      end: { x: this._bufferService.cols - 1, y: wrappedRange.last }\n    };\n    this._model.selectionStart = [0, wrappedRange.first];\n    this._model.selectionEnd = undefined;\n    this._model.selectionStartLength = getRangeLength(range, this._bufferService.cols);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent } from 'common/EventEmitter';\nimport { IRenderDimensions, IRenderer } from 'browser/renderer/shared/Types';\nimport { IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { ISelectionRedrawRequestEvent as ISelectionRequestRedrawEvent, ISelectionRequestScrollLinesEvent } from 'browser/selection/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { AllColorIndex, IDisposable } from 'common/Types';\n\nexport const ICharSizeService = createDecorator<ICharSizeService>('CharSizeService');\nexport interface ICharSizeService {\n  serviceBrand: undefined;\n\n  readonly width: number;\n  readonly height: number;\n  readonly hasValidSize: boolean;\n\n  readonly onCharSizeChange: IEvent<void>;\n\n  measure(): void;\n}\n\nexport const ICoreBrowserService = createDecorator<ICoreBrowserService>('CoreBrowserService');\nexport interface ICoreBrowserService {\n  serviceBrand: undefined;\n\n  readonly isFocused: boolean;\n  /**\n   * Parent window that the terminal is rendered into. DOM and rendering APIs\n   * (e.g. requestAnimationFrame) should be invoked in the context of this\n   * window.\n   */\n  readonly window: Window & typeof globalThis;\n  /**\n   * Helper for getting the devicePixelRatio of the parent window.\n   */\n  readonly dpr: number;\n}\n\nexport const IMouseService = createDecorator<IMouseService>('MouseService');\nexport interface IMouseService {\n  serviceBrand: undefined;\n\n  getCoords(event: {clientX: number, clientY: number}, element: HTMLElement, colCount: number, rowCount: number, isSelection?: boolean): [number, number] | undefined;\n  getMouseReportCoords(event: MouseEvent, element: HTMLElement): { col: number, row: number, x: number, y: number } | undefined;\n}\n\nexport const IRenderService = createDecorator<IRenderService>('RenderService');\nexport interface IRenderService extends IDisposable {\n  serviceBrand: undefined;\n\n  onDimensionsChange: IEvent<IRenderDimensions>;\n  /**\n   * Fires when buffer changes are rendered. This does not fire when only cursor\n   * or selections are rendered.\n   */\n  onRenderedViewportChange: IEvent<{ start: number, end: number }>;\n  /**\n   * Fires on render\n   */\n  onRender: IEvent<{ start: number, end: number }>;\n  onRefreshRequest: IEvent<{ start: number, end: number }>;\n\n  dimensions: IRenderDimensions;\n\n  addRefreshCallback(callback: FrameRequestCallback): number;\n\n  refreshRows(start: number, end: number): void;\n  clearTextureAtlas(): void;\n  resize(cols: number, rows: number): void;\n  hasRenderer(): boolean;\n  setRenderer(renderer: IRenderer): void;\n  handleDevicePixelRatioChange(): void;\n  handleResize(cols: number, rows: number): void;\n  handleCharSizeChanged(): void;\n  handleBlur(): void;\n  handleFocus(): void;\n  handleSelectionChanged(start: [number, number] | undefined, end: [number, number] | undefined, columnSelectMode: boolean): void;\n  handleCursorMove(): void;\n  clear(): void;\n}\n\nexport const ISelectionService = createDecorator<ISelectionService>('SelectionService');\nexport interface ISelectionService {\n  serviceBrand: undefined;\n\n  readonly selectionText: string;\n  readonly hasSelection: boolean;\n  readonly selectionStart: [number, number] | undefined;\n  readonly selectionEnd: [number, number] | undefined;\n\n  readonly onLinuxMouseSelection: IEvent<string>;\n  readonly onRequestRedraw: IEvent<ISelectionRequestRedrawEvent>;\n  readonly onRequestScrollLines: IEvent<ISelectionRequestScrollLinesEvent>;\n  readonly onSelectionChange: IEvent<void>;\n\n  disable(): void;\n  enable(): void;\n  reset(): void;\n  setSelection(row: number, col: number, length: number): void;\n  selectAll(): void;\n  selectLines(start: number, end: number): void;\n  clearSelection(): void;\n  rightClickSelect(event: MouseEvent): void;\n  shouldColumnSelect(event: KeyboardEvent | MouseEvent): boolean;\n  shouldForceSelection(event: MouseEvent): boolean;\n  refresh(isLinuxMouseSelection?: boolean): void;\n  handleMouseDown(event: MouseEvent): void;\n  isCellInSelection(x: number, y: number): boolean;\n}\n\nexport const ICharacterJoinerService = createDecorator<ICharacterJoinerService>('CharacterJoinerService');\nexport interface ICharacterJoinerService {\n  serviceBrand: undefined;\n\n  register(handler: (text: string) => [number, number][]): number;\n  deregister(joinerId: number): boolean;\n  getJoinedCharacters(row: number): [number, number][];\n}\n\nexport const IThemeService = createDecorator<IThemeService>('ThemeService');\nexport interface IThemeService {\n  serviceBrand: undefined;\n\n  readonly colors: ReadonlyColorSet;\n\n  readonly onChangeColors: IEvent<ReadonlyColorSet>;\n\n  restoreColor(slot?: AllColorIndex): void;\n  /**\n   * Allows external modifying of colors in the theme, this is used instead of {@link colors} to\n   * prevent accidental writes.\n   */\n  modifyColors(callback: (colors: IColorSet) => void): void;\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ColorContrastCache } from 'browser/ColorContrastCache';\nimport { IThemeService } from 'browser/services/Services';\nimport { IColorContrastCache, IColorSet, ReadonlyColorSet } from 'browser/Types';\nimport { channels, color, css, NULL_COLOR } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IOptionsService, ITheme } from 'common/services/Services';\nimport { AllColorIndex, IColor, SpecialColorIndex } from 'common/Types';\n\ninterface IRestoreColorSet {\n  foreground: IColor;\n  background: IColor;\n  cursor: IColor;\n  ansi: IColor[];\n}\n\n\nconst DEFAULT_FOREGROUND = css.toColor('#ffffff');\nconst DEFAULT_BACKGROUND = css.toColor('#000000');\nconst DEFAULT_CURSOR = css.toColor('#ffffff');\nconst DEFAULT_CURSOR_ACCENT = css.toColor('#000000');\nconst DEFAULT_SELECTION = {\n  css: 'rgba(255, 255, 255, 0.3)',\n  rgba: 0xFFFFFF4D\n};\n\n// An IIFE to generate DEFAULT_ANSI_COLORS.\nexport const DEFAULT_ANSI_COLORS = Object.freeze((() => {\n  const colors = [\n    // dark:\n    css.toColor('#2e3436'),\n    css.toColor('#cc0000'),\n    css.toColor('#4e9a06'),\n    css.toColor('#c4a000'),\n    css.toColor('#3465a4'),\n    css.toColor('#75507b'),\n    css.toColor('#06989a'),\n    css.toColor('#d3d7cf'),\n    // bright:\n    css.toColor('#555753'),\n    css.toColor('#ef2929'),\n    css.toColor('#8ae234'),\n    css.toColor('#fce94f'),\n    css.toColor('#729fcf'),\n    css.toColor('#ad7fa8'),\n    css.toColor('#34e2e2'),\n    css.toColor('#eeeeec')\n  ];\n\n  // Fill in the remaining 240 ANSI colors.\n  // Generate colors (16-231)\n  const v = [0x00, 0x5f, 0x87, 0xaf, 0xd7, 0xff];\n  for (let i = 0; i < 216; i++) {\n    const r = v[(i / 36) % 6 | 0];\n    const g = v[(i / 6) % 6 | 0];\n    const b = v[i % 6];\n    colors.push({\n      css: channels.toCss(r, g, b),\n      rgba: channels.toRgba(r, g, b)\n    });\n  }\n\n  // Generate greys (232-255)\n  for (let i = 0; i < 24; i++) {\n    const c = 8 + i * 10;\n    colors.push({\n      css: channels.toCss(c, c, c),\n      rgba: channels.toRgba(c, c, c)\n    });\n  }\n\n  return colors;\n})());\n\nexport class ThemeService extends Disposable implements IThemeService {\n  public serviceBrand: undefined;\n\n  private _colors: IColorSet;\n  private _contrastCache: IColorContrastCache = new ColorContrastCache();\n  private _halfContrastCache: IColorContrastCache = new ColorContrastCache();\n  private _restoreColors!: IRestoreColorSet;\n\n  public get colors(): ReadonlyColorSet { return this._colors; }\n\n  private readonly _onChangeColors = this.register(new EventEmitter<ReadonlyColorSet>());\n  public readonly onChangeColors = this._onChangeColors.event;\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n\n    this._colors = {\n      foreground: DEFAULT_FOREGROUND,\n      background: DEFAULT_BACKGROUND,\n      cursor: DEFAULT_CURSOR,\n      cursorAccent: DEFAULT_CURSOR_ACCENT,\n      selectionForeground: undefined,\n      selectionBackgroundTransparent: DEFAULT_SELECTION,\n      selectionBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      selectionInactiveBackgroundTransparent: DEFAULT_SELECTION,\n      selectionInactiveBackgroundOpaque: color.blend(DEFAULT_BACKGROUND, DEFAULT_SELECTION),\n      ansi: DEFAULT_ANSI_COLORS.slice(),\n      contrastCache: this._contrastCache,\n      halfContrastCache: this._halfContrastCache\n    };\n    this._updateRestoreColors();\n    this._setTheme(this._optionsService.rawOptions.theme);\n\n    this.register(this._optionsService.onSpecificOptionChange('minimumContrastRatio', () => this._contrastCache.clear()));\n    this.register(this._optionsService.onSpecificOptionChange('theme', () => this._setTheme(this._optionsService.rawOptions.theme)));\n  }\n\n  /**\n   * Sets the terminal's theme.\n   * @param theme The  theme to use. If a partial theme is provided then default\n   * colors will be used where colors are not defined.\n   */\n  private _setTheme(theme: ITheme = {}): void {\n    const colors = this._colors;\n    colors.foreground = parseColor(theme.foreground, DEFAULT_FOREGROUND);\n    colors.background = parseColor(theme.background, DEFAULT_BACKGROUND);\n    colors.cursor = parseColor(theme.cursor, DEFAULT_CURSOR);\n    colors.cursorAccent = parseColor(theme.cursorAccent, DEFAULT_CURSOR_ACCENT);\n    colors.selectionBackgroundTransparent = parseColor(theme.selectionBackground, DEFAULT_SELECTION);\n    colors.selectionBackgroundOpaque = color.blend(colors.background, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundTransparent = parseColor(theme.selectionInactiveBackground, colors.selectionBackgroundTransparent);\n    colors.selectionInactiveBackgroundOpaque = color.blend(colors.background, colors.selectionInactiveBackgroundTransparent);\n    colors.selectionForeground = theme.selectionForeground ? parseColor(theme.selectionForeground, NULL_COLOR) : undefined;\n    if (colors.selectionForeground === NULL_COLOR) {\n      colors.selectionForeground = undefined;\n    }\n\n    /**\n     * If selection color is opaque, blend it with background with 0.3 opacity\n     * Issue #2737\n     */\n    if (color.isOpaque(colors.selectionBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionBackgroundTransparent = color.opacity(colors.selectionBackgroundTransparent, opacity);\n    }\n    if (color.isOpaque(colors.selectionInactiveBackgroundTransparent)) {\n      const opacity = 0.3;\n      colors.selectionInactiveBackgroundTransparent = color.opacity(colors.selectionInactiveBackgroundTransparent, opacity);\n    }\n    colors.ansi = DEFAULT_ANSI_COLORS.slice();\n    colors.ansi[0] = parseColor(theme.black, DEFAULT_ANSI_COLORS[0]);\n    colors.ansi[1] = parseColor(theme.red, DEFAULT_ANSI_COLORS[1]);\n    colors.ansi[2] = parseColor(theme.green, DEFAULT_ANSI_COLORS[2]);\n    colors.ansi[3] = parseColor(theme.yellow, DEFAULT_ANSI_COLORS[3]);\n    colors.ansi[4] = parseColor(theme.blue, DEFAULT_ANSI_COLORS[4]);\n    colors.ansi[5] = parseColor(theme.magenta, DEFAULT_ANSI_COLORS[5]);\n    colors.ansi[6] = parseColor(theme.cyan, DEFAULT_ANSI_COLORS[6]);\n    colors.ansi[7] = parseColor(theme.white, DEFAULT_ANSI_COLORS[7]);\n    colors.ansi[8] = parseColor(theme.brightBlack, DEFAULT_ANSI_COLORS[8]);\n    colors.ansi[9] = parseColor(theme.brightRed, DEFAULT_ANSI_COLORS[9]);\n    colors.ansi[10] = parseColor(theme.brightGreen, DEFAULT_ANSI_COLORS[10]);\n    colors.ansi[11] = parseColor(theme.brightYellow, DEFAULT_ANSI_COLORS[11]);\n    colors.ansi[12] = parseColor(theme.brightBlue, DEFAULT_ANSI_COLORS[12]);\n    colors.ansi[13] = parseColor(theme.brightMagenta, DEFAULT_ANSI_COLORS[13]);\n    colors.ansi[14] = parseColor(theme.brightCyan, DEFAULT_ANSI_COLORS[14]);\n    colors.ansi[15] = parseColor(theme.brightWhite, DEFAULT_ANSI_COLORS[15]);\n    if (theme.extendedAnsi) {\n      const colorCount = Math.min(colors.ansi.length - 16, theme.extendedAnsi.length);\n      for (let i = 0; i < colorCount; i++) {\n        colors.ansi[i + 16] = parseColor(theme.extendedAnsi[i], DEFAULT_ANSI_COLORS[i + 16]);\n      }\n    }\n    // Clear our the cache\n    this._contrastCache.clear();\n    this._halfContrastCache.clear();\n    this._updateRestoreColors();\n    this._onChangeColors.fire(this.colors);\n  }\n\n  public restoreColor(slot?: AllColorIndex): void {\n    this._restoreColor(slot);\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _restoreColor(slot: AllColorIndex | undefined): void {\n    // unset slot restores all ansi colors\n    if (slot === undefined) {\n      for (let i = 0; i < this._restoreColors.ansi.length; ++i) {\n        this._colors.ansi[i] = this._restoreColors.ansi[i];\n      }\n      return;\n    }\n    switch (slot) {\n      case SpecialColorIndex.FOREGROUND:\n        this._colors.foreground = this._restoreColors.foreground;\n        break;\n      case SpecialColorIndex.BACKGROUND:\n        this._colors.background = this._restoreColors.background;\n        break;\n      case SpecialColorIndex.CURSOR:\n        this._colors.cursor = this._restoreColors.cursor;\n        break;\n      default:\n        this._colors.ansi[slot] = this._restoreColors.ansi[slot];\n    }\n  }\n\n  public modifyColors(callback: (colors: IColorSet) => void): void {\n    callback(this._colors);\n    // Assume the change happened\n    this._onChangeColors.fire(this.colors);\n  }\n\n  private _updateRestoreColors(): void {\n    this._restoreColors = {\n      foreground: this._colors.foreground,\n      background: this._colors.background,\n      cursor: this._colors.cursor,\n      ansi: this._colors.ansi.slice()\n    };\n  }\n}\n\nfunction parseColor(\n  cssString: string | undefined,\n  fallback: IColor\n): IColor {\n  if (cssString !== undefined) {\n    try {\n      return css.toColor(cssString);\n    } catch {\n      // no-op\n    }\n  }\n  return fallback;\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICircularList } from 'common/Types';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\nexport interface IInsertEvent {\n  index: number;\n  amount: number;\n}\n\nexport interface IDeleteEvent {\n  index: number;\n  amount: number;\n}\n\n/**\n * Represents a circular list; a list with a maximum size that wraps around when push is called,\n * overriding values at the start of the list.\n */\nexport class CircularList<T> extends Disposable implements ICircularList<T> {\n  protected _array: (T | undefined)[];\n  private _startIndex: number;\n  private _length: number;\n\n  public readonly onDeleteEmitter = this.register(new EventEmitter<IDeleteEvent>());\n  public readonly onDelete = this.onDeleteEmitter.event;\n  public readonly onInsertEmitter = this.register(new EventEmitter<IInsertEvent>());\n  public readonly onInsert = this.onInsertEmitter.event;\n  public readonly onTrimEmitter = this.register(new EventEmitter<number>());\n  public readonly onTrim = this.onTrimEmitter.event;\n\n  constructor(\n    private _maxLength: number\n  ) {\n    super();\n    this._array = new Array<T>(this._maxLength);\n    this._startIndex = 0;\n    this._length = 0;\n  }\n\n  public get maxLength(): number {\n    return this._maxLength;\n  }\n\n  public set maxLength(newMaxLength: number) {\n    // There was no change in maxLength, return early.\n    if (this._maxLength === newMaxLength) {\n      return;\n    }\n\n    // Reconstruct array, starting at index 0. Only transfer values from the\n    // indexes 0 to length.\n    const newArray = new Array<T | undefined>(newMaxLength);\n    for (let i = 0; i < Math.min(newMaxLength, this.length); i++) {\n      newArray[i] = this._array[this._getCyclicIndex(i)];\n    }\n    this._array = newArray;\n    this._maxLength = newMaxLength;\n    this._startIndex = 0;\n  }\n\n  public get length(): number {\n    return this._length;\n  }\n\n  public set length(newLength: number) {\n    if (newLength > this._length) {\n      for (let i = this._length; i < newLength; i++) {\n        this._array[i] = undefined;\n      }\n    }\n    this._length = newLength;\n  }\n\n  /**\n   * Gets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index of the value to get.\n   * @returns The value corresponding to the index.\n   */\n  public get(index: number): T | undefined {\n    return this._array[this._getCyclicIndex(index)];\n  }\n\n  /**\n   * Sets the value at an index.\n   *\n   * Note that for performance reasons there is no bounds checking here, the index reference is\n   * circular so this should always return a value and never throw.\n   * @param index The index to set.\n   * @param value The value to set.\n   */\n  public set(index: number, value: T | undefined): void {\n    this._array[this._getCyclicIndex(index)] = value;\n  }\n\n  /**\n   * Pushes a new value onto the list, wrapping around to the start of the array, overriding index 0\n   * if the maximum length is reached.\n   * @param value The value to push onto the list.\n   */\n  public push(value: T): void {\n    this._array[this._getCyclicIndex(this._length)] = value;\n    if (this._length === this._maxLength) {\n      this._startIndex = ++this._startIndex % this._maxLength;\n      this.onTrimEmitter.fire(1);\n    } else {\n      this._length++;\n    }\n  }\n\n  /**\n   * Advance ringbuffer index and return current element for recycling.\n   * Note: The buffer must be full for this method to work.\n   * @throws When the buffer is not full.\n   */\n  public recycle(): T {\n    if (this._length !== this._maxLength) {\n      throw new Error('Can only recycle when the buffer is full');\n    }\n    this._startIndex = ++this._startIndex % this._maxLength;\n    this.onTrimEmitter.fire(1);\n    return this._array[this._getCyclicIndex(this._length - 1)]!;\n  }\n\n  /**\n   * Ringbuffer is at max length.\n   */\n  public get isFull(): boolean {\n    return this._length === this._maxLength;\n  }\n\n  /**\n   * Removes and returns the last value on the list.\n   * @returns The popped value.\n   */\n  public pop(): T | undefined {\n    return this._array[this._getCyclicIndex(this._length-- - 1)];\n  }\n\n  /**\n   * Deletes and/or inserts items at a particular index (in that order). Unlike\n   * Array.prototype.splice, this operation does not return the deleted items as a new array in\n   * order to save creating a new array. Note that this operation may shift all values in the list\n   * in the worst case.\n   * @param start The index to delete and/or insert.\n   * @param deleteCount The number of elements to delete.\n   * @param items The items to insert.\n   */\n  public splice(start: number, deleteCount: number, ...items: T[]): void {\n    // Delete items\n    if (deleteCount) {\n      for (let i = start; i < this._length - deleteCount; i++) {\n        this._array[this._getCyclicIndex(i)] = this._array[this._getCyclicIndex(i + deleteCount)];\n      }\n      this._length -= deleteCount;\n      this.onDeleteEmitter.fire({ index: start, amount: deleteCount });\n    }\n\n    // Add items\n    for (let i = this._length - 1; i >= start; i--) {\n      this._array[this._getCyclicIndex(i + items.length)] = this._array[this._getCyclicIndex(i)];\n    }\n    for (let i = 0; i < items.length; i++) {\n      this._array[this._getCyclicIndex(start + i)] = items[i];\n    }\n    if (items.length) {\n      this.onInsertEmitter.fire({ index: start, amount: items.length });\n    }\n\n    // Adjust length as needed\n    if (this._length + items.length > this._maxLength) {\n      const countToTrim = (this._length + items.length) - this._maxLength;\n      this._startIndex += countToTrim;\n      this._length = this._maxLength;\n      this.onTrimEmitter.fire(countToTrim);\n    } else {\n      this._length += items.length;\n    }\n  }\n\n  /**\n   * Trims a number of items from the start of the list.\n   * @param count The number of items to remove.\n   */\n  public trimStart(count: number): void {\n    if (count > this._length) {\n      count = this._length;\n    }\n    this._startIndex += count;\n    this._length -= count;\n    this.onTrimEmitter.fire(count);\n  }\n\n  public shiftElements(start: number, count: number, offset: number): void {\n    if (count <= 0) {\n      return;\n    }\n    if (start < 0 || start >= this._length) {\n      throw new Error('start argument out of range');\n    }\n    if (start + offset < 0) {\n      throw new Error('Cannot shift elements in list beyond index 0');\n    }\n\n    if (offset > 0) {\n      for (let i = count - 1; i >= 0; i--) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n      const expandListBy = (start + count + offset) - this._length;\n      if (expandListBy > 0) {\n        this._length += expandListBy;\n        while (this._length > this._maxLength) {\n          this._length--;\n          this._startIndex++;\n          this.onTrimEmitter.fire(1);\n        }\n      }\n    } else {\n      for (let i = 0; i < count; i++) {\n        this.set(start + i + offset, this.get(start + i));\n      }\n    }\n  }\n\n  /**\n   * Gets the cyclic index for the specified regular index. The cyclic index can then be used on the\n   * backing array to get the element associated with the regular index.\n   * @param index The regular index.\n   * @returns The cyclic index.\n   */\n  private _getCyclicIndex(index: number): number {\n    return (this._startIndex + index) % this._maxLength;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/*\n * A simple utility for cloning values\n */\nexport function clone<T>(val: T, depth: number = 5): T {\n  if (typeof val !== 'object') {\n    return val;\n  }\n\n  // If we're cloning an array, use an array as the base, otherwise use an object\n  const clonedObject: any = Array.isArray(val) ? [] : {};\n\n  for (const key in val) {\n    // Recursively clone eack item unless we're at the maximum depth\n    clonedObject[key] = depth <= 1 ? val[key] : (val[key] && clone(val[key], depth - 1));\n  }\n\n  return clonedObject as T;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\nimport { IColor, IColorRGB } from 'common/Types';\n\nlet $r = 0;\nlet $g = 0;\nlet $b = 0;\nlet $a = 0;\n\nexport const NULL_COLOR: IColor = {\n  css: '#00000000',\n  rgba: 0\n};\n\n/**\n * Helper functions where the source type is \"channels\" (individual color channels as numbers).\n */\nexport namespace channels {\n  export function toCss(r: number, g: number, b: number, a?: number): string {\n    if (a !== undefined) {\n      return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}${toPaddedHex(a)}`;\n    }\n    return `#${toPaddedHex(r)}${toPaddedHex(g)}${toPaddedHex(b)}`;\n  }\n\n  export function toRgba(r: number, g: number, b: number, a: number = 0xFF): number {\n    // Note: The aggregated number is RGBA32 (BE), thus needs to be converted to ABGR32\n    // on LE systems, before it can be used for direct 32-bit buffer writes.\n    // >>> 0 forces an unsigned int\n    return (r << 24 | g << 16 | b << 8 | a) >>> 0;\n  }\n}\n\n/**\n * Helper functions where the source type is `IColor`.\n */\nexport namespace color {\n  export function blend(bg: IColor, fg: IColor): IColor {\n    $a = (fg.rgba & 0xFF) / 255;\n    if ($a === 1) {\n      return {\n        css: fg.css,\n        rgba: fg.rgba\n      };\n    }\n    const fgR = (fg.rgba >> 24) & 0xFF;\n    const fgG = (fg.rgba >> 16) & 0xFF;\n    const fgB = (fg.rgba >> 8) & 0xFF;\n    const bgR = (bg.rgba >> 24) & 0xFF;\n    const bgG = (bg.rgba >> 16) & 0xFF;\n    const bgB = (bg.rgba >> 8) & 0xFF;\n    $r = bgR + Math.round((fgR - bgR) * $a);\n    $g = bgG + Math.round((fgG - bgG) * $a);\n    $b = bgB + Math.round((fgB - bgB) * $a);\n    const css = channels.toCss($r, $g, $b);\n    const rgba = channels.toRgba($r, $g, $b);\n    return { css, rgba };\n  }\n\n  export function isOpaque(color: IColor): boolean {\n    return (color.rgba & 0xFF) === 0xFF;\n  }\n\n  export function ensureContrastRatio(bg: IColor, fg: IColor, ratio: number): IColor | undefined {\n    const result = rgba.ensureContrastRatio(bg.rgba, fg.rgba, ratio);\n    if (!result) {\n      return undefined;\n    }\n    return rgba.toColor(\n      (result >> 24 & 0xFF),\n      (result >> 16 & 0xFF),\n      (result >> 8  & 0xFF)\n    );\n  }\n\n  export function opaque(color: IColor): IColor {\n    const rgbaColor = (color.rgba | 0xFF) >>> 0;\n    [$r, $g, $b] = rgba.toChannels(rgbaColor);\n    return {\n      css: channels.toCss($r, $g, $b),\n      rgba: rgbaColor\n    };\n  }\n\n  export function opacity(color: IColor, opacity: number): IColor {\n    $a = Math.round(opacity * 0xFF);\n    [$r, $g, $b] = rgba.toChannels(color.rgba);\n    return {\n      css: channels.toCss($r, $g, $b, $a),\n      rgba: channels.toRgba($r, $g, $b, $a)\n    };\n  }\n\n  export function multiplyOpacity(color: IColor, factor: number): IColor {\n    $a = color.rgba & 0xFF;\n    return opacity(color, ($a * factor) / 0xFF);\n  }\n\n  export function toColorRGB(color: IColor): IColorRGB {\n    return [(color.rgba >> 24) & 0xFF, (color.rgba >> 16) & 0xFF, (color.rgba >> 8) & 0xFF];\n  }\n}\n\n/**\n * Helper functions where the source type is \"css\" (string: '#rgb', '#rgba', '#rrggbb',\n * '#rrggbbaa').\n */\nexport namespace css {\n  let $ctx: CanvasRenderingContext2D | undefined;\n  let $litmusColor: CanvasGradient | undefined;\n  if (!isNode) {\n    const canvas = document.createElement('canvas');\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext('2d', {\n      willReadFrequently: true\n    });\n    if (ctx) {\n      $ctx = ctx;\n      $ctx.globalCompositeOperation = 'copy';\n      $litmusColor = $ctx.createLinearGradient(0, 0, 1, 1);\n    }\n  }\n\n  /**\n   * Converts a css string to an IColor, this should handle all valid CSS color strings and will\n   * throw if it's invalid. The ideal format to use is `#rrggbb[aa]` as it's the fastest to parse.\n   *\n   * Only `#rgb[a]`, `#rrggbb[aa]`, `rgb()` and `rgba()` formats are supported when run in a Node\n   * environment.\n   */\n  export function toColor(css: string): IColor {\n    // Formats: #rgb[a] and #rrggbb[aa]\n    if (css.match(/#[\\da-f]{3,8}/i)) {\n      switch (css.length) {\n        case 4: { // #rgb\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          return rgba.toColor($r, $g, $b);\n        }\n        case 5: { // #rgba\n          $r = parseInt(css.slice(1, 2).repeat(2), 16);\n          $g = parseInt(css.slice(2, 3).repeat(2), 16);\n          $b = parseInt(css.slice(3, 4).repeat(2), 16);\n          $a = parseInt(css.slice(4, 5).repeat(2), 16);\n          return rgba.toColor($r, $g, $b, $a);\n        }\n        case 7: // #rrggbb\n          return {\n            css,\n            rgba: (parseInt(css.slice(1), 16) << 8 | 0xFF) >>> 0\n          };\n        case 9: // #rrggbbaa\n          return {\n            css,\n            rgba: parseInt(css.slice(1), 16) >>> 0\n          };\n      }\n    }\n\n    // Formats: rgb() or rgba()\n    const rgbaMatch = css.match(/rgba?\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*(,\\s*(0|1|\\d?\\.(\\d+))\\s*)?\\)/);\n    if (rgbaMatch) {\n      $r = parseInt(rgbaMatch[1]);\n      $g = parseInt(rgbaMatch[2]);\n      $b = parseInt(rgbaMatch[3]);\n      $a = Math.round((rgbaMatch[5] === undefined ? 1 : parseFloat(rgbaMatch[5])) * 0xFF);\n      return rgba.toColor($r, $g, $b, $a);\n    }\n\n    // Validate the context is available for canvas-based color parsing\n    if (!$ctx || !$litmusColor) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Validate the color using canvas fillStyle\n    // See https://html.spec.whatwg.org/multipage/canvas.html#fill-and-stroke-styles\n    $ctx.fillStyle = $litmusColor;\n    $ctx.fillStyle = css;\n    if (typeof $ctx.fillStyle !== 'string') {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    $ctx.fillRect(0, 0, 1, 1);\n    [$r, $g, $b, $a] = $ctx.getImageData(0, 0, 1, 1).data;\n\n    // Validate the color is non-transparent as color hue gets lost when drawn to the canvas\n    if ($a !== 0xFF) {\n      throw new Error('css.toColor: Unsupported css format');\n    }\n\n    // Extract the color from the canvas' fillStyle property which exposes the color value in rgba()\n    // format\n    // See https://html.spec.whatwg.org/multipage/canvas.html#serialisation-of-a-color\n    return {\n      rgba: channels.toRgba($r, $g, $b, $a),\n      css\n    };\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgb\" (number: 0xrrggbb).\n */\nexport namespace rgb {\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param rgb The color to use.\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance(rgb: number): number {\n    return relativeLuminance2(\n      (rgb >> 16) & 0xFF,\n      (rgb >> 8 ) & 0xFF,\n      (rgb      ) & 0xFF);\n  }\n\n  /**\n   * Gets the relative luminance of an RGB color, this is useful in determining the contrast ratio\n   * between two colors.\n   * @param r The red channel (0x00 to 0xFF).\n   * @param g The green channel (0x00 to 0xFF).\n   * @param b The blue channel (0x00 to 0xFF).\n   * @see https://www.w3.org/TR/WCAG20/#relativeluminancedef\n   */\n  export function relativeLuminance2(r: number, g: number, b: number): number {\n    const rs = r / 255;\n    const gs = g / 255;\n    const bs = b / 255;\n    const rr = rs <= 0.03928 ? rs / 12.92 : Math.pow((rs + 0.055) / 1.055, 2.4);\n    const rg = gs <= 0.03928 ? gs / 12.92 : Math.pow((gs + 0.055) / 1.055, 2.4);\n    const rb = bs <= 0.03928 ? bs / 12.92 : Math.pow((bs + 0.055) / 1.055, 2.4);\n    return rr * 0.2126 + rg * 0.7152 + rb * 0.0722;\n  }\n}\n\n/**\n * Helper functions where the source type is \"rgba\" (number: 0xrrggbbaa).\n */\nexport namespace rgba {\n  /**\n   * Given a foreground color and a background color, either increase or reduce the luminance of the\n   * foreground color until the specified contrast ratio is met. If pure white or black is hit\n   * without the contrast ratio being met, go the other direction using the background color as the\n   * foreground color and take either the first or second result depending on which has the higher\n   * contrast ratio.\n   *\n   * `undefined` will be returned if the contrast ratio is already met.\n   *\n   * @param bgRgba The background color in rgba format.\n   * @param fgRgba The foreground color in rgba format.\n   * @param ratio The contrast ratio to achieve.\n   */\n  export function ensureContrastRatio(bgRgba: number, fgRgba: number, ratio: number): number | undefined {\n    const bgL = rgb.relativeLuminance(bgRgba >> 8);\n    const fgL = rgb.relativeLuminance(fgRgba >> 8);\n    const cr = contrastRatio(bgL, fgL);\n    if (cr < ratio) {\n      if (fgL < bgL) {\n        const resultA = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n        if (resultARatio < ratio) {\n          const resultB = increaseLuminance(bgRgba, fgRgba, ratio);\n          const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n          return resultARatio > resultBRatio ? resultA : resultB;\n        }\n        return resultA;\n      }\n      const resultA = increaseLuminance(bgRgba, fgRgba, ratio);\n      const resultARatio = contrastRatio(bgL, rgb.relativeLuminance(resultA >> 8));\n      if (resultARatio < ratio) {\n        const resultB = reduceLuminance(bgRgba, fgRgba, ratio);\n        const resultBRatio = contrastRatio(bgL, rgb.relativeLuminance(resultB >> 8));\n        return resultARatio > resultBRatio ? resultA : resultB;\n      }\n      return resultA;\n    }\n    return undefined;\n  }\n\n  export function reduceLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to reducing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR > 0 || fgG > 0 || fgB > 0)) {\n      // Reduce by 10% until the ratio is hit\n      fgR -= Math.max(0, Math.ceil(fgR * 0.1));\n      fgG -= Math.max(0, Math.ceil(fgG * 0.1));\n      fgB -= Math.max(0, Math.ceil(fgB * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  export function increaseLuminance(bgRgba: number, fgRgba: number, ratio: number): number {\n    // This is a naive but fast approach to increasing luminance as converting to\n    // HSL and back is expensive\n    const bgR = (bgRgba >> 24) & 0xFF;\n    const bgG = (bgRgba >> 16) & 0xFF;\n    const bgB = (bgRgba >>  8) & 0xFF;\n    let fgR = (fgRgba >> 24) & 0xFF;\n    let fgG = (fgRgba >> 16) & 0xFF;\n    let fgB = (fgRgba >>  8) & 0xFF;\n    let cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    while (cr < ratio && (fgR < 0xFF || fgG < 0xFF || fgB < 0xFF)) {\n      // Increase by 10% until the ratio is hit\n      fgR = Math.min(0xFF, fgR + Math.ceil((255 - fgR) * 0.1));\n      fgG = Math.min(0xFF, fgG + Math.ceil((255 - fgG) * 0.1));\n      fgB = Math.min(0xFF, fgB + Math.ceil((255 - fgB) * 0.1));\n      cr = contrastRatio(rgb.relativeLuminance2(fgR, fgG, fgB), rgb.relativeLuminance2(bgR, bgG, bgB));\n    }\n    return (fgR << 24 | fgG << 16 | fgB << 8 | 0xFF) >>> 0;\n  }\n\n  // FIXME: Move this to channels NS?\n  export function toChannels(value: number): [number, number, number, number] {\n    return [(value >> 24) & 0xFF, (value >> 16) & 0xFF, (value >> 8) & 0xFF, value & 0xFF];\n  }\n\n  export function toColor(r: number, g: number, b: number, a?: number): IColor {\n    return {\n      css: channels.toCss(r, g, b, a),\n      rgba: channels.toRgba(r, g, b, a)\n    };\n  }\n}\n\nexport function toPaddedHex(c: number): string {\n  const s = c.toString(16);\n  return s.length < 2 ? '0' + s : s;\n}\n\n/**\n * Gets the contrast ratio between two relative luminance values.\n * @param l1 The first relative luminance.\n * @param l2 The first relative luminance.\n * @see https://www.w3.org/TR/WCAG20/#contrast-ratiodef\n */\nexport function contrastRatio(l1: number, l2: number): number {\n  if (l1 < l2) {\n    return (l2 + 0.05) / (l1 + 0.05);\n  }\n  return (l1 + 0.05) / (l2 + 0.05);\n}\n", "/**\n * Copyright (c) 2014-2020 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n *\n * Originally forked from (with the author's permission):\n *   Fabrice Bellard's javascript vt100 for jslinux:\n *   http://bellard.org/jslinux/\n *   Copyright (c) 2011 Fabrice Bellard\n *   The original design remains. The terminal itself\n *   has been extended to include xterm CSI codes, among\n *   other features.\n *\n * Terminal Emulation References:\n *   http://vt100.net/\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.txt\n *   http://invisible-island.net/xterm/ctlseqs/ctlseqs.html\n *   http://invisible-island.net/vttest/\n *   http://www.inwap.com/pdp10/ansicode.txt\n *   http://linux.die.net/man/4/console_codes\n *   http://linux.die.net/man/7/urxvt\n */\n\nimport { Disposable, MutableDisposable, toDisposable } from 'common/Lifecycle';\nimport { IInstantiationService, IOptionsService, IBufferService, ILogService, ICharsetService, ICoreService, ICoreMouseService, IUnicodeService, LogLevelEnum, ITerminalOptions, IOscLinkService } from 'common/services/Services';\nimport { InstantiationService } from 'common/services/InstantiationService';\nimport { LogService } from 'common/services/LogService';\nimport { BufferService, MINIMUM_COLS, MINIMUM_ROWS } from 'common/services/BufferService';\nimport { OptionsService } from 'common/services/OptionsService';\nimport { IDisposable, IAttributeData, ICoreTerminal, IScrollEvent, ScrollSource } from 'common/Types';\nimport { CoreService } from 'common/services/CoreService';\nimport { EventEmitter, IEvent, forwardEvent } from 'common/EventEmitter';\nimport { CoreMouseService } from 'common/services/CoreMouseService';\nimport { UnicodeService } from 'common/services/UnicodeService';\nimport { CharsetService } from 'common/services/CharsetService';\nimport { updateWindowsModeWrappedState } from 'common/WindowsMode';\nimport { IFunctionIdentifier, IParams } from 'common/parser/Types';\nimport { IBufferSet } from 'common/buffer/Types';\nimport { InputHandler } from 'common/InputHandler';\nimport { WriteBuffer } from 'common/input/WriteBuffer';\nimport { OscLinkService } from 'common/services/OscLinkService';\n\n// Only trigger this warning a single time per session\nlet hasWriteSyncWarnHappened = false;\n\nexport abstract class CoreTerminal extends Disposable implements ICoreTerminal {\n  protected readonly _instantiationService: IInstantiationService;\n  protected readonly _bufferService: IBufferService;\n  protected readonly _logService: ILogService;\n  protected readonly _charsetService: ICharsetService;\n  protected readonly _oscLinkService: IOscLinkService;\n\n  public readonly coreMouseService: ICoreMouseService;\n  public readonly coreService: ICoreService;\n  public readonly unicodeService: IUnicodeService;\n  public readonly optionsService: IOptionsService;\n\n  protected _inputHandler: InputHandler;\n  private _writeBuffer: WriteBuffer;\n  private _windowsWrappingHeuristics = this.register(new MutableDisposable());\n\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  protected _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  protected readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  /**\n   * Internally we track the source of the scroll but this is meaningless outside the library so\n   * it's filtered out.\n   */\n  protected _onScrollApi?: EventEmitter<number, void>;\n  protected _onScroll = this.register(new EventEmitter<IScrollEvent, void>());\n  public get onScroll(): IEvent<number, void> {\n    if (!this._onScrollApi) {\n      this._onScrollApi = this.register(new EventEmitter<number, void>());\n      this._onScroll.event(ev => {\n        this._onScrollApi?.fire(ev.position);\n      });\n    }\n    return this._onScrollApi.event;\n  }\n\n  public get cols(): number { return this._bufferService.cols; }\n  public get rows(): number { return this._bufferService.rows; }\n  public get buffers(): IBufferSet { return this._bufferService.buffers; }\n  public get options(): Required<ITerminalOptions> { return this.optionsService.options; }\n  public set options(options: ITerminalOptions) {\n    for (const key in options) {\n      this.optionsService.options[key] = options[key];\n    }\n  }\n\n  constructor(\n    options: Partial<ITerminalOptions>\n  ) {\n    super();\n\n    // Setup and initialize services\n    this._instantiationService = new InstantiationService();\n    this.optionsService = this.register(new OptionsService(options));\n    this._instantiationService.setService(IOptionsService, this.optionsService);\n    this._bufferService = this.register(this._instantiationService.createInstance(BufferService));\n    this._instantiationService.setService(IBufferService, this._bufferService);\n    this._logService = this.register(this._instantiationService.createInstance(LogService));\n    this._instantiationService.setService(ILogService, this._logService);\n    this.coreService = this.register(this._instantiationService.createInstance(CoreService));\n    this._instantiationService.setService(ICoreService, this.coreService);\n    this.coreMouseService = this.register(this._instantiationService.createInstance(CoreMouseService));\n    this._instantiationService.setService(ICoreMouseService, this.coreMouseService);\n    this.unicodeService = this.register(this._instantiationService.createInstance(UnicodeService));\n    this._instantiationService.setService(IUnicodeService, this.unicodeService);\n    this._charsetService = this._instantiationService.createInstance(CharsetService);\n    this._instantiationService.setService(ICharsetService, this._charsetService);\n    this._oscLinkService = this._instantiationService.createInstance(OscLinkService);\n    this._instantiationService.setService(IOscLinkService, this._oscLinkService);\n\n    // Register input handler and handle/forward events\n    this._inputHandler = this.register(new InputHandler(this._bufferService, this._charsetService, this.coreService, this._logService, this.optionsService, this._oscLinkService, this.coreMouseService, this.unicodeService));\n    this.register(forwardEvent(this._inputHandler.onLineFeed, this._onLineFeed));\n    this.register(this._inputHandler);\n\n    // Setup listeners\n    this.register(forwardEvent(this._bufferService.onResize, this._onResize));\n    this.register(forwardEvent(this.coreService.onData, this._onData));\n    this.register(forwardEvent(this.coreService.onBinary, this._onBinary));\n    this.register(this.coreService.onRequestScrollToBottom(() => this.scrollToBottom()));\n    this.register(this.coreService.onUserInput(() =>  this._writeBuffer.handleUserInput()));\n    this.register(this.optionsService.onMultipleOptionChange(['windowsMode', 'windowsPty'], () => this._handleWindowsPtyOptionChange()));\n    this.register(this._bufferService.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n    this.register(this._inputHandler.onScroll(event => {\n      this._onScroll.fire({ position: this._bufferService.buffer.ydisp, source: ScrollSource.TERMINAL });\n      this._inputHandler.markRangeDirty(this._bufferService.buffer.scrollTop, this._bufferService.buffer.scrollBottom);\n    }));\n\n    // Setup WriteBuffer\n    this._writeBuffer = this.register(new WriteBuffer((data, promiseResult) => this._inputHandler.parse(data, promiseResult)));\n    this.register(forwardEvent(this._writeBuffer.onWriteParsed, this._onWriteParsed));\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._writeBuffer.write(data, callback);\n  }\n\n  /**\n   * Write data to terminal synchonously.\n   *\n   * This method is unreliable with async parser handlers, thus should not\n   * be used anymore. If you need blocking semantics on data input consider\n   * `write` with a callback instead.\n   *\n   * @deprecated Unreliable, will be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    if (this._logService.logLevel <= LogLevelEnum.WARN && !hasWriteSyncWarnHappened) {\n      this._logService.warn('writeSync is unreliable and will be removed soon.');\n      hasWriteSyncWarnHappened = true;\n    }\n    this._writeBuffer.writeSync(data, maxSubsequentCalls);\n  }\n\n  public resize(x: number, y: number): void {\n    if (isNaN(x) || isNaN(y)) {\n      return;\n    }\n\n    x = Math.max(x, MINIMUM_COLS);\n    y = Math.max(y, MINIMUM_ROWS);\n\n    this._bufferService.resize(x, y);\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    this._bufferService.scroll(eraseAttr, isWrapped);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used to avoid\n   * unwanted events being handled by the viewport when the event was triggered from the viewport\n   * originally.\n   * @param source Which component the event came from.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    this._bufferService.scrollLines(disp, suppressScrollEvent, source);\n  }\n\n  public scrollPages(pageCount: number): void {\n    this.scrollLines(pageCount * (this.rows - 1));\n  }\n\n  public scrollToTop(): void {\n    this.scrollLines(-this._bufferService.buffer.ydisp);\n  }\n\n  public scrollToBottom(): void {\n    this.scrollLines(this._bufferService.buffer.ybase - this._bufferService.buffer.ydisp);\n  }\n\n  public scrollToLine(line: number): void {\n    const scrollAmount = line - this._bufferService.buffer.ydisp;\n    if (scrollAmount !== 0) {\n      this.scrollLines(scrollAmount);\n    }\n  }\n\n  /** Add handler for ESC escape sequence. See xterm.d.ts for details. */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerEscHandler(id, callback);\n  }\n\n  /** Add handler for DCS escape sequence. See xterm.d.ts for details. */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerDcsHandler(id, callback);\n  }\n\n  /** Add handler for CSI escape sequence. See xterm.d.ts for details. */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerCsiHandler(id, callback);\n  }\n\n  /** Add handler for OSC escape sequence. See xterm.d.ts for details. */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._inputHandler.registerOscHandler(ident, callback);\n  }\n\n  protected _setup(): void {\n    this._handleWindowsPtyOptionChange();\n  }\n\n  public reset(): void {\n    this._inputHandler.reset();\n    this._bufferService.reset();\n    this._charsetService.reset();\n    this.coreService.reset();\n    this.coreMouseService.reset();\n  }\n\n\n  private _handleWindowsPtyOptionChange(): void {\n    let value = false;\n    const windowsPty = this.optionsService.rawOptions.windowsPty;\n    if (windowsPty && windowsPty.buildNumber !== undefined && windowsPty.buildNumber !== undefined) {\n      value = !!(windowsPty.backend === 'conpty' && windowsPty.buildNumber < 21376);\n    } else if (this.optionsService.rawOptions.windowsMode) {\n      value = true;\n    }\n    if (value) {\n      this._enableWindowsWrappingHeuristics();\n    } else {\n      this._windowsWrappingHeuristics.clear();\n    }\n  }\n\n  protected _enableWindowsWrappingHeuristics(): void {\n    if (!this._windowsWrappingHeuristics.value) {\n      const disposables: IDisposable[] = [];\n      disposables.push(this.onLineFeed(updateWindowsModeWrappedState.bind(null, this._bufferService)));\n      disposables.push(this.registerCsiHandler({ final: 'H' }, () => {\n        updateWindowsModeWrappedState(this._bufferService);\n        return false;\n      }));\n      this._windowsWrappingHeuristics.value = toDisposable(() => {\n        for (const d of disposables) {\n          d.dispose();\n        }\n      });\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\ninterface IListener<T, U = void> {\n  (arg1: T, arg2: U): void;\n}\n\nexport interface IEvent<T, U = void> {\n  (listener: (arg1: T, arg2: U) => any): IDisposable;\n}\n\nexport interface IEventEmitter<T, U = void> {\n  event: IEvent<T, U>;\n  fire(arg1: T, arg2: U): void;\n  dispose(): void;\n}\n\nexport class EventEmitter<T, U = void> implements IEventEmitter<T, U> {\n  private _listeners: IListener<T, U>[] = [];\n  private _event?: IEvent<T, U>;\n  private _disposed: boolean = false;\n\n  public get event(): IEvent<T, U> {\n    if (!this._event) {\n      this._event = (listener: (arg1: T, arg2: U) => any) => {\n        this._listeners.push(listener);\n        const disposable = {\n          dispose: () => {\n            if (!this._disposed) {\n              for (let i = 0; i < this._listeners.length; i++) {\n                if (this._listeners[i] === listener) {\n                  this._listeners.splice(i, 1);\n                  return;\n                }\n              }\n            }\n          }\n        };\n        return disposable;\n      };\n    }\n    return this._event;\n  }\n\n  public fire(arg1: T, arg2: U): void {\n    const queue: IListener<T, U>[] = [];\n    for (let i = 0; i < this._listeners.length; i++) {\n      queue.push(this._listeners[i]);\n    }\n    for (let i = 0; i < queue.length; i++) {\n      queue[i].call(undefined, arg1, arg2);\n    }\n  }\n\n  public dispose(): void {\n    this.clearListeners();\n    this._disposed = true;\n  }\n\n  public clearListeners(): void {\n    if (this._listeners) {\n      this._listeners.length = 0;\n    }\n  }\n}\n\nexport function forwardEvent<T>(from: IEvent<T>, to: IEventEmitter<T>): IDisposable {\n  return from(e => to.fire(e));\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IInputHandler, IAttributeData, IDisposable, IWindowOptions, IColorEvent, IParseStack, ColorIndex, ColorRequestType, SpecialColorIndex } from 'common/Types';\nimport { C0, C1 } from 'common/data/EscapeSequences';\nimport { CHARSETS, DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { EscapeSequenceParser } from 'common/parser/EscapeSequenceParser';\nimport { Disposable } from 'common/Lifecycle';\nimport { StringToUtf32, stringFromCodePoint, Utf8ToUtf32 } from 'common/input/TextDecoder';\nimport { DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { IParsingState, IEscapeSequenceParser, IParams, IFunctionIdentifier } from 'common/parser/Types';\nimport { NULL_CELL_CODE, NULL_CELL_WIDTH, Attributes, FgFlags, BgFlags, Content, UnderlineStyle } from 'common/buffer/Constants';\nimport { CellData } from 'common/buffer/CellData';\nimport { AttributeData } from 'common/buffer/AttributeData';\nimport { ICoreService, IBufferService, IOptionsService, ILogService, ICoreMouseService, ICharsetService, IUnicodeService, LogLevelEnum, IOscLinkService } from 'common/services/Services';\nimport { OscHandler } from 'common/parser/OscParser';\nimport { DcsHandler } from 'common/parser/DcsParser';\nimport { IBuffer } from 'common/buffer/Types';\nimport { parseColor } from 'common/input/XParseColor';\n\n/**\n * Map collect to glevel. Used in `selectCharset`.\n */\nconst GLEVEL: { [key: string]: number } = { '(': 0, ')': 1, '*': 2, '+': 3, '-': 1, '.': 2 };\n\n/**\n * VT commands done by the parser - FIXME: move this to the parser?\n */\n// @vt: #Y   ESC   CSI   \"Control Sequence Introducer\"   \"ESC [\"   \"Start of a CSI sequence.\"\n// @vt: #Y   ESC   OSC   \"Operating System Command\"      \"ESC ]\"   \"Start of an OSC sequence.\"\n// @vt: #Y   ESC   DCS   \"Device Control String\"         \"ESC P\"   \"Start of a DCS sequence.\"\n// @vt: #Y   ESC   ST    \"String Terminator\"             \"ESC \\\"   \"Terminator used for string type sequences.\"\n// @vt: #Y   ESC   PM    \"Privacy Message\"               \"ESC ^\"   \"Start of a privacy message.\"\n// @vt: #Y   ESC   APC   \"Application Program Command\"   \"ESC _\"   \"Start of an APC sequence.\"\n// @vt: #Y   C1    CSI   \"Control Sequence Introducer\"   \"\\x9B\"    \"Start of a CSI sequence.\"\n// @vt: #Y   C1    OSC   \"Operating System Command\"      \"\\x9D\"    \"Start of an OSC sequence.\"\n// @vt: #Y   C1    DCS   \"Device Control String\"         \"\\x90\"    \"Start of a DCS sequence.\"\n// @vt: #Y   C1    ST    \"String Terminator\"             \"\\x9C\"    \"Terminator used for string type sequences.\"\n// @vt: #Y   C1    PM    \"Privacy Message\"               \"\\x9E\"    \"Start of a privacy message.\"\n// @vt: #Y   C1    APC   \"Application Program Command\"   \"\\x9F\"    \"Start of an APC sequence.\"\n// @vt: #Y   C0    NUL   \"Null\"                          \"\\0, \\x00\"  \"NUL is ignored.\"\n// @vt: #Y   C0    ESC   \"Escape\"                        \"\\e, \\x1B\"  \"Start of a sequence. Cancels any other sequence.\"\n\n/**\n * Document xterm VT features here that are currently unsupported\n */\n// @vt: #E[Supported via xterm-addon-image.]  DCS   SIXEL       \"SIXEL Graphics\"          \"DCS Ps ; Ps ; Ps ; q \tPt ST\"  \"Draw SIXEL image.\"\n// @vt: #N  DCS   DECUDK      \"User Defined Keys\"       \"DCS Ps ; Ps \\| Pt ST\"           \"Definitions for user-defined keys.\"\n// @vt: #N  DCS   XTGETTCAP   \"Request Terminfo String\" \"DCS + q Pt ST\"                 \"Request Terminfo String.\"\n// @vt: #N  DCS   XTSETTCAP   \"Set Terminfo Data\"       \"DCS + p Pt ST\"                 \"Set Terminfo Data.\"\n// @vt: #N  OSC   1           \"Set Icon Name\"           \"OSC 1 ; Pt BEL\"                \"Set icon name.\"\n\n/**\n * Max length of the UTF32 input buffer. Real memory consumption is 4 times higher.\n */\nconst MAX_PARSEBUFFER_LENGTH = 131072;\n\n/**\n * Limit length of title and icon name stacks.\n */\nconst STACK_LIMIT = 10;\n\n// map params to window option\nfunction paramToWindowOption(n: number, opts: IWindowOptions): boolean {\n  if (n > 24) {\n    return opts.setWinLines || false;\n  }\n  switch (n) {\n    case 1: return !!opts.restoreWin;\n    case 2: return !!opts.minimizeWin;\n    case 3: return !!opts.setWinPosition;\n    case 4: return !!opts.setWinSizePixels;\n    case 5: return !!opts.raiseWin;\n    case 6: return !!opts.lowerWin;\n    case 7: return !!opts.refreshWin;\n    case 8: return !!opts.setWinSizeChars;\n    case 9: return !!opts.maximizeWin;\n    case 10: return !!opts.fullscreenWin;\n    case 11: return !!opts.getWinState;\n    case 13: return !!opts.getWinPosition;\n    case 14: return !!opts.getWinSizePixels;\n    case 15: return !!opts.getScreenSizePixels;\n    case 16: return !!opts.getCellSizePixels;\n    case 18: return !!opts.getWinSizeChars;\n    case 19: return !!opts.getScreenSizeChars;\n    case 20: return !!opts.getIconTitle;\n    case 21: return !!opts.getWinTitle;\n    case 22: return !!opts.pushTitle;\n    case 23: return !!opts.popTitle;\n    case 24: return !!opts.setWinLines;\n  }\n  return false;\n}\n\nexport enum WindowsOptionsReportType {\n  GET_WIN_SIZE_PIXELS = 0,\n  GET_CELL_SIZE_PIXELS = 1\n}\n\n// create a warning log if an async handler takes longer than the limit (in ms)\nconst SLOW_ASYNC_LIMIT = 5000;\n\n// Work variables to avoid garbage collection\nlet $temp = 0;\n\n/**\n * The terminal's standard implementation of IInputHandler, this handles all\n * input from the Parser.\n *\n * Refer to http://invisible-island.net/xterm/ctlseqs/ctlseqs.html to understand\n * each function's header comment.\n */\nexport class InputHandler extends Disposable implements IInputHandler {\n  private _parseBuffer: Uint32Array = new Uint32Array(4096);\n  private _stringDecoder: StringToUtf32 = new StringToUtf32();\n  private _utf8Decoder: Utf8ToUtf32 = new Utf8ToUtf32();\n  private _workCell: CellData = new CellData();\n  private _windowTitle = '';\n  private _iconName = '';\n  private _dirtyRowTracker: IDirtyRowTracker;\n  protected _windowTitleStack: string[] = [];\n  protected _iconNameStack: string[] = [];\n\n  private _curAttrData: IAttributeData = DEFAULT_ATTR_DATA.clone();\n  public getAttrData(): IAttributeData { return this._curAttrData; }\n  private _eraseAttrDataInternal: IAttributeData = DEFAULT_ATTR_DATA.clone();\n\n  private _activeBuffer: IBuffer;\n\n  private readonly _onRequestBell = this.register(new EventEmitter<void>());\n  public readonly onRequestBell = this._onRequestBell.event;\n  private readonly _onRequestRefreshRows = this.register(new EventEmitter<number, number>());\n  public readonly onRequestRefreshRows = this._onRequestRefreshRows.event;\n  private readonly _onRequestReset = this.register(new EventEmitter<void>());\n  public readonly onRequestReset = this._onRequestReset.event;\n  private readonly _onRequestSendFocus = this.register(new EventEmitter<void>());\n  public readonly onRequestSendFocus = this._onRequestSendFocus.event;\n  private readonly _onRequestSyncScrollBar = this.register(new EventEmitter<void>());\n  public readonly onRequestSyncScrollBar = this._onRequestSyncScrollBar.event;\n  private readonly _onRequestWindowsOptionsReport = this.register(new EventEmitter<WindowsOptionsReportType>());\n  public readonly onRequestWindowsOptionsReport = this._onRequestWindowsOptionsReport.event;\n\n  private readonly _onA11yChar = this.register(new EventEmitter<string>());\n  public readonly onA11yChar = this._onA11yChar.event;\n  private readonly _onA11yTab = this.register(new EventEmitter<number>());\n  public readonly onA11yTab = this._onA11yTab.event;\n  private readonly _onCursorMove = this.register(new EventEmitter<void>());\n  public readonly onCursorMove = this._onCursorMove.event;\n  private readonly _onLineFeed = this.register(new EventEmitter<void>());\n  public readonly onLineFeed = this._onLineFeed.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n  private readonly _onTitleChange = this.register(new EventEmitter<string>());\n  public readonly onTitleChange = this._onTitleChange.event;\n  private readonly _onColor = this.register(new EventEmitter<IColorEvent>());\n  public readonly onColor = this._onColor.event;\n\n  private _parseStack: IParseStack = {\n    paused: false,\n    cursorStartX: 0,\n    cursorStartY: 0,\n    decodedLength: 0,\n    position: 0\n  };\n\n  constructor(\n    private readonly _bufferService: IBufferService,\n    private readonly _charsetService: ICharsetService,\n    private readonly _coreService: ICoreService,\n    private readonly _logService: ILogService,\n    private readonly _optionsService: IOptionsService,\n    private readonly _oscLinkService: IOscLinkService,\n    private readonly _coreMouseService: ICoreMouseService,\n    private readonly _unicodeService: IUnicodeService,\n    private readonly _parser: IEscapeSequenceParser = new EscapeSequenceParser()\n  ) {\n    super();\n    this.register(this._parser);\n    this._dirtyRowTracker = new DirtyRowTracker(this._bufferService);\n\n    // Track properties used in performance critical code manually to avoid using slow getters\n    this._activeBuffer = this._bufferService.buffer;\n    this.register(this._bufferService.buffers.onBufferActivate(e => this._activeBuffer = e.activeBuffer));\n\n    /**\n     * custom fallback handlers\n     */\n    this._parser.setCsiHandlerFallback((ident, params) => {\n      this._logService.debug('Unknown CSI code: ', { identifier: this._parser.identToString(ident), params: params.toArray() });\n    });\n    this._parser.setEscHandlerFallback(ident => {\n      this._logService.debug('Unknown ESC code: ', { identifier: this._parser.identToString(ident) });\n    });\n    this._parser.setExecuteHandlerFallback(code => {\n      this._logService.debug('Unknown EXECUTE code: ', { code });\n    });\n    this._parser.setOscHandlerFallback((identifier, action, data) => {\n      this._logService.debug('Unknown OSC code: ', { identifier, action, data });\n    });\n    this._parser.setDcsHandlerFallback((ident, action, payload) => {\n      if (action === 'HOOK') {\n        payload = payload.toArray();\n      }\n      this._logService.debug('Unknown DCS code: ', { identifier: this._parser.identToString(ident), action, payload });\n    });\n\n    /**\n     * print handler\n     */\n    this._parser.setPrintHandler((data, start, end) => this.print(data, start, end));\n\n    /**\n     * CSI handler\n     */\n    this._parser.registerCsiHandler({ final: '@' }, params => this.insertChars(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: '@' }, params => this.scrollLeft(params));\n    this._parser.registerCsiHandler({ final: 'A' }, params => this.cursorUp(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'A' }, params => this.scrollRight(params));\n    this._parser.registerCsiHandler({ final: 'B' }, params => this.cursorDown(params));\n    this._parser.registerCsiHandler({ final: 'C' }, params => this.cursorForward(params));\n    this._parser.registerCsiHandler({ final: 'D' }, params => this.cursorBackward(params));\n    this._parser.registerCsiHandler({ final: 'E' }, params => this.cursorNextLine(params));\n    this._parser.registerCsiHandler({ final: 'F' }, params => this.cursorPrecedingLine(params));\n    this._parser.registerCsiHandler({ final: 'G' }, params => this.cursorCharAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'H' }, params => this.cursorPosition(params));\n    this._parser.registerCsiHandler({ final: 'I' }, params => this.cursorForwardTab(params));\n    this._parser.registerCsiHandler({ final: 'J' }, params => this.eraseInDisplay(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'J' }, params => this.eraseInDisplay(params, true));\n    this._parser.registerCsiHandler({ final: 'K' }, params => this.eraseInLine(params, false));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'K' }, params => this.eraseInLine(params, true));\n    this._parser.registerCsiHandler({ final: 'L' }, params => this.insertLines(params));\n    this._parser.registerCsiHandler({ final: 'M' }, params => this.deleteLines(params));\n    this._parser.registerCsiHandler({ final: 'P' }, params => this.deleteChars(params));\n    this._parser.registerCsiHandler({ final: 'S' }, params => this.scrollUp(params));\n    this._parser.registerCsiHandler({ final: 'T' }, params => this.scrollDown(params));\n    this._parser.registerCsiHandler({ final: 'X' }, params => this.eraseChars(params));\n    this._parser.registerCsiHandler({ final: 'Z' }, params => this.cursorBackwardTab(params));\n    this._parser.registerCsiHandler({ final: '`' }, params => this.charPosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'a' }, params => this.hPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'b' }, params => this.repeatPrecedingCharacter(params));\n    this._parser.registerCsiHandler({ final: 'c' }, params => this.sendDeviceAttributesPrimary(params));\n    this._parser.registerCsiHandler({ prefix: '>', final: 'c' }, params => this.sendDeviceAttributesSecondary(params));\n    this._parser.registerCsiHandler({ final: 'd' }, params => this.linePosAbsolute(params));\n    this._parser.registerCsiHandler({ final: 'e' }, params => this.vPositionRelative(params));\n    this._parser.registerCsiHandler({ final: 'f' }, params => this.hVPosition(params));\n    this._parser.registerCsiHandler({ final: 'g' }, params => this.tabClear(params));\n    this._parser.registerCsiHandler({ final: 'h' }, params => this.setMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'h' }, params => this.setModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'l' }, params => this.resetMode(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'l' }, params => this.resetModePrivate(params));\n    this._parser.registerCsiHandler({ final: 'm' }, params => this.charAttributes(params));\n    this._parser.registerCsiHandler({ final: 'n' }, params => this.deviceStatus(params));\n    this._parser.registerCsiHandler({ prefix: '?', final: 'n' }, params => this.deviceStatusPrivate(params));\n    this._parser.registerCsiHandler({ intermediates: '!', final: 'p' }, params => this.softReset(params));\n    this._parser.registerCsiHandler({ intermediates: ' ', final: 'q' }, params => this.setCursorStyle(params));\n    this._parser.registerCsiHandler({ final: 'r' }, params => this.setScrollRegion(params));\n    this._parser.registerCsiHandler({ final: 's' }, params => this.saveCursor(params));\n    this._parser.registerCsiHandler({ final: 't' }, params => this.windowOptions(params));\n    this._parser.registerCsiHandler({ final: 'u' }, params => this.restoreCursor(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '}' }, params => this.insertColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\\'', final: '~' }, params => this.deleteColumns(params));\n    this._parser.registerCsiHandler({ intermediates: '\"', final: 'q' }, params => this.selectProtected(params));\n    this._parser.registerCsiHandler({ intermediates: '$', final: 'p' }, params => this.requestMode(params, true));\n    this._parser.registerCsiHandler({ prefix: '?', intermediates: '$', final: 'p' }, params => this.requestMode(params, false));\n\n    /**\n     * execute handler\n     */\n    this._parser.setExecuteHandler(C0.BEL, () => this.bell());\n    this._parser.setExecuteHandler(C0.LF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.VT, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.FF, () => this.lineFeed());\n    this._parser.setExecuteHandler(C0.CR, () => this.carriageReturn());\n    this._parser.setExecuteHandler(C0.BS, () => this.backspace());\n    this._parser.setExecuteHandler(C0.HT, () => this.tab());\n    this._parser.setExecuteHandler(C0.SO, () => this.shiftOut());\n    this._parser.setExecuteHandler(C0.SI, () => this.shiftIn());\n    // FIXME:   What do to with missing? Old code just added those to print.\n\n    this._parser.setExecuteHandler(C1.IND, () => this.index());\n    this._parser.setExecuteHandler(C1.NEL, () => this.nextLine());\n    this._parser.setExecuteHandler(C1.HTS, () => this.tabSet());\n\n    /**\n     * OSC handler\n     */\n    //   0 - icon name + title\n    this._parser.registerOscHandler(0, new OscHandler(data => { this.setTitle(data); this.setIconName(data); return true; }));\n    //   1 - icon name\n    this._parser.registerOscHandler(1, new OscHandler(data => this.setIconName(data)));\n    //   2 - title\n    this._parser.registerOscHandler(2, new OscHandler(data => this.setTitle(data)));\n    //   3 - set property X in the form \"prop=value\"\n    //   4 - Change Color Number\n    this._parser.registerOscHandler(4, new OscHandler(data => this.setOrReportIndexedColor(data)));\n    //   5 - Change Special Color Number\n    //   6 - Enable/disable Special Color Number c\n    //   7 - current directory? (not in xterm spec, see https://gitlab.com/gnachman/iterm2/issues/3939)\n    //   8 - create hyperlink (not in xterm spec, see https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda)\n    this._parser.registerOscHandler(8, new OscHandler(data => this.setHyperlink(data)));\n    //  10 - Change VT100 text foreground color to Pt.\n    this._parser.registerOscHandler(10, new OscHandler(data => this.setOrReportFgColor(data)));\n    //  11 - Change VT100 text background color to Pt.\n    this._parser.registerOscHandler(11, new OscHandler(data => this.setOrReportBgColor(data)));\n    //  12 - Change text cursor color to Pt.\n    this._parser.registerOscHandler(12, new OscHandler(data => this.setOrReportCursorColor(data)));\n    //  13 - Change mouse foreground color to Pt.\n    //  14 - Change mouse background color to Pt.\n    //  15 - Change Tektronix foreground color to Pt.\n    //  16 - Change Tektronix background color to Pt.\n    //  17 - Change highlight background color to Pt.\n    //  18 - Change Tektronix cursor color to Pt.\n    //  19 - Change highlight foreground color to Pt.\n    //  46 - Change Log File to Pt.\n    //  50 - Set Font to Pt.\n    //  51 - reserved for Emacs shell.\n    //  52 - Manipulate Selection Data.\n    // 104 ; c - Reset Color Number c.\n    this._parser.registerOscHandler(104, new OscHandler(data => this.restoreIndexedColor(data)));\n    // 105 ; c - Reset Special Color Number c.\n    // 106 ; c; f - Enable/disable Special Color Number c.\n    // 110 - Reset VT100 text foreground color.\n    this._parser.registerOscHandler(110, new OscHandler(data => this.restoreFgColor(data)));\n    // 111 - Reset VT100 text background color.\n    this._parser.registerOscHandler(111, new OscHandler(data => this.restoreBgColor(data)));\n    // 112 - Reset text cursor color.\n    this._parser.registerOscHandler(112, new OscHandler(data => this.restoreCursorColor(data)));\n    // 113 - Reset mouse foreground color.\n    // 114 - Reset mouse background color.\n    // 115 - Reset Tektronix foreground color.\n    // 116 - Reset Tektronix background color.\n    // 117 - Reset highlight color.\n    // 118 - Reset Tektronix cursor color.\n    // 119 - Reset highlight foreground color.\n\n    /**\n     * ESC handlers\n     */\n    this._parser.registerEscHandler({ final: '7' }, () => this.saveCursor());\n    this._parser.registerEscHandler({ final: '8' }, () => this.restoreCursor());\n    this._parser.registerEscHandler({ final: 'D' }, () => this.index());\n    this._parser.registerEscHandler({ final: 'E' }, () => this.nextLine());\n    this._parser.registerEscHandler({ final: 'H' }, () => this.tabSet());\n    this._parser.registerEscHandler({ final: 'M' }, () => this.reverseIndex());\n    this._parser.registerEscHandler({ final: '=' }, () => this.keypadApplicationMode());\n    this._parser.registerEscHandler({ final: '>' }, () => this.keypadNumericMode());\n    this._parser.registerEscHandler({ final: 'c' }, () => this.fullReset());\n    this._parser.registerEscHandler({ final: 'n' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: 'o' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '|' }, () => this.setgLevel(3));\n    this._parser.registerEscHandler({ final: '}' }, () => this.setgLevel(2));\n    this._parser.registerEscHandler({ final: '~' }, () => this.setgLevel(1));\n    this._parser.registerEscHandler({ intermediates: '%', final: '@' }, () => this.selectDefaultCharset());\n    this._parser.registerEscHandler({ intermediates: '%', final: 'G' }, () => this.selectDefaultCharset());\n    for (const flag in CHARSETS) {\n      this._parser.registerEscHandler({ intermediates: '(', final: flag }, () => this.selectCharset('(' + flag));\n      this._parser.registerEscHandler({ intermediates: ')', final: flag }, () => this.selectCharset(')' + flag));\n      this._parser.registerEscHandler({ intermediates: '*', final: flag }, () => this.selectCharset('*' + flag));\n      this._parser.registerEscHandler({ intermediates: '+', final: flag }, () => this.selectCharset('+' + flag));\n      this._parser.registerEscHandler({ intermediates: '-', final: flag }, () => this.selectCharset('-' + flag));\n      this._parser.registerEscHandler({ intermediates: '.', final: flag }, () => this.selectCharset('.' + flag));\n      this._parser.registerEscHandler({ intermediates: '/', final: flag }, () => this.selectCharset('/' + flag)); // TODO: supported?\n    }\n    this._parser.registerEscHandler({ intermediates: '#', final: '8' }, () => this.screenAlignmentPattern());\n\n    /**\n     * error handler\n     */\n    this._parser.setErrorHandler((state: IParsingState) => {\n      this._logService.error('Parsing error: ', state);\n      return state;\n    });\n\n    /**\n     * DCS handler\n     */\n    this._parser.registerDcsHandler({ intermediates: '$', final: 'q' }, new DcsHandler((data, params) => this.requestStatusString(data, params)));\n  }\n\n  /**\n   * Async parse support.\n   */\n  private _preserveStack(cursorStartX: number, cursorStartY: number, decodedLength: number, position: number): void {\n    this._parseStack.paused = true;\n    this._parseStack.cursorStartX = cursorStartX;\n    this._parseStack.cursorStartY = cursorStartY;\n    this._parseStack.decodedLength = decodedLength;\n    this._parseStack.position = position;\n  }\n\n  private _logSlowResolvingAsync(p: Promise<boolean>): void {\n    // log a limited warning about an async handler taking too long\n    if (this._logService.logLevel <= LogLevelEnum.WARN) {\n      Promise.race([p, new Promise((res, rej) => setTimeout(() => rej('#SLOW_TIMEOUT'), SLOW_ASYNC_LIMIT))])\n        .catch(err => {\n          if (err !== '#SLOW_TIMEOUT') {\n            throw err;\n          }\n          console.warn(`async parser handler taking longer than ${SLOW_ASYNC_LIMIT} ms`);\n        });\n    }\n  }\n\n  private _getCurrentLinkId(): number {\n    return this._curAttrData.extended.urlId;\n  }\n\n  /**\n   * Parse call with async handler support.\n   *\n   * Whether the stack state got preserved for the next call, is indicated by the return value:\n   * - undefined (void):\n   *   all handlers were sync, no stack save, continue normally with next chunk\n   * - Promise\\<boolean\\>:\n   *   execution stopped at async handler, stack saved, continue with same chunk and the promise\n   *   resolve value as `promiseResult` until the method returns `undefined`\n   *\n   * Note: This method should only be called by `Terminal.write` to ensure correct execution order\n   * and proper continuation of async parser handlers.\n   */\n  public parse(data: string | Uint8Array, promiseResult?: boolean): void | Promise<boolean> {\n    let result: void | Promise<boolean>;\n    let cursorStartX = this._activeBuffer.x;\n    let cursorStartY = this._activeBuffer.y;\n    let start = 0;\n    const wasPaused = this._parseStack.paused;\n\n    if (wasPaused) {\n      // assumption: _parseBuffer never mutates between async calls\n      if (result = this._parser.parse(this._parseBuffer, this._parseStack.decodedLength, promiseResult)) {\n        this._logSlowResolvingAsync(result);\n        return result;\n      }\n      cursorStartX = this._parseStack.cursorStartX;\n      cursorStartY = this._parseStack.cursorStartY;\n      this._parseStack.paused = false;\n      if (data.length > MAX_PARSEBUFFER_LENGTH) {\n        start = this._parseStack.position + MAX_PARSEBUFFER_LENGTH;\n      }\n    }\n\n    // Log debug data, the log level gate is to prevent extra work in this hot path\n    if (this._logService.logLevel <= LogLevelEnum.DEBUG) {\n      this._logService.debug(`parsing data${typeof data === 'string' ? ` \"${data}\"` : ` \"${Array.prototype.map.call(data, e => String.fromCharCode(e)).join('')}\"`}`, typeof data === 'string'\n        ? data.split('').map(e => e.charCodeAt(0))\n        : data\n      );\n    }\n\n    // resize input buffer if needed\n    if (this._parseBuffer.length < data.length) {\n      if (this._parseBuffer.length < MAX_PARSEBUFFER_LENGTH) {\n        this._parseBuffer = new Uint32Array(Math.min(data.length, MAX_PARSEBUFFER_LENGTH));\n      }\n    }\n\n    // Clear the dirty row service so we know which lines changed as a result of parsing\n    // Important: do not clear between async calls, otherwise we lost pending update information.\n    if (!wasPaused) {\n      this._dirtyRowTracker.clearRange();\n    }\n\n    // process big data in smaller chunks\n    if (data.length > MAX_PARSEBUFFER_LENGTH) {\n      for (let i = start; i < data.length; i += MAX_PARSEBUFFER_LENGTH) {\n        const end = i + MAX_PARSEBUFFER_LENGTH < data.length ? i + MAX_PARSEBUFFER_LENGTH : data.length;\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data.substring(i, end), this._parseBuffer)\n          : this._utf8Decoder.decode(data.subarray(i, end), this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, i);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    } else {\n      if (!wasPaused) {\n        const len = (typeof data === 'string')\n          ? this._stringDecoder.decode(data, this._parseBuffer)\n          : this._utf8Decoder.decode(data, this._parseBuffer);\n        if (result = this._parser.parse(this._parseBuffer, len)) {\n          this._preserveStack(cursorStartX, cursorStartY, len, 0);\n          this._logSlowResolvingAsync(result);\n          return result;\n        }\n      }\n    }\n\n    if (this._activeBuffer.x !== cursorStartX || this._activeBuffer.y !== cursorStartY) {\n      this._onCursorMove.fire();\n    }\n\n    // Refresh any dirty rows accumulated as part of parsing\n    this._onRequestRefreshRows.fire(this._dirtyRowTracker.start, this._dirtyRowTracker.end);\n  }\n\n  public print(data: Uint32Array, start: number, end: number): void {\n    let code: number;\n    let chWidth: number;\n    const charset = this._charsetService.charset;\n    const screenReaderMode = this._optionsService.rawOptions.screenReaderMode;\n    const cols = this._bufferService.cols;\n    const wraparoundMode = this._coreService.decPrivateModes.wraparound;\n    const insertMode = this._coreService.modes.insertMode;\n    const curAttr = this._curAttrData;\n    let bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    // handle wide chars: reset start_cell-1 if we would overwrite the second cell of a wide char\n    if (this._activeBuffer.x && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x - 1) === 2) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x - 1, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    for (let pos = start; pos < end; ++pos) {\n      code = data[pos];\n\n      // calculate print space\n      // expensive call, therefore we save width in line buffer\n      chWidth = this._unicodeService.wcwidth(code);\n\n      // get charset replacement character\n      // charset is only defined for ASCII, therefore we only\n      // search for an replacement char if code < 127\n      if (code < 127 && charset) {\n        const ch = charset[String.fromCharCode(code)];\n        if (ch) {\n          code = ch.charCodeAt(0);\n        }\n      }\n\n      if (screenReaderMode) {\n        this._onA11yChar.fire(stringFromCodePoint(code));\n      }\n      if (this._getCurrentLinkId()) {\n        this._oscLinkService.addLineToLink(this._getCurrentLinkId(), this._activeBuffer.ybase + this._activeBuffer.y);\n      }\n\n      // insert combining char at last cursor position\n      // this._activeBuffer.x should never be 0 for a combining char\n      // since they always follow a cell consuming char\n      // therefore we can test for this._activeBuffer.x to avoid overflow left\n      if (!chWidth && this._activeBuffer.x) {\n        if (!bufferRow.getWidth(this._activeBuffer.x - 1)) {\n          // found empty cell after fullwidth, need to go 2 cells back\n          // it is save to step 2 cells back here\n          // since an empty cell is only set by fullwidth chars\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 2, code);\n        } else {\n          bufferRow.addCodepointToCell(this._activeBuffer.x - 1, code);\n        }\n        continue;\n      }\n\n      // goto next line if ch would overflow\n      // NOTE: To avoid costly width checks here,\n      // the terminal does not allow a cols < 2.\n      if (this._activeBuffer.x + chWidth - 1 >= cols) {\n        // autowrap - DECAWM\n        // automatically wraps to the beginning of the next line\n        if (wraparoundMode) {\n          // clear left over cells to the right\n          while (this._activeBuffer.x < cols) {\n            bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n          }\n          this._activeBuffer.x = 0;\n          this._activeBuffer.y++;\n          if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n            this._activeBuffer.y--;\n            this._bufferService.scroll(this._eraseAttrData(), true);\n          } else {\n            if (this._activeBuffer.y >= this._bufferService.rows) {\n              this._activeBuffer.y = this._bufferService.rows - 1;\n            }\n            // The line already exists (eg. the initial viewport), mark it as a\n            // wrapped line\n            this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = true;\n          }\n          // row changed, get it again\n          bufferRow = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        } else {\n          this._activeBuffer.x = cols - 1;\n          if (chWidth === 2) {\n            // FIXME: check for xterm behavior\n            // What to do here? We got a wide char that does not fit into last cell\n            continue;\n          }\n        }\n      }\n\n      // insert mode: move characters to right\n      if (insertMode) {\n        // right shift cells according to the width\n        bufferRow.insertCells(this._activeBuffer.x, chWidth, this._activeBuffer.getNullCell(curAttr), curAttr);\n        // test last cell - since the last cell has only room for\n        // a halfwidth char any fullwidth shifted there is lost\n        // and will be set to empty cell\n        if (bufferRow.getWidth(cols - 1) === 2) {\n          bufferRow.setCellFromCodePoint(cols - 1, NULL_CELL_CODE, NULL_CELL_WIDTH, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n\n      // write current char to buffer and advance cursor\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x++, code, chWidth, curAttr.fg, curAttr.bg, curAttr.extended);\n\n      // fullwidth char - also set next cell to placeholder stub and advance cursor\n      // for graphemes bigger than fullwidth we can simply loop to zero\n      // we already made sure above, that this._activeBuffer.x + chWidth will not overflow right\n      if (chWidth > 0) {\n        while (--chWidth) {\n          // other than a regular empty cell a cell following a wide char has no width\n          bufferRow.setCellFromCodePoint(this._activeBuffer.x++, 0, 0, curAttr.fg, curAttr.bg, curAttr.extended);\n        }\n      }\n    }\n    // store last char in Parser.precedingCodepoint for REP to work correctly\n    // This needs to check whether:\n    //  - fullwidth + surrogates: reset\n    //  - combining: only base char gets carried on (bug in xterm?)\n    if (end - start > 0) {\n      bufferRow.loadCell(this._activeBuffer.x - 1, this._workCell);\n      if (this._workCell.getWidth() === 2 || this._workCell.getCode() > 0xFFFF) {\n        this._parser.precedingCodepoint = 0;\n      } else if (this._workCell.isCombined()) {\n        this._parser.precedingCodepoint = this._workCell.getChars().charCodeAt(0);\n      } else {\n        this._parser.precedingCodepoint = this._workCell.content;\n      }\n    }\n\n    // handle wide chars: reset cell to the right if it is second cell of a wide char\n    if (this._activeBuffer.x < cols && end - start > 0 && bufferRow.getWidth(this._activeBuffer.x) === 0 && !bufferRow.hasContent(this._activeBuffer.x)) {\n      bufferRow.setCellFromCodePoint(this._activeBuffer.x, 0, 1, curAttr.fg, curAttr.bg, curAttr.extended);\n    }\n\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Forward registerCsiHandler from parser.\n   */\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: IParams) => boolean | Promise<boolean>): IDisposable {\n    if (id.final === 't' && !id.prefix && !id.intermediates) {\n      // security: always check whether window option is allowed\n      return this._parser.registerCsiHandler(id, params => {\n        if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n          return true;\n        }\n        return callback(params);\n      });\n    }\n    return this._parser.registerCsiHandler(id, callback);\n  }\n\n  /**\n   * Forward registerDcsHandler from parser.\n   */\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: IParams) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerDcsHandler(id, new DcsHandler(callback));\n  }\n\n  /**\n   * Forward registerEscHandler from parser.\n   */\n  public registerEscHandler(id: IFunctionIdentifier, callback: () => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerEscHandler(id, callback);\n  }\n\n  /**\n   * Forward registerOscHandler from parser.\n   */\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._parser.registerOscHandler(ident, new OscHandler(callback));\n  }\n\n  /**\n   * BEL\n   * Bell (Ctrl-G).\n   *\n   * @vt: #Y   C0    BEL   \"Bell\"  \"\\a, \\x07\"  \"Ring the bell.\"\n   * The behavior of the bell is further customizable with `ITerminalOptions.bellStyle`\n   * and `ITerminalOptions.bellSound`.\n   */\n  public bell(): boolean {\n    this._onRequestBell.fire();\n    return true;\n  }\n\n  /**\n   * LF\n   * Line Feed or New Line (NL).  (LF  is Ctrl-J).\n   *\n   * @vt: #Y   C0    LF   \"Line Feed\"            \"\\n, \\x0A\"  \"Move the cursor one row down, scrolling if needed.\"\n   * Scrolling is restricted to scroll margins and will only happen on the bottom line.\n   *\n   * @vt: #Y   C0    VT   \"Vertical Tabulation\"  \"\\v, \\x0B\"  \"Treated as LF.\"\n   * @vt: #Y   C0    FF   \"Form Feed\"            \"\\f, \\x0C\"  \"Treated as LF.\"\n   */\n  public lineFeed(): boolean {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._optionsService.rawOptions.convertEol) {\n      this._activeBuffer.x = 0;\n    }\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    } else {\n      // There was an explicit line feed (not just a carriage return), so clear the wrapped state of\n      // the line. This is particularly important on conpty/Windows where revisiting lines to\n      // reprint is common, especially on resize. Note that the windowsMode wrapped line heuristics\n      // can mess with this so windowsMode should be disabled, which is recommended on Windows build\n      // 21376 and above.\n      this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n    }\n    // If the end of the line is hit, prevent this action from wrapping around to the next line.\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      this._activeBuffer.x--;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n\n    this._onLineFeed.fire();\n    return true;\n  }\n\n  /**\n   * CR\n   * Carriage Return (Ctrl-M).\n   *\n   * @vt: #Y   C0    CR   \"Carriage Return\"  \"\\r, \\x0D\"  \"Move the cursor to the beginning of the row.\"\n   */\n  public carriageReturn(): boolean {\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * BS\n   * Backspace (Ctrl-H).\n   *\n   * @vt: #Y   C0    BS   \"Backspace\"  \"\\b, \\x08\"  \"Move the cursor one position to the left.\"\n   * By default it is not possible to move the cursor past the leftmost position.\n   * If `reverse wrap-around` (`CSI ? 45 h`) is set, a previous soft line wrap (DECAWM)\n   * can be undone with BS within the scroll margins. In that case the cursor will wrap back\n   * to the end of the previous row. Note that it is not possible to peek back into the scrollbuffer\n   * with the cursor, thus at the home position (top-leftmost cell) this has no effect.\n   */\n  public backspace(): boolean {\n    // reverse wrap-around is disabled\n    if (!this._coreService.decPrivateModes.reverseWraparound) {\n      this._restrictCursor();\n      if (this._activeBuffer.x > 0) {\n        this._activeBuffer.x--;\n      }\n      return true;\n    }\n\n    // reverse wrap-around is enabled\n    // other than for normal operation mode, reverse wrap-around allows the cursor\n    // to be at x=cols to be able to address the last cell of a row by BS\n    this._restrictCursor(this._bufferService.cols);\n\n    if (this._activeBuffer.x > 0) {\n      this._activeBuffer.x--;\n    } else {\n      /**\n       * reverse wrap-around handling:\n       * Our implementation deviates from xterm on purpose. Details:\n       * - only previous soft NLs can be reversed (isWrapped=true)\n       * - only works within scrollborders (top/bottom, left/right not yet supported)\n       * - cannot peek into scrollbuffer\n       * - any cursor movement sequence keeps working as expected\n       */\n      if (this._activeBuffer.x === 0\n        && this._activeBuffer.y > this._activeBuffer.scrollTop\n        && this._activeBuffer.y <= this._activeBuffer.scrollBottom\n        && this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)?.isWrapped) {\n        this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!.isWrapped = false;\n        this._activeBuffer.y--;\n        this._activeBuffer.x = this._bufferService.cols - 1;\n        // find last taken cell - last cell can have 3 different states:\n        // - hasContent(true) + hasWidth(1): narrow char - we are done\n        // - hasWidth(0): second part of wide char - we are done\n        // - hasContent(false) + hasWidth(1): empty cell due to early wrapping wide char, go one\n        //   cell further back\n        const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y)!;\n        if (line.hasWidth(this._activeBuffer.x) && !line.hasContent(this._activeBuffer.x)) {\n          this._activeBuffer.x--;\n          // We do this only once, since width=1 + hasContent=false currently happens only once\n          // before early wrapping of a wide char.\n          // This needs to be fixed once we support graphemes taking more than 2 cells.\n        }\n      }\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * TAB\n   * Horizontal Tab (HT) (Ctrl-I).\n   *\n   * @vt: #Y   C0    HT   \"Horizontal Tabulation\"  \"\\t, \\x09\"  \"Move the cursor to the next character tab stop.\"\n   */\n  public tab(): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    const originalX = this._activeBuffer.x;\n    this._activeBuffer.x = this._activeBuffer.nextStop();\n    if (this._optionsService.rawOptions.screenReaderMode) {\n      this._onA11yTab.fire(this._activeBuffer.x - originalX);\n    }\n    return true;\n  }\n\n  /**\n   * SO\n   * Shift Out (Ctrl-N) -> Switch to Alternate Character Set.  This invokes the\n   * G1 character set.\n   *\n   * @vt: #P[Only limited ISO-2022 charset support.]  C0    SO   \"Shift Out\"  \"\\x0E\"  \"Switch to an alternative character set.\"\n   */\n  public shiftOut(): boolean {\n    this._charsetService.setgLevel(1);\n    return true;\n  }\n\n  /**\n   * SI\n   * Shift In (Ctrl-O) -> Switch to Standard Character Set.  This invokes the G0\n   * character set (the default).\n   *\n   * @vt: #Y   C0    SI   \"Shift In\"   \"\\x0F\"  \"Return to regular character set after Shift Out.\"\n   */\n  public shiftIn(): boolean {\n    this._charsetService.setgLevel(0);\n    return true;\n  }\n\n  /**\n   * Restrict cursor to viewport size / scroll margin (origin mode).\n   */\n  private _restrictCursor(maxCol: number = this._bufferService.cols - 1): void {\n    this._activeBuffer.x = Math.min(maxCol, Math.max(0, this._activeBuffer.x));\n    this._activeBuffer.y = this._coreService.decPrivateModes.origin\n      ? Math.min(this._activeBuffer.scrollBottom, Math.max(this._activeBuffer.scrollTop, this._activeBuffer.y))\n      : Math.min(this._bufferService.rows - 1, Math.max(0, this._activeBuffer.y));\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set absolute cursor position.\n   */\n  private _setCursor(x: number, y: number): void {\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    if (this._coreService.decPrivateModes.origin) {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = this._activeBuffer.scrollTop + y;\n    } else {\n      this._activeBuffer.x = x;\n      this._activeBuffer.y = y;\n    }\n    this._restrictCursor();\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n  }\n\n  /**\n   * Set relative cursor position.\n   */\n  private _moveCursor(x: number, y: number): void {\n    // for relative changes we have to make sure we are within 0 .. cols/rows - 1\n    // before calculating the new position\n    this._restrictCursor();\n    this._setCursor(this._activeBuffer.x + x, this._activeBuffer.y + y);\n  }\n\n  /**\n   * CSI Ps A\n   * Cursor Up Ps Times (default = 1) (CUU).\n   *\n   * @vt: #Y CSI CUU   \"Cursor Up\"   \"CSI Ps A\"  \"Move cursor `Ps` times up (default=1).\"\n   * If the cursor would pass the top scroll margin, it will stop there.\n   */\n  public cursorUp(params: IParams): boolean {\n    // stop at scrollTop\n    const diffToTop = this._activeBuffer.y - this._activeBuffer.scrollTop;\n    if (diffToTop >= 0) {\n      this._moveCursor(0, -Math.min(diffToTop, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, -(params.params[0] || 1));\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps B\n   * Cursor Down Ps Times (default = 1) (CUD).\n   *\n   * @vt: #Y CSI CUD   \"Cursor Down\"   \"CSI Ps B\"  \"Move cursor `Ps` times down (default=1).\"\n   * If the cursor would pass the bottom scroll margin, it will stop there.\n   */\n  public cursorDown(params: IParams): boolean {\n    // stop at scrollBottom\n    const diffToBottom = this._activeBuffer.scrollBottom - this._activeBuffer.y;\n    if (diffToBottom >= 0) {\n      this._moveCursor(0, Math.min(diffToBottom, params.params[0] || 1));\n    } else {\n      this._moveCursor(0, params.params[0] || 1);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps C\n   * Cursor Forward Ps Times (default = 1) (CUF).\n   *\n   * @vt: #Y CSI CUF   \"Cursor Forward\"    \"CSI Ps C\"  \"Move cursor `Ps` times forward (default=1).\"\n   */\n  public cursorForward(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps D\n   * Cursor Backward Ps Times (default = 1) (CUB).\n   *\n   * @vt: #Y CSI CUB   \"Cursor Backward\"   \"CSI Ps D\"  \"Move cursor `Ps` times backward (default=1).\"\n   */\n  public cursorBackward(params: IParams): boolean {\n    this._moveCursor(-(params.params[0] || 1), 0);\n    return true;\n  }\n\n  /**\n   * CSI Ps E\n   * Cursor Next Line Ps Times (default = 1) (CNL).\n   * Other than cursorDown (CUD) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CNL   \"Cursor Next Line\"  \"CSI Ps E\"  \"Move cursor `Ps` times down (default=1) and to the first column.\"\n   * Same as CUD, additionally places the cursor at the first column.\n   */\n  public cursorNextLine(params: IParams): boolean {\n    this.cursorDown(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps F\n   * Cursor Previous Line Ps Times (default = 1) (CPL).\n   * Other than cursorUp (CUU) also set the cursor to first column.\n   *\n   * @vt: #Y CSI CPL   \"Cursor Backward\"   \"CSI Ps F\"  \"Move cursor `Ps` times up (default=1) and to the first column.\"\n   * Same as CUU, additionally places the cursor at the first column.\n   */\n  public cursorPrecedingLine(params: IParams): boolean {\n    this.cursorUp(params);\n    this._activeBuffer.x = 0;\n    return true;\n  }\n\n  /**\n   * CSI Ps G\n   * Cursor Character Absolute  [column] (default = [row,1]) (CHA).\n   *\n   * @vt: #Y CSI CHA   \"Cursor Horizontal Absolute\" \"CSI Ps G\" \"Move cursor to `Ps`-th column of the active row (default=1).\"\n   */\n  public cursorCharAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps H\n   * Cursor Position [row;column] (default = [1,1]) (CUP).\n   *\n   * @vt: #Y CSI CUP   \"Cursor Position\"   \"CSI Ps ; Ps H\"  \"Set cursor to position [`Ps`, `Ps`] (default = [1, 1]).\"\n   * If ORIGIN mode is set, places the cursor to the absolute position within the scroll margins.\n   * If ORIGIN mode is not set, places the cursor to the absolute position within the viewport.\n   * Note that the coordinates are 1-based, thus the top left position starts at `1 ; 1`.\n   */\n  public cursorPosition(params: IParams): boolean {\n    this._setCursor(\n      // col\n      (params.length >= 2) ? (params.params[1] || 1) - 1 : 0,\n      // row\n      (params.params[0] || 1) - 1\n    );\n    return true;\n  }\n\n  /**\n   * CSI Pm `  Character Position Absolute\n   *   [column] (default = [row,1]) (HPA).\n   * Currently same functionality as CHA.\n   *\n   * @vt: #Y CSI HPA   \"Horizontal Position Absolute\"  \"CSI Ps ` \" \"Same as CHA.\"\n   */\n  public charPosAbsolute(params: IParams): boolean {\n    this._setCursor((params.params[0] || 1) - 1, this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Pm a  Character Position Relative\n   *   [columns] (default = [row,col+1]) (HPR)\n   *\n   * @vt: #Y CSI HPR   \"Horizontal Position Relative\"  \"CSI Ps a\"  \"Same as CUF.\"\n   */\n  public hPositionRelative(params: IParams): boolean {\n    this._moveCursor(params.params[0] || 1, 0);\n    return true;\n  }\n\n  /**\n   * CSI Pm d  Vertical Position Absolute (VPA)\n   *   [row] (default = [1,column])\n   *\n   * @vt: #Y CSI VPA   \"Vertical Position Absolute\"    \"CSI Ps d\"  \"Move cursor to `Ps`-th row (default=1).\"\n   */\n  public linePosAbsolute(params: IParams): boolean {\n    this._setCursor(this._activeBuffer.x, (params.params[0] || 1) - 1);\n    return true;\n  }\n\n  /**\n   * CSI Pm e  Vertical Position Relative (VPR)\n   *   [rows] (default = [row+1,column])\n   * reuse CSI Ps B ?\n   *\n   * @vt: #Y CSI VPR   \"Vertical Position Relative\"    \"CSI Ps e\"  \"Move cursor `Ps` times down (default=1).\"\n   */\n  public vPositionRelative(params: IParams): boolean {\n    this._moveCursor(0, params.params[0] || 1);\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps f\n   *   Horizontal and Vertical Position [row;column] (default =\n   *   [1,1]) (HVP).\n   *   Same as CUP.\n   *\n   * @vt: #Y CSI HVP   \"Horizontal and Vertical Position\" \"CSI Ps ; Ps f\"  \"Same as CUP.\"\n   */\n  public hVPosition(params: IParams): boolean {\n    this.cursorPosition(params);\n    return true;\n  }\n\n  /**\n   * CSI Ps g  Tab Clear (TBC).\n   *     Ps = 0  -> Clear Current Column (default).\n   *     Ps = 3  -> Clear All.\n   * Potentially:\n   *   Ps = 2  -> Clear Stops on Line.\n   *   http://vt100.net/annarbor/aaa-ug/section6.html\n   *\n   * @vt: #Y CSI TBC   \"Tab Clear\" \"CSI Ps g\"  \"Clear tab stops at current position (0) or all (3) (default=0).\"\n   * Clearing tabstops off the active row (Ps = 2, VT100) is currently not supported.\n   */\n  public tabClear(params: IParams): boolean {\n    const param = params.params[0];\n    if (param === 0) {\n      delete this._activeBuffer.tabs[this._activeBuffer.x];\n    } else if (param === 3) {\n      this._activeBuffer.tabs = {};\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps I\n   *   Cursor Forward Tabulation Ps tab stops (default = 1) (CHT).\n   *\n   * @vt: #Y CSI CHT   \"Cursor Horizontal Tabulation\" \"CSI Ps I\" \"Move cursor `Ps` times tabs forward (default=1).\"\n   */\n  public cursorForwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.nextStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps Z  Cursor Backward Tabulation Ps tab stops (default = 1) (CBT).\n   *\n   * @vt: #Y CSI CBT   \"Cursor Backward Tabulation\"  \"CSI Ps Z\"  \"Move cursor `Ps` tabs backward (default=1).\"\n   */\n  public cursorBackwardTab(params: IParams): boolean {\n    if (this._activeBuffer.x >= this._bufferService.cols) {\n      return true;\n    }\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.x = this._activeBuffer.prevStop();\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps \" q  Select Character Protection Attribute (DECSCA).\n   *\n   * @vt: #Y CSI DECSCA   \"Select Character Protection Attribute\"  \"CSI Ps \" q\"  \"Whether DECSED and DECSEL can erase (0=default, 2) or not (1).\"\n   */\n  public selectProtected(params: IParams): boolean {\n    const p = params.params[0];\n    if (p === 1) this._curAttrData.bg |= BgFlags.PROTECTED;\n    if (p === 2 || p === 0) this._curAttrData.bg &= ~BgFlags.PROTECTED;\n    return true;\n  }\n\n\n  /**\n   * Helper method to erase cells in a terminal row.\n   * The cell gets replaced with the eraseChar of the terminal.\n   * @param y The row index relative to the viewport.\n   * @param start The start x index of the range to be erased.\n   * @param end The end x index of the range to be erased (exclusive).\n   * @param clearWrap clear the isWrapped flag\n   * @param respectProtect Whether to respect the protection attribute (DECSCA).\n   */\n  private _eraseInBufferLine(y: number, start: number, end: number, clearWrap: boolean = false, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n    line.replaceCells(\n      start,\n      end,\n      this._activeBuffer.getNullCell(this._eraseAttrData()),\n      this._eraseAttrData(),\n      respectProtect\n    );\n    if (clearWrap) {\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * Helper method to reset cells in a terminal row. The cell gets replaced with the eraseChar of\n   * the terminal and the isWrapped property is set to false.\n   * @param y row index\n   */\n  private _resetBufferLine(y: number, respectProtect: boolean = false): void {\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y);\n    if (line) {\n      line.fill(this._activeBuffer.getNullCell(this._eraseAttrData()), respectProtect);\n      this._bufferService.buffer.clearMarkers(this._activeBuffer.ybase + y);\n      line.isWrapped = false;\n    }\n  }\n\n  /**\n   * CSI Ps J  Erase in Display (ED).\n   *     Ps = 0  -> Erase Below (default).\n   *     Ps = 1  -> Erase Above.\n   *     Ps = 2  -> Erase All.\n   *     Ps = 3  -> Erase Saved Lines (xterm).\n   * CSI ? Ps J\n   *   Erase in Display (DECSED).\n   *     Ps = 0  -> Selective Erase Below (default).\n   *     Ps = 1  -> Selective Erase Above.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI ED  \"Erase In Display\"  \"CSI Ps J\"  \"Erase various parts of the viewport.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                       |\n   * | -- | ------------------------------------------------------------ |\n   * | 0  | Erase from the cursor through the end of the viewport.       |\n   * | 1  | Erase from the beginning of the viewport through the cursor. |\n   * | 2  | Erase complete viewport.                                     |\n   * | 3  | Erase scrollback.                                            |\n   *\n   * @vt: #Y CSI DECSED   \"Selective Erase In Display\"  \"CSI ? Ps J\"  \"Same as ED with respecting protection flag.\"\n   */\n  public eraseInDisplay(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    let j;\n    switch (params.params[0]) {\n      case 0:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        this._eraseInBufferLine(j++, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        for (; j < this._bufferService.rows; j++) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(j);\n        break;\n      case 1:\n        j = this._activeBuffer.y;\n        this._dirtyRowTracker.markDirty(j);\n        // Deleted front part of line and everything before. This line will no longer be wrapped.\n        this._eraseInBufferLine(j, 0, this._activeBuffer.x + 1, true, respectProtect);\n        if (this._activeBuffer.x + 1 >= this._bufferService.cols) {\n          // Deleted entire previous line. This next line can no longer be wrapped.\n          this._activeBuffer.lines.get(j + 1)!.isWrapped = false;\n        }\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 2:\n        j = this._bufferService.rows;\n        this._dirtyRowTracker.markDirty(j - 1);\n        while (j--) {\n          this._resetBufferLine(j, respectProtect);\n        }\n        this._dirtyRowTracker.markDirty(0);\n        break;\n      case 3:\n        // Clear scrollback (everything not in viewport)\n        const scrollBackSize = this._activeBuffer.lines.length - this._bufferService.rows;\n        if (scrollBackSize > 0) {\n          this._activeBuffer.lines.trimStart(scrollBackSize);\n          this._activeBuffer.ybase = Math.max(this._activeBuffer.ybase - scrollBackSize, 0);\n          this._activeBuffer.ydisp = Math.max(this._activeBuffer.ydisp - scrollBackSize, 0);\n          // Force a scroll event to refresh viewport\n          this._onScroll.fire(0);\n        }\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps K  Erase in Line (EL).\n   *     Ps = 0  -> Erase to Right (default).\n   *     Ps = 1  -> Erase to Left.\n   *     Ps = 2  -> Erase All.\n   * CSI ? Ps K\n   *   Erase in Line (DECSEL).\n   *     Ps = 0  -> Selective Erase to Right (default).\n   *     Ps = 1  -> Selective Erase to Left.\n   *     Ps = 2  -> Selective Erase All.\n   *\n   * @vt: #Y CSI EL    \"Erase In Line\"  \"CSI Ps K\"  \"Erase various parts of the active row.\"\n   * Supported param values:\n   *\n   * | Ps | Effect                                                   |\n   * | -- | -------------------------------------------------------- |\n   * | 0  | Erase from the cursor through the end of the row.        |\n   * | 1  | Erase from the beginning of the line through the cursor. |\n   * | 2  | Erase complete line.                                     |\n   *\n   * @vt: #Y CSI DECSEL   \"Selective Erase In Line\"  \"CSI ? Ps K\"  \"Same as EL with respecting protecting flag.\"\n   */\n  public eraseInLine(params: IParams, respectProtect: boolean = false): boolean {\n    this._restrictCursor(this._bufferService.cols);\n    switch (params.params[0]) {\n      case 0:\n        this._eraseInBufferLine(this._activeBuffer.y, this._activeBuffer.x, this._bufferService.cols, this._activeBuffer.x === 0, respectProtect);\n        break;\n      case 1:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._activeBuffer.x + 1, false, respectProtect);\n        break;\n      case 2:\n        this._eraseInBufferLine(this._activeBuffer.y, 0, this._bufferService.cols, true, respectProtect);\n        break;\n    }\n    this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    return true;\n  }\n\n  /**\n   * CSI Ps L\n   * Insert Ps Line(s) (default = 1) (IL).\n   *\n   * @vt: #Y CSI IL  \"Insert Line\"   \"CSI Ps L\"  \"Insert `Ps` blank lines at active row (default=1).\"\n   * For every inserted line at the scroll top one line at the scroll bottom gets removed.\n   * The cursor is set to the first column.\n   * IL has no effect if the cursor is outside the scroll margins.\n   */\n  public insertLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    const scrollBottomRowsOffset = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    const scrollBottomAbsolute = this._bufferService.rows - 1 + this._activeBuffer.ybase - scrollBottomRowsOffset + 1;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1L\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(scrollBottomAbsolute - 1, 1);\n      this._activeBuffer.lines.splice(row, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps M\n   * Delete Ps Line(s) (default = 1) (DL).\n   *\n   * @vt: #Y CSI DL  \"Delete Line\"   \"CSI Ps M\"  \"Delete `Ps` lines at active row (default=1).\"\n   * For every deleted line at the scroll top one blank line at the scroll bottom gets appended.\n   * The cursor is set to the first column.\n   * DL has no effect if the cursor is outside the scroll margins.\n   */\n  public deleteLines(params: IParams): boolean {\n    this._restrictCursor();\n    let param = params.params[0] || 1;\n\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n\n    const row: number = this._activeBuffer.ybase + this._activeBuffer.y;\n\n    let j: number;\n    j = this._bufferService.rows - 1 - this._activeBuffer.scrollBottom;\n    j = this._bufferService.rows - 1 + this._activeBuffer.ybase - j;\n    while (param--) {\n      // test: echo -e '\\e[44m\\e[1M\\e[0m'\n      // blankLine(true) - xterm/linux behavior\n      this._activeBuffer.lines.splice(row, 1);\n      this._activeBuffer.lines.splice(j, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.y, this._activeBuffer.scrollBottom);\n    this._activeBuffer.x = 0; // see https://vt100.net/docs/vt220-rm/chapter4.html - vt220 only?\n    return true;\n  }\n\n  /**\n   * CSI Ps @\n   * Insert Ps (Blank) Character(s) (default = 1) (ICH).\n   *\n   * @vt: #Y CSI ICH  \"Insert Characters\"   \"CSI Ps @\"  \"Insert `Ps` (blank) characters (default = 1).\"\n   * The ICH sequence inserts `Ps` blank characters. The cursor remains at the beginning of the\n   * blank characters. Text between the cursor and right margin moves to the right. Characters moved\n   * past the right margin are lost.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public insertChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.insertCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps P\n   * Delete Ps Character(s) (default = 1) (DCH).\n   *\n   * @vt: #Y CSI DCH   \"Delete Character\"  \"CSI Ps P\"  \"Delete `Ps` characters (default=1).\"\n   * As characters are deleted, the remaining characters between the cursor and right margin move to\n   * the left. Character attributes move with the characters. The terminal adds blank characters at\n   * the right margin.\n   *\n   *\n   * FIXME: check against xterm - should not work outside of scroll margins (see VT520 manual)\n   */\n  public deleteChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.deleteCells(\n        this._activeBuffer.x,\n        params.params[0] || 1,\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps S  Scroll up Ps lines (default = 1) (SU).\n   *\n   * @vt: #Y CSI SU  \"Scroll Up\"   \"CSI Ps S\"  \"Scroll `Ps` lines up (default=1).\"\n   *\n   *\n   * FIXME: scrolled out lines at top = 1 should add to scrollback (xterm)\n   */\n  public scrollUp(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 0, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps T  Scroll down Ps lines (default = 1) (SD).\n   *\n   * @vt: #Y CSI SD  \"Scroll Down\"   \"CSI Ps T\"  \"Scroll `Ps` lines down (default=1).\"\n   */\n  public scrollDown(params: IParams): boolean {\n    let param = params.params[0] || 1;\n\n    while (param--) {\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollBottom, 1);\n      this._activeBuffer.lines.splice(this._activeBuffer.ybase + this._activeBuffer.scrollTop, 0, this._activeBuffer.getBlankLine(DEFAULT_ATTR_DATA));\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP @  Scroll left Ps columns (default = 1) (SL) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/00\n   * Parameter default value: Pn = 1\n   * SL causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the left; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always left shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SL  \"Scroll Left\" \"CSI Ps SP @\" \"Scroll viewport `Ps` times to the left.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the left.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollLeft(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps SP A  Scroll right Ps columns (default = 1) (SR) ECMA-48\n   *\n   * Notation: (Pn)\n   * Representation: CSI Pn 02/00 04/01\n   * Parameter default value: Pn = 1\n   * SR causes the data in the presentation component to be moved by n character positions\n   * if the line orientation is horizontal, or by n line positions if the line orientation\n   * is vertical, such that the data appear to move to the right; where n equals the value of Pn.\n   * The active presentation position is not affected by this control function.\n   *\n   * Supported:\n   *   - always right shift (no line orientation setting respected)\n   *\n   * @vt: #Y CSI SR  \"Scroll Right\"  \"CSI Ps SP A\"   \"Scroll viewport `Ps` times to the right.\"\n   * SL moves the content of all lines within the scroll margins `Ps` times to the right.\n   * Content at the right margin is lost.\n   * SL has no effect outside of the scroll margins.\n   */\n  public scrollRight(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(0, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' }\n   * Insert Ps Column(s) (default = 1) (DECIC), VT420 and up.\n   *\n   * @vt: #Y CSI DECIC \"Insert Columns\"  \"CSI Ps ' }\"  \"Insert `Ps` columns at cursor position.\"\n   * DECIC inserts `Ps` times blank columns at the cursor position for all lines with the scroll\n   * margins, moving content to the right. Content at the right margin is lost. DECIC has no effect\n   * outside the scrolling margins.\n   */\n  public insertColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.insertCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Pm ' ~\n   * Delete Ps Column(s) (default = 1) (DECDC), VT420 and up.\n   *\n   * @vt: #Y CSI DECDC \"Delete Columns\"  \"CSI Ps ' ~\"  \"Delete `Ps` columns at cursor position.\"\n   * DECDC deletes `Ps` times columns at the cursor position for all lines with the scroll margins,\n   * moving content to the left. Blank columns are added at the right margin.\n   * DECDC has no effect outside the scrolling margins.\n   */\n  public deleteColumns(params: IParams): boolean {\n    if (this._activeBuffer.y > this._activeBuffer.scrollBottom || this._activeBuffer.y < this._activeBuffer.scrollTop) {\n      return true;\n    }\n    const param = params.params[0] || 1;\n    for (let y = this._activeBuffer.scrollTop; y <= this._activeBuffer.scrollBottom; ++y) {\n      const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + y)!;\n      line.deleteCells(this._activeBuffer.x, param, this._activeBuffer.getNullCell(this._eraseAttrData()), this._eraseAttrData());\n      line.isWrapped = false;\n    }\n    this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    return true;\n  }\n\n  /**\n   * CSI Ps X\n   * Erase Ps Character(s) (default = 1) (ECH).\n   *\n   * @vt: #Y CSI ECH   \"Erase Character\"   \"CSI Ps X\"  \"Erase `Ps` characters from current cursor position to the right (default=1).\"\n   * ED erases `Ps` characters from current cursor position to the right.\n   * ED works inside or outside the scrolling margins.\n   */\n  public eraseChars(params: IParams): boolean {\n    this._restrictCursor();\n    const line = this._activeBuffer.lines.get(this._activeBuffer.ybase + this._activeBuffer.y);\n    if (line) {\n      line.replaceCells(\n        this._activeBuffer.x,\n        this._activeBuffer.x + (params.params[0] || 1),\n        this._activeBuffer.getNullCell(this._eraseAttrData()),\n        this._eraseAttrData()\n      );\n      this._dirtyRowTracker.markDirty(this._activeBuffer.y);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps b  Repeat the preceding graphic character Ps times (REP).\n   * From ECMA 48 (@see http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-048.pdf)\n   *    Notation: (Pn)\n   *    Representation: CSI Pn 06/02\n   *    Parameter default value: Pn = 1\n   *    REP is used to indicate that the preceding character in the data stream,\n   *    if it is a graphic character (represented by one or more bit combinations) including SPACE,\n   *    is to be repeated n times, where n equals the value of Pn.\n   *    If the character preceding REP is a control function or part of a control function,\n   *    the effect of REP is not defined by this Standard.\n   *\n   * Since we propagate the terminal as xterm-256color we have to follow xterm's behavior:\n   *    - fullwidth + surrogate chars are ignored\n   *    - for combining chars only the base char gets repeated\n   *    - text attrs are applied normally\n   *    - wrap around is respected\n   *    - any valid sequence resets the carried forward char\n   *\n   * Note: To get reset on a valid sequence working correctly without much runtime penalty, the\n   * preceding codepoint is stored on the parser in `this.print` and reset during `parser.parse`.\n   *\n   * @vt: #Y CSI REP   \"Repeat Preceding Character\"    \"CSI Ps b\"  \"Repeat preceding character `Ps` times (default=1).\"\n   * REP repeats the previous character `Ps` times advancing the cursor, also wrapping if DECAWM is\n   * set. REP has no effect if the sequence does not follow a printable ASCII character\n   * (NOOP for any other sequence in between or NON ASCII characters).\n   */\n  public repeatPrecedingCharacter(params: IParams): boolean {\n    if (!this._parser.precedingCodepoint) {\n      return true;\n    }\n    // call print to insert the chars and handle correct wrapping\n    const length = params.params[0] || 1;\n    const data = new Uint32Array(length);\n    for (let i = 0; i < length; ++i) {\n      data[i] = this._parser.precedingCodepoint;\n    }\n    this.print(data, 0, data.length);\n    return true;\n  }\n\n  /**\n   * CSI Ps c  Send Device Attributes (Primary DA).\n   *     Ps = 0  or omitted -> request attributes from terminal.  The\n   *     response depends on the decTerminalID resource setting.\n   *     -> CSI ? 1 ; 2 c  (``VT100 with Advanced Video Option'')\n   *     -> CSI ? 1 ; 0 c  (``VT101 with No Options'')\n   *     -> CSI ? 6 c  (``VT102'')\n   *     -> CSI ? 6 0 ; 1 ; 2 ; 6 ; 8 ; 9 ; 1 5 ; c  (``VT220'')\n   *   The VT100-style response parameters do not mean anything by\n   *   themselves.  VT220 parameters do, telling the host what fea-\n   *   tures the terminal supports:\n   *     Ps = 1  -> 132-columns.\n   *     Ps = 2  -> Printer.\n   *     Ps = 6  -> Selective erase.\n   *     Ps = 8  -> User-defined keys.\n   *     Ps = 9  -> National replacement character sets.\n   *     Ps = 1 5  -> Technical characters.\n   *     Ps = 2 2  -> ANSI color, e.g., VT525.\n   *     Ps = 2 9  -> ANSI text locator (i.e., DEC Locator mode).\n   *\n   * @vt: #Y CSI DA1   \"Primary Device Attributes\"     \"CSI c\"  \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesPrimary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    if (this._is('xterm') || this._is('rxvt-unicode') || this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?1;2c');\n    } else if (this._is('linux')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[?6c');\n    }\n    return true;\n  }\n\n  /**\n   * CSI > Ps c\n   *   Send Device Attributes (Secondary DA).\n   *     Ps = 0  or omitted -> request the terminal's identification\n   *     code.  The response depends on the decTerminalID resource set-\n   *     ting.  It should apply only to VT220 and up, but xterm extends\n   *     this to VT100.\n   *     -> CSI  > Pp ; Pv ; Pc c\n   *   where Pp denotes the terminal type\n   *     Pp = 0  -> ``VT100''.\n   *     Pp = 1  -> ``VT220''.\n   *   and Pv is the firmware version (for xterm, this was originally\n   *   the XFree86 patch number, starting with 95).  In a DEC termi-\n   *   nal, Pc indicates the ROM cartridge registration number and is\n   *   always zero.\n   * More information:\n   *   xterm/charproc.c - line 2012, for more information.\n   *   vim responds with ^[[?0c or ^[[?1c after the terminal's response (?)\n   *\n   * @vt: #Y CSI DA2   \"Secondary Device Attributes\"   \"CSI > c\" \"Send primary device attributes.\"\n   *\n   *\n   * TODO: fix and cleanup response\n   */\n  public sendDeviceAttributesSecondary(params: IParams): boolean {\n    if (params.params[0] > 0) {\n      return true;\n    }\n    // xterm and urxvt\n    // seem to spit this\n    // out around ~370 times (?).\n    if (this._is('xterm')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>0;276;0c');\n    } else if (this._is('rxvt-unicode')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>85;95;0c');\n    } else if (this._is('linux')) {\n      // not supported by linux console.\n      // linux console echoes parameters.\n      this._coreService.triggerDataEvent(params.params[0] + 'c');\n    } else if (this._is('screen')) {\n      this._coreService.triggerDataEvent(C0.ESC + '[>83;40003;0c');\n    }\n    return true;\n  }\n\n  /**\n   * Evaluate if the current terminal is the given argument.\n   * @param term The terminal name to evaluate\n   */\n  private _is(term: string): boolean {\n    return (this._optionsService.rawOptions.termName + '').indexOf(term) === 0;\n  }\n\n  /**\n   * CSI Pm h  Set Mode (SM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Insert Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Automatic Newline (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI SM    \"Set Mode\"  \"CSI Pm h\"  \"Set various terminal modes.\"\n   * Supported param values by SM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Insert Mode (IRM).                     | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Automatic Newline (LNM).               | #Y      |\n   */\n  public setMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = true;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm h\n   *   DEC Private Mode Set (DECSET).\n   *     Ps = 1  -> Application Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate USASCII for character sets G0-G3\n   *     (DECANM), and set VT100 mode.\n   *     Ps = 3  -> 132 Column Mode (DECCOLM).\n   *     Ps = 4  -> Smooth (Slow) Scroll (DECSCLM).\n   *     Ps = 5  -> Reverse Video (DECSCNM).\n   *     Ps = 6  -> Origin Mode (DECOM).\n   *     Ps = 7  -> Wraparound Mode (DECAWM).\n   *     Ps = 8  -> Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Send Mouse X & Y on button press.  See the sec-\n   *     tion Mouse Tracking.\n   *     Ps = 1 0  -> Show toolbar (rxvt).\n   *     Ps = 1 2  -> Start Blinking Cursor (att610).\n   *     Ps = 1 8  -> Print form feed (DECPFF).\n   *     Ps = 1 9  -> Set print extent to full screen (DECPEX).\n   *     Ps = 2 5  -> Show Cursor (DECTCEM).\n   *     Ps = 3 0  -> Show scrollbar (rxvt).\n   *     Ps = 3 5  -> Enable font-shifting functions (rxvt).\n   *     Ps = 3 8  -> Enter Tektronix Mode (DECTEK).\n   *     Ps = 4 0  -> Allow 80 -> 132 Mode.\n   *     Ps = 4 1  -> more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Enable Nation Replacement Character sets (DECN-\n   *     RCM).\n   *     Ps = 4 4  -> Turn On Margin Bell.\n   *     Ps = 4 5  -> Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Start Logging.  This is normally disabled by a\n   *     compile-time option.\n   *     Ps = 4 7  -> Use Alternate Screen Buffer.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 6 6  -> Application keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends backspace (DECBKM).\n   *     Ps = 1 0 0 0  -> Send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Enable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Scroll to bottom on tty output (rxvt).\n   *     Ps = 1 0 1 1  -> Scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Interpret \"meta\" key, sets eighth bit.\n   *     (enables the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Enable special modifiers for Alt and Num-\n   *     Lock keys.  (This enables the numLock resource).\n   *     Ps = 1 0 3 6  -> Send ESC   when Meta modifies a key.  (This\n   *     enables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send DEL from the editing-keypad Delete\n   *     key.\n   *     Ps = 1 0 3 9  -> Send ESC  when Alt modifies a key.  (This\n   *     enables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Keep selection even if not highlighted.\n   *     (This enables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the CLIPBOARD selection.  (This enables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Enable Urgency window manager hint when\n   *     Control-G is received.  (This enables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Enable raising of the window when Control-G\n   *     is received.  (enables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Alternate Screen Buffer.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Save cursor as in DECSC.  (This may be dis-\n   *     abled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Save cursor as in DECSC and use Alternate\n   *     Screen Buffer, clearing it first.  (This may be disabled by\n   *     the titeInhibit resource).  This combines the effects of the 1\n   *     0 4 7  and 1 0 4 8  modes.  Use this with terminfo-based\n   *     applications rather than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Set terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Set Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Set HP function-key mode.\n   *     Ps = 1 0 5 3  -> Set SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Set legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Set VT220 keyboard emulation.\n   *     Ps = 2 0 0 4  -> Set bracketed paste mode.\n   * Modes:\n   *   http: *vt100.net/docs/vt220-rm/chapter4.html\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECSET  \"DEC Private Set Mode\" \"CSI ? Pm h\"  \"Set various terminal attributes.\"\n   * Supported param values by DECSET:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | --------|\n   * | 1     | Application Cursor Keys (DECCKM).                       | #Y      |\n   * | 2     | Designate US-ASCII for character sets G0-G3 (DECANM).   | #Y      |\n   * | 3     | 132 Column Mode (DECCOLM).                              | #Y      |\n   * | 6     | Origin Mode (DECOM).                                    | #Y      |\n   * | 7     | Auto-wrap Mode (DECAWM).                                | #Y      |\n   * | 8     | Auto-repeat Keys (DECARM). Always on.                   | #N      |\n   * | 9     | X10 xterm mouse protocol.                               | #Y      |\n   * | 12    | Start Blinking Cursor.                                  | #Y      |\n   * | 25    | Show Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | Reverse wrap-around.                                    | #Y      |\n   * | 47    | Use Alternate Screen Buffer.                            | #Y      |\n   * | 66    | Application keypad (DECNKM).                            | #Y      |\n   * | 1000  | X11 xterm mouse protocol.                               | #Y      |\n   * | 1002  | Use Cell Motion Mouse Tracking.                         | #Y      |\n   * | 1003  | Use All Motion Mouse Tracking.                          | #Y      |\n   * | 1004  | Send FocusIn/FocusOut events                            | #Y      |\n   * | 1005  | Enable UTF-8 Mouse Mode.                                | #N      |\n   * | 1006  | Enable SGR Mouse Mode.                                  | #Y      |\n   * | 1015  | Enable urxvt Mouse Mode.                                | #N      |\n   * | 1016  | Enable SGR-Pixels Mouse Mode.                           | #Y      |\n   * | 1047  | Use Alternate Screen Buffer.                            | #Y      |\n   * | 1048  | Save cursor as in DECSC.                                | #Y      |\n   * | 1049  | Save cursor and switch to alternate buffer clearing it. | #P[Does not clear the alternate buffer.] |\n   * | 2004  | Set bracketed paste mode.                               | #Y      |\n   *\n   *\n   * FIXME: implement DECSCNM, 1049 should clear altbuffer\n   */\n  public setModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = true;\n          break;\n        case 2:\n          this._charsetService.setgCharset(0, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(1, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(2, DEFAULT_CHARSET);\n          this._charsetService.setgCharset(3, DEFAULT_CHARSET);\n          // set VT100 mode here\n          break;\n        case 3:\n          /**\n           * DECCOLM - 132 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(132, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = true;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = true;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = true;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = true;\n          break;\n        case 66:\n          this._logService.debug('Serial port requested application keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = true;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n          // no release, no motion, no wheel, no modifiers.\n          this._coreMouseService.activeProtocol = 'X10';\n          break;\n        case 1000: // vt200 mouse\n          // no motion.\n          this._coreMouseService.activeProtocol = 'VT200';\n          break;\n        case 1002: // button event mouse\n          this._coreMouseService.activeProtocol = 'DRAG';\n          break;\n        case 1003: // any event mouse\n          // any event - sends motion events,\n          // even if there is no button held down.\n          this._coreMouseService.activeProtocol = 'ANY';\n          break;\n        case 1004: // send focusin/focusout events\n          // focusin: ^[[I\n          // focusout: ^[[O\n          this._coreService.decPrivateModes.sendFocus = true;\n          this._onRequestSendFocus.fire();\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'SGR';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECSET 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'SGR_PIXELS';\n          break;\n        case 25: // show cursor\n          this._coreService.isCursorHidden = false;\n          break;\n        case 1048: // alt screen cursor\n          this.saveCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n          this.saveCursor();\n        // FALL-THROUGH\n        case 47: // alt screen buffer\n        case 1047: // alt screen buffer\n          this._bufferService.buffers.activateAltBuffer(this._eraseAttrData());\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = true;\n          break;\n      }\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI Pm l  Reset Mode (RM).\n   *     Ps = 2  -> Keyboard Action Mode (AM).\n   *     Ps = 4  -> Replace Mode (IRM).\n   *     Ps = 1 2  -> Send/receive (SRM).\n   *     Ps = 2 0  -> Normal Linefeed (LNM).\n   *\n   * @vt: #P[Only IRM is supported.]    CSI RM    \"Reset Mode\"  \"CSI Pm l\"  \"Set various terminal attributes.\"\n   * Supported param values by RM:\n   *\n   * | Param | Action                                 | Support |\n   * | ----- | -------------------------------------- | ------- |\n   * | 2     | Keyboard Action Mode (KAM). Always on. | #N      |\n   * | 4     | Replace Mode (IRM). (default)          | #Y      |\n   * | 12    | Send/receive (SRM). Always off.        | #N      |\n   * | 20    | Normal Linefeed (LNM).                 | #Y      |\n   *\n   *\n   * FIXME: why is LNM commented out?\n   */\n  public resetMode(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 4:\n          this._coreService.modes.insertMode = false;\n          break;\n        case 20:\n          this._optionsService.options.convertEol = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI ? Pm l\n   *   DEC Private Mode Reset (DECRST).\n   *     Ps = 1  -> Normal Cursor Keys (DECCKM).\n   *     Ps = 2  -> Designate VT52 mode (DECANM).\n   *     Ps = 3  -> 80 Column Mode (DECCOLM).\n   *     Ps = 4  -> Jump (Fast) Scroll (DECSCLM).\n   *     Ps = 5  -> Normal Video (DECSCNM).\n   *     Ps = 6  -> Normal Cursor Mode (DECOM).\n   *     Ps = 7  -> No Wraparound Mode (DECAWM).\n   *     Ps = 8  -> No Auto-repeat Keys (DECARM).\n   *     Ps = 9  -> Don't send Mouse X & Y on button press.\n   *     Ps = 1 0  -> Hide toolbar (rxvt).\n   *     Ps = 1 2  -> Stop Blinking Cursor (att610).\n   *     Ps = 1 8  -> Don't print form feed (DECPFF).\n   *     Ps = 1 9  -> Limit print to scrolling region (DECPEX).\n   *     Ps = 2 5  -> Hide Cursor (DECTCEM).\n   *     Ps = 3 0  -> Don't show scrollbar (rxvt).\n   *     Ps = 3 5  -> Disable font-shifting functions (rxvt).\n   *     Ps = 4 0  -> Disallow 80 -> 132 Mode.\n   *     Ps = 4 1  -> No more(1) fix (see curses resource).\n   *     Ps = 4 2  -> Disable Nation Replacement Character sets (DEC-\n   *     NRCM).\n   *     Ps = 4 4  -> Turn Off Margin Bell.\n   *     Ps = 4 5  -> No Reverse-wraparound Mode.\n   *     Ps = 4 6  -> Stop Logging.  (This is normally disabled by a\n   *     compile-time option).\n   *     Ps = 4 7  -> Use Normal Screen Buffer.\n   *     Ps = 6 6  -> Numeric keypad (DECNKM).\n   *     Ps = 6 7  -> Backarrow key sends delete (DECBKM).\n   *     Ps = 1 0 0 0  -> Don't send Mouse X & Y on button press and\n   *     release.  See the section Mouse Tracking.\n   *     Ps = 1 0 0 1  -> Don't use Hilite Mouse Tracking.\n   *     Ps = 1 0 0 2  -> Don't use Cell Motion Mouse Tracking.\n   *     Ps = 1 0 0 3  -> Don't use All Motion Mouse Tracking.\n   *     Ps = 1 0 0 4  -> Don't send FocusIn/FocusOut events.\n   *     Ps = 1 0 0 5  -> Disable Extended Mouse Mode.\n   *     Ps = 1 0 1 0  -> Don't scroll to bottom on tty output\n   *     (rxvt).\n   *     Ps = 1 0 1 1  -> Don't scroll to bottom on key press (rxvt).\n   *     Ps = 1 0 3 4  -> Don't interpret \"meta\" key.  (This disables\n   *     the eightBitInput resource).\n   *     Ps = 1 0 3 5  -> Disable special modifiers for Alt and Num-\n   *     Lock keys.  (This disables the numLock resource).\n   *     Ps = 1 0 3 6  -> Don't send ESC  when Meta modifies a key.\n   *     (This disables the metaSendsEscape resource).\n   *     Ps = 1 0 3 7  -> Send VT220 Remove from the editing-keypad\n   *     Delete key.\n   *     Ps = 1 0 3 9  -> Don't send ESC  when Alt modifies a key.\n   *     (This disables the altSendsEscape resource).\n   *     Ps = 1 0 4 0  -> Do not keep selection when not highlighted.\n   *     (This disables the keepSelection resource).\n   *     Ps = 1 0 4 1  -> Use the PRIMARY selection.  (This disables\n   *     the selectToClipboard resource).\n   *     Ps = 1 0 4 2  -> Disable Urgency window manager hint when\n   *     Control-G is received.  (This disables the bellIsUrgent\n   *     resource).\n   *     Ps = 1 0 4 3  -> Disable raising of the window when Control-\n   *     G is received.  (This disables the popOnBell resource).\n   *     Ps = 1 0 4 7  -> Use Normal Screen Buffer, clearing screen\n   *     first if in the Alternate Screen.  (This may be disabled by\n   *     the titeInhibit resource).\n   *     Ps = 1 0 4 8  -> Restore cursor as in DECRC.  (This may be\n   *     disabled by the titeInhibit resource).\n   *     Ps = 1 0 4 9  -> Use Normal Screen Buffer and restore cursor\n   *     as in DECRC.  (This may be disabled by the titeInhibit\n   *     resource).  This combines the effects of the 1 0 4 7  and 1 0\n   *     4 8  modes.  Use this with terminfo-based applications rather\n   *     than the 4 7  mode.\n   *     Ps = 1 0 5 0  -> Reset terminfo/termcap function-key mode.\n   *     Ps = 1 0 5 1  -> Reset Sun function-key mode.\n   *     Ps = 1 0 5 2  -> Reset HP function-key mode.\n   *     Ps = 1 0 5 3  -> Reset SCO function-key mode.\n   *     Ps = 1 0 6 0  -> Reset legacy keyboard emulation (X11R6).\n   *     Ps = 1 0 6 1  -> Reset keyboard emulation to Sun/PC style.\n   *     Ps = 2 0 0 4  -> Reset bracketed paste mode.\n   *\n   * @vt: #P[See below for supported modes.]    CSI DECRST  \"DEC Private Reset Mode\" \"CSI ? Pm l\"  \"Reset various terminal attributes.\"\n   * Supported param values by DECRST:\n   *\n   * | param | Action                                                  | Support |\n   * | ----- | ------------------------------------------------------- | ------- |\n   * | 1     | Normal Cursor Keys (DECCKM).                            | #Y      |\n   * | 2     | Designate VT52 mode (DECANM).                           | #N      |\n   * | 3     | 80 Column Mode (DECCOLM).                               | #B[Switches to old column width instead of 80.] |\n   * | 6     | Normal Cursor Mode (DECOM).                             | #Y      |\n   * | 7     | No Wraparound Mode (DECAWM).                            | #Y      |\n   * | 8     | No Auto-repeat Keys (DECARM).                           | #N      |\n   * | 9     | Don't send Mouse X & Y on button press.                 | #Y      |\n   * | 12    | Stop Blinking Cursor.                                   | #Y      |\n   * | 25    | Hide Cursor (DECTCEM).                                  | #Y      |\n   * | 45    | No reverse wrap-around.                                 | #Y      |\n   * | 47    | Use Normal Screen Buffer.                               | #Y      |\n   * | 66    | Numeric keypad (DECNKM).                                | #Y      |\n   * | 1000  | Don't send Mouse reports.                               | #Y      |\n   * | 1002  | Don't use Cell Motion Mouse Tracking.                   | #Y      |\n   * | 1003  | Don't use All Motion Mouse Tracking.                    | #Y      |\n   * | 1004  | Don't send FocusIn/FocusOut events.                     | #Y      |\n   * | 1005  | Disable UTF-8 Mouse Mode.                               | #N      |\n   * | 1006  | Disable SGR Mouse Mode.                                 | #Y      |\n   * | 1015  | Disable urxvt Mouse Mode.                               | #N      |\n   * | 1016  | Disable SGR-Pixels Mouse Mode.                          | #Y      |\n   * | 1047  | Use Normal Screen Buffer (clearing screen if in alt).   | #Y      |\n   * | 1048  | Restore cursor as in DECRC.                             | #Y      |\n   * | 1049  | Use Normal Screen Buffer and restore cursor.            | #Y      |\n   * | 2004  | Reset bracketed paste mode.                             | #Y      |\n   *\n   *\n   * FIXME: DECCOLM is currently broken (already fixed in window options PR)\n   */\n  public resetModePrivate(params: IParams): boolean {\n    for (let i = 0; i < params.length; i++) {\n      switch (params.params[i]) {\n        case 1:\n          this._coreService.decPrivateModes.applicationCursorKeys = false;\n          break;\n        case 3:\n          /**\n           * DECCOLM - 80 column mode.\n           * This is only active if 'SetWinLines' (24) is enabled\n           * through `options.windowsOptions`.\n           */\n          if (this._optionsService.rawOptions.windowOptions.setWinLines) {\n            this._bufferService.resize(80, this._bufferService.rows);\n            this._onRequestReset.fire();\n          }\n          break;\n        case 6:\n          this._coreService.decPrivateModes.origin = false;\n          this._setCursor(0, 0);\n          break;\n        case 7:\n          this._coreService.decPrivateModes.wraparound = false;\n          break;\n        case 12:\n          this._optionsService.options.cursorBlink = false;\n          break;\n        case 45:\n          this._coreService.decPrivateModes.reverseWraparound = false;\n          break;\n        case 66:\n          this._logService.debug('Switching back to normal keypad.');\n          this._coreService.decPrivateModes.applicationKeypad = false;\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 9: // X10 Mouse\n        case 1000: // vt200 mouse\n        case 1002: // button event mouse\n        case 1003: // any event mouse\n          this._coreMouseService.activeProtocol = 'NONE';\n          break;\n        case 1004: // send focusin/focusout events\n          this._coreService.decPrivateModes.sendFocus = false;\n          break;\n        case 1005: // utf8 ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1005 not supported (see #2507)');\n          break;\n        case 1006: // sgr ext mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 1015: // urxvt ext mode mouse - removed in #2507\n          this._logService.debug('DECRST 1015 not supported (see #2507)');\n          break;\n        case 1016: // sgr pixels mode mouse\n          this._coreMouseService.activeEncoding = 'DEFAULT';\n          break;\n        case 25: // hide cursor\n          this._coreService.isCursorHidden = true;\n          break;\n        case 1048: // alt screen cursor\n          this.restoreCursor();\n          break;\n        case 1049: // alt screen buffer cursor\n        // FALL-THROUGH\n        case 47: // normal screen buffer\n        case 1047: // normal screen buffer - clearing it first\n          // Ensure the selection manager has the correct buffer\n          this._bufferService.buffers.activateNormalBuffer();\n          if (params.params[i] === 1049) {\n            this.restoreCursor();\n          }\n          this._coreService.isCursorInitialized = true;\n          this._onRequestRefreshRows.fire(0, this._bufferService.rows - 1);\n          this._onRequestSyncScrollBar.fire();\n          break;\n        case 2004: // bracketed paste mode (https://cirw.in/blog/bracketed-paste)\n          this._coreService.decPrivateModes.bracketedPasteMode = false;\n          break;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps $ p Request ANSI Mode (DECRQM).\n   *\n   * Reports CSI Ps; Pm $ y (DECRPM), where Ps is the mode number as in SM/RM,\n   * and Pm is the mode value:\n   *    0 - not recognized\n   *    1 - set\n   *    2 - reset\n   *    3 - permanently set\n   *    4 - permanently reset\n   *\n   * @vt: #Y  CSI   DECRQM  \"Request Mode\"  \"CSI Ps $p\"  \"Request mode state.\"\n   * Returns a report as `CSI Ps; Pm $ y` (DECRPM), where `Ps` is the mode number as in SM/RM\n   * or DECSET/DECRST, and `Pm` is the mode value:\n   * - 0: not recognized\n   * - 1: set\n   * - 2: reset\n   * - 3: permanently set\n   * - 4: permanently reset\n   *\n   * For modes not understood xterm.js always returns `notRecognized`. In general this means,\n   * that a certain operation mode is not implemented and cannot be used.\n   *\n   * Modes changing the active terminal buffer (47, 1047, 1049) are not subqueried\n   * and only report, whether the alternate buffer is set.\n   *\n   * Mouse encodings and mouse protocols are handled mutual exclusive,\n   * thus only one of each of those can be set at a given time.\n   *\n   * There is a chance, that some mode reports are not fully in line with xterm.js' behavior,\n   * e.g. if the default implementation already exposes a certain behavior. If you find\n   * discrepancies in the mode reports, please file a bug.\n   */\n  public requestMode(params: IParams, ansi: boolean): boolean {\n    // return value as in DECRPM\n    const enum V {\n      NOT_RECOGNIZED = 0,\n      SET = 1,\n      RESET = 2,\n      PERMANENTLY_SET = 3,\n      PERMANENTLY_RESET = 4\n    }\n\n    // access helpers\n    const dm = this._coreService.decPrivateModes;\n    const { activeProtocol: mouseProtocol, activeEncoding: mouseEncoding } = this._coreMouseService;\n    const cs = this._coreService;\n    const { buffers, cols } = this._bufferService;\n    const { active, alt } = buffers;\n    const opts = this._optionsService.rawOptions;\n\n    const f = (m: number, v: V): boolean => {\n      cs.triggerDataEvent(`${C0.ESC}[${ansi ? '' : '?'}${m};${v}$y`);\n      return true;\n    };\n    const b2v = (value: boolean): V => value ? V.SET : V.RESET;\n\n    const p = params.params[0];\n\n    if (ansi) {\n      if (p === 2) return f(p, V.PERMANENTLY_RESET);\n      if (p === 4) return f(p, b2v(cs.modes.insertMode));\n      if (p === 12) return f(p, V.PERMANENTLY_SET);\n      if (p === 20) return f(p, b2v(opts.convertEol));\n      return f(p, V.NOT_RECOGNIZED);\n    }\n\n    if (p === 1) return f(p, b2v(dm.applicationCursorKeys));\n    if (p === 3) return f(p, opts.windowOptions.setWinLines ? (cols === 80 ? V.RESET : cols === 132 ? V.SET : V.NOT_RECOGNIZED) : V.NOT_RECOGNIZED);\n    if (p === 6) return f(p, b2v(dm.origin));\n    if (p === 7) return f(p, b2v(dm.wraparound));\n    if (p === 8) return f(p, V.PERMANENTLY_SET);\n    if (p === 9) return f(p, b2v(mouseProtocol === 'X10'));\n    if (p === 12) return f(p, b2v(opts.cursorBlink));\n    if (p === 25) return f(p, b2v(!cs.isCursorHidden));\n    if (p === 45) return f(p, b2v(dm.reverseWraparound));\n    if (p === 66) return f(p, b2v(dm.applicationKeypad));\n    if (p === 67) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1000) return f(p, b2v(mouseProtocol === 'VT200'));\n    if (p === 1002) return f(p, b2v(mouseProtocol === 'DRAG'));\n    if (p === 1003) return f(p, b2v(mouseProtocol === 'ANY'));\n    if (p === 1004) return f(p, b2v(dm.sendFocus));\n    if (p === 1005) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1006) return f(p, b2v(mouseEncoding === 'SGR'));\n    if (p === 1015) return f(p, V.PERMANENTLY_RESET);\n    if (p === 1016) return f(p, b2v(mouseEncoding === 'SGR_PIXELS'));\n    if (p === 1048) return f(p, V.SET); // xterm always returns SET here\n    if (p === 47 || p === 1047 || p === 1049) return f(p, b2v(active === alt));\n    if (p === 2004) return f(p, b2v(dm.bracketedPasteMode));\n    return f(p, V.NOT_RECOGNIZED);\n  }\n\n  /**\n   * Helper to write color information packed with color mode.\n   */\n  private _updateAttrColor(color: number, mode: number, c1: number, c2: number, c3: number): number {\n    if (mode === 2) {\n      color |= Attributes.CM_RGB;\n      color &= ~Attributes.RGB_MASK;\n      color |= AttributeData.fromColorRGB([c1, c2, c3]);\n    } else if (mode === 5) {\n      color &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n      color |= Attributes.CM_P256 | (c1 & 0xff);\n    }\n    return color;\n  }\n\n  /**\n   * Helper to extract and apply color params/subparams.\n   * Returns advance for params index.\n   */\n  private _extractColor(params: IParams, pos: number, attr: IAttributeData): number {\n    // normalize params\n    // meaning: [target, CM, ign, val, val, val]\n    // RGB    : [ 38/48,  2, ign,   r,   g,   b]\n    // P256   : [ 38/48,  5, ign,   v, ign, ign]\n    const accu = [0, 0, -1, 0, 0, 0];\n\n    // alignment placeholder for non color space sequences\n    let cSpace = 0;\n\n    // return advance we took in params\n    let advance = 0;\n\n    do {\n      accu[advance + cSpace] = params.params[pos + advance];\n      if (params.hasSubParams(pos + advance)) {\n        const subparams = params.getSubParams(pos + advance)!;\n        let i = 0;\n        do {\n          if (accu[1] === 5) {\n            cSpace = 1;\n          }\n          accu[advance + i + 1 + cSpace] = subparams[i];\n        } while (++i < subparams.length && i + advance + 1 + cSpace < accu.length);\n        break;\n      }\n      // exit early if can decide color mode with semicolons\n      if ((accu[1] === 5 && advance + cSpace >= 2)\n        || (accu[1] === 2 && advance + cSpace >= 5)) {\n        break;\n      }\n      // offset colorSpace slot for semicolon mode\n      if (accu[1]) {\n        cSpace = 1;\n      }\n    } while (++advance + pos < params.length && advance + cSpace < accu.length);\n\n    // set default values to 0\n    for (let i = 2; i < accu.length; ++i) {\n      if (accu[i] === -1) {\n        accu[i] = 0;\n      }\n    }\n\n    // apply colors\n    switch (accu[0]) {\n      case 38:\n        attr.fg = this._updateAttrColor(attr.fg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 48:\n        attr.bg = this._updateAttrColor(attr.bg, accu[1], accu[3], accu[4], accu[5]);\n        break;\n      case 58:\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = this._updateAttrColor(attr.extended.underlineColor, accu[1], accu[3], accu[4], accu[5]);\n    }\n\n    return advance;\n  }\n\n  /**\n   * SGR 4 subparams:\n   *    4:0   -   equal to SGR 24 (turn off all underline)\n   *    4:1   -   equal to SGR 4 (single underline)\n   *    4:2   -   equal to SGR 21 (double underline)\n   *    4:3   -   curly underline\n   *    4:4   -   dotted underline\n   *    4:5   -   dashed underline\n   */\n  private _processUnderline(style: number, attr: IAttributeData): void {\n    // treat extended attrs as immutable, thus always clone from old one\n    // this is needed since the buffer only holds references to it\n    attr.extended = attr.extended.clone();\n\n    // default to 1 == single underline\n    if (!~style || style > 5) {\n      style = 1;\n    }\n    attr.extended.underlineStyle = style;\n    attr.fg |= FgFlags.UNDERLINE;\n\n    // 0 deactivates underline\n    if (style === 0) {\n      attr.fg &= ~FgFlags.UNDERLINE;\n    }\n\n    // update HAS_EXTENDED in BG\n    attr.updateExtended();\n  }\n\n  private _processSGR0(attr: IAttributeData): void {\n    attr.fg = DEFAULT_ATTR_DATA.fg;\n    attr.bg = DEFAULT_ATTR_DATA.bg;\n    attr.extended = attr.extended.clone();\n    // Reset underline style and color. Note that we don't want to reset other\n    // fields such as the url id.\n    attr.extended.underlineStyle = UnderlineStyle.NONE;\n    attr.extended.underlineColor &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    attr.updateExtended();\n  }\n\n  /**\n   * CSI Pm m  Character Attributes (SGR).\n   *\n   * @vt: #P[See below for supported attributes.]    CSI SGR   \"Select Graphic Rendition\"  \"CSI Pm m\"  \"Set/Reset various text attributes.\"\n   * SGR selects one or more character attributes at the same time. Multiple params (up to 32)\n   * are applied in order from left to right. The changed attributes are applied to all new\n   * characters received. If you move characters in the viewport by scrolling or any other means,\n   * then the attributes move with the characters.\n   *\n   * Supported param values by SGR:\n   *\n   * | Param     | Meaning                                                  | Support |\n   * | --------- | -------------------------------------------------------- | ------- |\n   * | 0         | Normal (default). Resets any other preceding SGR.        | #Y      |\n   * | 1         | Bold. (also see `options.drawBoldTextInBrightColors`)    | #Y      |\n   * | 2         | Faint, decreased intensity.                              | #Y      |\n   * | 3         | Italic.                                                  | #Y      |\n   * | 4         | Underlined (see below for style support).                | #Y      |\n   * | 5         | Slowly blinking.                                         | #N      |\n   * | 6         | Rapidly blinking.                                        | #N      |\n   * | 7         | Inverse. Flips foreground and background color.          | #Y      |\n   * | 8         | Invisible (hidden).                                      | #Y      |\n   * | 9         | Crossed-out characters (strikethrough).                  | #Y      |\n   * | 21        | Doubly underlined.                                       | #Y      |\n   * | 22        | Normal (neither bold nor faint).                         | #Y      |\n   * | 23        | No italic.                                               | #Y      |\n   * | 24        | Not underlined.                                          | #Y      |\n   * | 25        | Steady (not blinking).                                   | #Y      |\n   * | 27        | Positive (not inverse).                                  | #Y      |\n   * | 28        | Visible (not hidden).                                    | #Y      |\n   * | 29        | Not Crossed-out (strikethrough).                         | #Y      |\n   * | 30        | Foreground color: Black.                                 | #Y      |\n   * | 31        | Foreground color: Red.                                   | #Y      |\n   * | 32        | Foreground color: Green.                                 | #Y      |\n   * | 33        | Foreground color: Yellow.                                | #Y      |\n   * | 34        | Foreground color: Blue.                                  | #Y      |\n   * | 35        | Foreground color: Magenta.                               | #Y      |\n   * | 36        | Foreground color: Cyan.                                  | #Y      |\n   * | 37        | Foreground color: White.                                 | #Y      |\n   * | 38        | Foreground color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 39        | Foreground color: Default (original).                    | #Y      |\n   * | 40        | Background color: Black.                                 | #Y      |\n   * | 41        | Background color: Red.                                   | #Y      |\n   * | 42        | Background color: Green.                                 | #Y      |\n   * | 43        | Background color: Yellow.                                | #Y      |\n   * | 44        | Background color: Blue.                                  | #Y      |\n   * | 45        | Background color: Magenta.                               | #Y      |\n   * | 46        | Background color: Cyan.                                  | #Y      |\n   * | 47        | Background color: White.                                 | #Y      |\n   * | 48        | Background color: Extended color.                        | #P[Support for RGB and indexed colors, see below.] |\n   * | 49        | Background color: Default (original).                    | #Y      |\n   * | 53        | Overlined.                                               | #Y      |\n   * | 55        | Not Overlined.                                           | #Y      |\n   * | 58        | Underline color: Extended color.                         | #P[Support for RGB and indexed colors, see below.] |\n   * | 90 - 97   | Bright foreground color (analogous to 30 - 37).          | #Y      |\n   * | 100 - 107 | Bright background color (analogous to 40 - 47).          | #Y      |\n   *\n   * Underline supports subparams to denote the style in the form `4 : x`:\n   *\n   * | x      | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | No underline. Same as `SGR 24 m`.                             | #Y      |\n   * | 1      | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   * | 2      | Double underline.                                             | #Y      |\n   * | 3      | Curly underline.                                              | #Y      |\n   * | 4      | Dotted underline.                                             | #Y      |\n   * | 5      | Dashed underline.                                             | #Y      |\n   * | other  | Single underline. Same as `SGR 4 m`.                          | #Y      |\n   *\n   * Extended colors are supported for foreground (Ps=38), background (Ps=48) and underline (Ps=58)\n   * as follows:\n   *\n   * | Ps + 1 | Meaning                                                       | Support |\n   * | ------ | ------------------------------------------------------------- | ------- |\n   * | 0      | Implementation defined.                                       | #N      |\n   * | 1      | Transparent.                                                  | #N      |\n   * | 2      | RGB color as `Ps ; 2 ; R ; G ; B` or `Ps : 2 : : R : G : B`.  | #Y      |\n   * | 3      | CMY color.                                                    | #N      |\n   * | 4      | CMYK color.                                                   | #N      |\n   * | 5      | Indexed (256 colors) as `Ps ; 5 ; INDEX` or `Ps : 5 : INDEX`. | #Y      |\n   *\n   *\n   * FIXME: blinking is implemented in attrs, but not working in renderers?\n   * FIXME: remove dead branch for p=100\n   */\n  public charAttributes(params: IParams): boolean {\n    // Optimize a single SGR0.\n    if (params.length === 1 && params.params[0] === 0) {\n      this._processSGR0(this._curAttrData);\n      return true;\n    }\n\n    const l = params.length;\n    let p;\n    const attr = this._curAttrData;\n\n    for (let i = 0; i < l; i++) {\n      p = params.params[i];\n      if (p >= 30 && p <= 37) {\n        // fg color 8\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 30);\n      } else if (p >= 40 && p <= 47) {\n        // bg color 8\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 40);\n      } else if (p >= 90 && p <= 97) {\n        // fg color 16\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.fg |= Attributes.CM_P16 | (p - 90) | 8;\n      } else if (p >= 100 && p <= 107) {\n        // bg color 16\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.PCOLOR_MASK);\n        attr.bg |= Attributes.CM_P16 | (p - 100) | 8;\n      } else if (p === 0) {\n        // default\n        this._processSGR0(attr);\n      } else if (p === 1) {\n        // bold text\n        attr.fg |= FgFlags.BOLD;\n      } else if (p === 3) {\n        // italic text\n        attr.bg |= BgFlags.ITALIC;\n      } else if (p === 4) {\n        // underlined text\n        attr.fg |= FgFlags.UNDERLINE;\n        this._processUnderline(params.hasSubParams(i) ? params.getSubParams(i)![0] : UnderlineStyle.SINGLE, attr);\n      } else if (p === 5) {\n        // blink\n        attr.fg |= FgFlags.BLINK;\n      } else if (p === 7) {\n        // inverse and positive\n        // test with: echo -e '\\e[31m\\e[42mhello\\e[7mworld\\e[27mhi\\e[m'\n        attr.fg |= FgFlags.INVERSE;\n      } else if (p === 8) {\n        // invisible\n        attr.fg |= FgFlags.INVISIBLE;\n      } else if (p === 9) {\n        // strikethrough\n        attr.fg |= FgFlags.STRIKETHROUGH;\n      } else if (p === 2) {\n        // dimmed text\n        attr.bg |= BgFlags.DIM;\n      } else if (p === 21) {\n        // double underline\n        this._processUnderline(UnderlineStyle.DOUBLE, attr);\n      } else if (p === 22) {\n        // not bold nor faint\n        attr.fg &= ~FgFlags.BOLD;\n        attr.bg &= ~BgFlags.DIM;\n      } else if (p === 23) {\n        // not italic\n        attr.bg &= ~BgFlags.ITALIC;\n      } else if (p === 24) {\n        // not underlined\n        attr.fg &= ~FgFlags.UNDERLINE;\n        this._processUnderline(UnderlineStyle.NONE, attr);\n      } else if (p === 25) {\n        // not blink\n        attr.fg &= ~FgFlags.BLINK;\n      } else if (p === 27) {\n        // not inverse\n        attr.fg &= ~FgFlags.INVERSE;\n      } else if (p === 28) {\n        // not invisible\n        attr.fg &= ~FgFlags.INVISIBLE;\n      } else if (p === 29) {\n        // not strikethrough\n        attr.fg &= ~FgFlags.STRIKETHROUGH;\n      } else if (p === 39) {\n        // reset fg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 49) {\n        // reset bg\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else if (p === 38 || p === 48 || p === 58) {\n        // fg color 256 and RGB\n        i += this._extractColor(params, i, attr);\n      } else if (p === 53) {\n        // overline\n        attr.bg |= BgFlags.OVERLINE;\n      } else if (p === 55) {\n        // not overline\n        attr.bg &= ~BgFlags.OVERLINE;\n      } else if (p === 59) {\n        attr.extended = attr.extended.clone();\n        attr.extended.underlineColor = -1;\n        attr.updateExtended();\n      } else if (p === 100) { // FIXME: dead branch, p=100 already handled above!\n        // reset fg/bg\n        attr.fg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.fg |= DEFAULT_ATTR_DATA.fg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n        attr.bg &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n        attr.bg |= DEFAULT_ATTR_DATA.bg & (Attributes.PCOLOR_MASK | Attributes.RGB_MASK);\n      } else {\n        this._logService.debug('Unknown SGR attribute: %d.', p);\n      }\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps n  Device Status Report (DSR).\n   *     Ps = 5  -> Status Report.  Result (``OK'') is\n   *   CSI 0 n\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column].\n   *   Result is\n   *   CSI r ; c R\n   * CSI ? Ps n\n   *   Device Status Report (DSR, DEC-specific).\n   *     Ps = 6  -> Report Cursor Position (CPR) [row;column] as CSI\n   *     ? r ; c R (assumes page is zero).\n   *     Ps = 1 5  -> Report Printer status as CSI ? 1 0  n  (ready).\n   *     or CSI ? 1 1  n  (not ready).\n   *     Ps = 2 5  -> Report UDK status as CSI ? 2 0  n  (unlocked)\n   *     or CSI ? 2 1  n  (locked).\n   *     Ps = 2 6  -> Report Keyboard status as\n   *   CSI ? 2 7  ;  1  ;  0  ;  0  n  (North American).\n   *   The last two parameters apply to VT400 & up, and denote key-\n   *   board ready and LK01 respectively.\n   *     Ps = 5 3  -> Report Locator status as\n   *   CSI ? 5 3  n  Locator available, if compiled-in, or\n   *   CSI ? 5 0  n  No Locator, if not.\n   *\n   * @vt: #Y CSI DSR   \"Device Status Report\"  \"CSI Ps n\"  \"Request cursor position (CPR) with `Ps` = 6.\"\n   */\n  public deviceStatus(params: IParams): boolean {\n    switch (params.params[0]) {\n      case 5:\n        // status report\n        this._coreService.triggerDataEvent(`${C0.ESC}[0n`);\n        break;\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[${y};${x}R`);\n        break;\n    }\n    return true;\n  }\n\n  // @vt: #P[Only CPR is supported.]  CSI DECDSR  \"DEC Device Status Report\"  \"CSI ? Ps n\"  \"Only CPR is supported (same as DSR).\"\n  public deviceStatusPrivate(params: IParams): boolean {\n    // modern xterm doesnt seem to\n    // respond to any of these except ?6, 6, and 5\n    switch (params.params[0]) {\n      case 6:\n        // cursor position\n        const y = this._activeBuffer.y + 1;\n        const x = this._activeBuffer.x + 1;\n        this._coreService.triggerDataEvent(`${C0.ESC}[?${y};${x}R`);\n        break;\n      case 15:\n        // no printer\n        // this.handler(C0.ESC + '[?11n');\n        break;\n      case 25:\n        // dont support user defined keys\n        // this.handler(C0.ESC + '[?21n');\n        break;\n      case 26:\n        // north american keyboard\n        // this.handler(C0.ESC + '[?27;1;0;0n');\n        break;\n      case 53:\n        // no dec locator/mouse\n        // this.handler(C0.ESC + '[?50n');\n        break;\n    }\n    return true;\n  }\n\n  /**\n   * CSI ! p   Soft terminal reset (DECSTR).\n   * http://vt100.net/docs/vt220-rm/table4-10.html\n   *\n   * @vt: #Y CSI DECSTR  \"Soft Terminal Reset\"   \"CSI ! p\"   \"Reset several terminal attributes to initial state.\"\n   * There are two terminal reset sequences - RIS and DECSTR. While RIS performs almost a full\n   * terminal bootstrap, DECSTR only resets certain attributes. For most needs DECSTR should be\n   * sufficient.\n   *\n   * The following terminal attributes are reset to default values:\n   * - IRM is reset (dafault = false)\n   * - scroll margins are reset (default = viewport size)\n   * - erase attributes are reset to default\n   * - charsets are reset\n   * - DECSC data is reset to initial values\n   * - DECOM is reset to absolute mode\n   *\n   *\n   * FIXME: there are several more attributes missing (see VT520 manual)\n   */\n  public softReset(params: IParams): boolean {\n    this._coreService.isCursorHidden = false;\n    this._onRequestSyncScrollBar.fire();\n    this._activeBuffer.scrollTop = 0;\n    this._activeBuffer.scrollBottom = this._bufferService.rows - 1;\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._coreService.reset();\n    this._charsetService.reset();\n\n    // reset DECSC data\n    this._activeBuffer.savedX = 0;\n    this._activeBuffer.savedY = this._activeBuffer.ybase;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n\n    // reset DECOM\n    this._coreService.decPrivateModes.origin = false;\n    return true;\n  }\n\n  /**\n   * CSI Ps SP q  Set cursor style (DECSCUSR, VT520).\n   *   Ps = 0  -> blinking block.\n   *   Ps = 1  -> blinking block (default).\n   *   Ps = 2  -> steady block.\n   *   Ps = 3  -> blinking underline.\n   *   Ps = 4  -> steady underline.\n   *   Ps = 5  -> blinking bar (xterm).\n   *   Ps = 6  -> steady bar (xterm).\n   *\n   * @vt: #Y CSI DECSCUSR  \"Set Cursor Style\"  \"CSI Ps SP q\"   \"Set cursor style.\"\n   * Supported cursor styles:\n   *  - empty, 0 or 1: steady block\n   *  - 2: blink block\n   *  - 3: steady underline\n   *  - 4: blink underline\n   *  - 5: steady bar\n   *  - 6: blink bar\n   */\n  public setCursorStyle(params: IParams): boolean {\n    const param = params.params[0] || 1;\n    switch (param) {\n      case 1:\n      case 2:\n        this._optionsService.options.cursorStyle = 'block';\n        break;\n      case 3:\n      case 4:\n        this._optionsService.options.cursorStyle = 'underline';\n        break;\n      case 5:\n      case 6:\n        this._optionsService.options.cursorStyle = 'bar';\n        break;\n    }\n    const isBlinking = param % 2 === 1;\n    this._optionsService.options.cursorBlink = isBlinking;\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps r\n   *   Set Scrolling Region [top;bottom] (default = full size of win-\n   *   dow) (DECSTBM).\n   *\n   * @vt: #Y CSI DECSTBM \"Set Top and Bottom Margin\" \"CSI Ps ; Ps r\" \"Set top and bottom margins of the viewport [top;bottom] (default = viewport size).\"\n   */\n  public setScrollRegion(params: IParams): boolean {\n    const top = params.params[0] || 1;\n    let bottom: number;\n\n    if (params.length < 2 || (bottom = params.params[1]) > this._bufferService.rows || bottom === 0) {\n      bottom = this._bufferService.rows;\n    }\n\n    if (bottom > top) {\n      this._activeBuffer.scrollTop = top - 1;\n      this._activeBuffer.scrollBottom = bottom - 1;\n      this._setCursor(0, 0);\n    }\n    return true;\n  }\n\n  /**\n   * CSI Ps ; Ps ; Ps t - Various window manipulations and reports (xterm)\n   *\n   * Note: Only those listed below are supported. All others are left to integrators and\n   * need special treatment based on the embedding environment.\n   *\n   *    Ps = 1 4                                                          supported\n   *      Report xterm text area size in pixels.\n   *      Result is CSI 4 ; height ; width t\n   *    Ps = 14 ; 2                                                       not implemented\n   *    Ps = 16                                                           supported\n   *      Report xterm character cell size in pixels.\n   *      Result is CSI 6 ; height ; width t\n   *    Ps = 18                                                           supported\n   *      Report the size of the text area in characters.\n   *      Result is CSI 8 ; height ; width t\n   *    Ps = 20                                                           supported\n   *      Report xterm window's icon label.\n   *      Result is OSC L label ST\n   *    Ps = 21                                                           supported\n   *      Report xterm window's title.\n   *      Result is OSC l label ST\n   *    Ps = 22 ; 0  -> Save xterm icon and window title on stack.        supported\n   *    Ps = 22 ; 1  -> Save xterm icon title on stack.                   supported\n   *    Ps = 22 ; 2  -> Save xterm window title on stack.                 supported\n   *    Ps = 23 ; 0  -> Restore xterm icon and window title from stack.   supported\n   *    Ps = 23 ; 1  -> Restore xterm icon title from stack.              supported\n   *    Ps = 23 ; 2  -> Restore xterm window title from stack.            supported\n   *    Ps >= 24                                                          not implemented\n   */\n  public windowOptions(params: IParams): boolean {\n    if (!paramToWindowOption(params.params[0], this._optionsService.rawOptions.windowOptions)) {\n      return true;\n    }\n    const second = (params.length > 1) ? params.params[1] : 0;\n    switch (params.params[0]) {\n      case 14:  // GetWinSizePixels, returns CSI 4 ; height ; width t\n        if (second !== 2) {\n          this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_WIN_SIZE_PIXELS);\n        }\n        break;\n      case 16:  // GetCellSizePixels, returns CSI 6 ; height ; width t\n        this._onRequestWindowsOptionsReport.fire(WindowsOptionsReportType.GET_CELL_SIZE_PIXELS);\n        break;\n      case 18:  // GetWinSizeChars, returns CSI 8 ; height ; width t\n        if (this._bufferService) {\n          this._coreService.triggerDataEvent(`${C0.ESC}[8;${this._bufferService.rows};${this._bufferService.cols}t`);\n        }\n        break;\n      case 22:  // PushTitle\n        if (second === 0 || second === 2) {\n          this._windowTitleStack.push(this._windowTitle);\n          if (this._windowTitleStack.length > STACK_LIMIT) {\n            this._windowTitleStack.shift();\n          }\n        }\n        if (second === 0 || second === 1) {\n          this._iconNameStack.push(this._iconName);\n          if (this._iconNameStack.length > STACK_LIMIT) {\n            this._iconNameStack.shift();\n          }\n        }\n        break;\n      case 23:  // PopTitle\n        if (second === 0 || second === 2) {\n          if (this._windowTitleStack.length) {\n            this.setTitle(this._windowTitleStack.pop()!);\n          }\n        }\n        if (second === 0 || second === 1) {\n          if (this._iconNameStack.length) {\n            this.setIconName(this._iconNameStack.pop()!);\n          }\n        }\n        break;\n    }\n    return true;\n  }\n\n\n  /**\n   * CSI s\n   * ESC 7\n   *   Save cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCOSC   \"Save Cursor\"   \"CSI s\"   \"Save cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  SC   \"Save Cursor\"   \"ESC 7\"   \"Save cursor position, charmap and text attributes.\"\n   */\n  public saveCursor(params?: IParams): boolean {\n    this._activeBuffer.savedX = this._activeBuffer.x;\n    this._activeBuffer.savedY = this._activeBuffer.ybase + this._activeBuffer.y;\n    this._activeBuffer.savedCurAttrData.fg = this._curAttrData.fg;\n    this._activeBuffer.savedCurAttrData.bg = this._curAttrData.bg;\n    this._activeBuffer.savedCharset = this._charsetService.charset;\n    return true;\n  }\n\n\n  /**\n   * CSI u\n   * ESC 8\n   *   Restore cursor (ANSI.SYS).\n   *\n   * @vt: #P[TODO...]  CSI SCORC \"Restore Cursor\"  \"CSI u\"   \"Restore cursor position, charmap and text attributes.\"\n   * @vt: #Y ESC  RC \"Restore Cursor\"  \"ESC 8\"   \"Restore cursor position, charmap and text attributes.\"\n   */\n  public restoreCursor(params?: IParams): boolean {\n    this._activeBuffer.x = this._activeBuffer.savedX || 0;\n    this._activeBuffer.y = Math.max(this._activeBuffer.savedY - this._activeBuffer.ybase, 0);\n    this._curAttrData.fg = this._activeBuffer.savedCurAttrData.fg;\n    this._curAttrData.bg = this._activeBuffer.savedCurAttrData.bg;\n    this._charsetService.charset = (this as any)._savedCharset;\n    if (this._activeBuffer.savedCharset) {\n      this._charsetService.charset = this._activeBuffer.savedCharset;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n\n  /**\n   * OSC 2; <data> ST (set window title)\n   *   Proxy to set window title.\n   *\n   * @vt: #P[Icon name is not exposed.]   OSC    0   \"Set Windows Title and Icon Name\"  \"OSC 0 ; Pt BEL\"  \"Set window title and icon name.\"\n   * Icon name is not supported. For Window Title see below.\n   *\n   * @vt: #Y     OSC    2   \"Set Windows Title\"  \"OSC 2 ; Pt BEL\"  \"Set window title.\"\n   * xterm.js does not manipulate the title directly, instead exposes changes via the event\n   * `Terminal.onTitleChange`.\n   */\n  public setTitle(data: string): boolean {\n    this._windowTitle = data;\n    this._onTitleChange.fire(data);\n    return true;\n  }\n\n  /**\n   * OSC 1; <data> ST\n   * Note: Icon name is not exposed.\n   */\n  public setIconName(data: string): boolean {\n    this._iconName = data;\n    return true;\n  }\n\n  /**\n   * OSC 4; <num> ; <text> ST (set ANSI color <num> to <text>)\n   *\n   * @vt: #Y    OSC    4    \"Set ANSI color\"   \"OSC 4 ; c ; spec BEL\" \"Change color number `c` to the color specified by `spec`.\"\n   * `c` is the color index between 0 and 255. The color format of `spec` is derived from\n   * `XParseColor` (see OSC 10 for supported formats). There may be multipe `c ; spec` pairs present\n   * in the same instruction. If `spec` contains `?` the terminal returns a sequence with the\n   * currently set color.\n   */\n  public setOrReportIndexedColor(data: string): boolean {\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    while (slots.length > 1) {\n      const idx = slots.shift() as string;\n      const spec = slots.shift() as string;\n      if (/^\\d+$/.exec(idx)) {\n        const index = parseInt(idx);\n        if (isValidColorIndex(index)) {\n          if (spec === '?') {\n            event.push({ type: ColorRequestType.REPORT, index });\n          } else {\n            const color = parseColor(spec);\n            if (color) {\n              event.push({ type: ColorRequestType.SET, index, color });\n            }\n          }\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 8 ; <params> ; <uri> ST - create hyperlink\n   * OSC 8 ; ; ST - finish hyperlink\n   *\n   * Test case:\n   *\n   * ```sh\n   * printf '\\e]8;;http://example.com\\e\\\\This is a link\\e]8;;\\e\\\\\\n'\n   * ```\n   *\n   * @vt: #Y    OSC    8    \"Create hyperlink\"   \"OSC 8 ; params ; uri BEL\" \"Create a hyperlink to `uri` using `params`.\"\n   * `uri` is a hyperlink starting with `http://`, `https://`, `ftp://`, `file://` or `mailto://`. `params` is an\n   * optional list of key=value assignments, separated by the : character.\n   * Example: `id=xyz123:foo=bar:baz=quux`.\n   * Currently only the id key is defined. Cells that share the same ID and URI share hover\n   * feedback. Use `OSC 8 ; ; BEL` to finish the current hyperlink.\n   */\n  public setHyperlink(data: string): boolean {\n    const args = data.split(';');\n    if (args.length < 2) {\n      return false;\n    }\n    if (args[1]) {\n      return this._createHyperlink(args[0], args[1]);\n    }\n    if (args[0]) {\n      return false;\n    }\n    return this._finishHyperlink();\n  }\n\n  private _createHyperlink(params: string, uri: string): boolean {\n    // It's legal to open a new hyperlink without explicitly finishing the previous one\n    if (this._getCurrentLinkId()) {\n      this._finishHyperlink();\n    }\n    const parsedParams = params.split(':');\n    let id: string | undefined;\n    const idParamIndex = parsedParams.findIndex(e => e.startsWith('id='));\n    if (idParamIndex !== -1) {\n      id = parsedParams[idParamIndex].slice(3) || undefined;\n    }\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = this._oscLinkService.registerLink({ id, uri });\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  private _finishHyperlink(): boolean {\n    this._curAttrData.extended = this._curAttrData.extended.clone();\n    this._curAttrData.extended.urlId = 0;\n    this._curAttrData.updateExtended();\n    return true;\n  }\n\n  // special colors - OSC 10 | 11 | 12\n  private _specialColors = [SpecialColorIndex.FOREGROUND, SpecialColorIndex.BACKGROUND, SpecialColorIndex.CURSOR];\n\n  /**\n   * Apply colors requests for special colors in OSC 10 | 11 | 12.\n   * Since these commands are stacking from multiple parameters,\n   * we handle them in a loop with an entry offset to `_specialColors`.\n   */\n  private _setOrReportSpecialColor(data: string, offset: number): boolean {\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i, ++offset) {\n      if (offset >= this._specialColors.length) break;\n      if (slots[i] === '?') {\n        this._onColor.fire([{ type: ColorRequestType.REPORT, index: this._specialColors[offset] }]);\n      } else {\n        const color = parseColor(slots[i]);\n        if (color) {\n          this._onColor.fire([{ type: ColorRequestType.SET, index: this._specialColors[offset], color }]);\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * OSC 10 ; <xcolor name>|<?> ST - set or query default foreground color\n   *\n   * @vt: #Y  OSC   10    \"Set or query default foreground color\"   \"OSC 10 ; Pt BEL\"  \"Set or query default foreground color.\"\n   * To set the color, the following color specification formats are supported:\n   * - `rgb:<red>/<green>/<blue>` for  `<red>, <green>, <blue>` in `h | hh | hhh | hhhh`, where\n   *   `h` is a single hexadecimal digit (case insignificant). The different widths scale\n   *   from 4 bit (`h`) to 16 bit (`hhhh`) and get converted to 8 bit (`hh`).\n   * - `#RGB` - 4 bits per channel, expanded to `#R0G0B0`\n   * - `#RRGGBB` - 8 bits per channel\n   * - `#RRRGGGBBB` - 12 bits per channel, truncated to `#RRGGBB`\n   * - `#RRRRGGGGBBBB` - 16 bits per channel, truncated to `#RRGGBB`\n   *\n   * **Note:** X11 named colors are currently unsupported.\n   *\n   * If `Pt` contains `?` instead of a color specification, the terminal\n   * returns a sequence with the current default foreground color\n   * (use that sequence to restore the color after changes).\n   *\n   * **Note:** Other than xterm, xterm.js does not support OSC 12 - 19.\n   * Therefore stacking multiple `Pt` separated by `;` only works for the first two entries.\n   */\n  public setOrReportFgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 0);\n  }\n\n  /**\n   * OSC 11 ; <xcolor name>|<?> ST - set or query default background color\n   *\n   * @vt: #Y  OSC   11    \"Set or query default background color\"   \"OSC 11 ; Pt BEL\"  \"Same as OSC 10, but for default background.\"\n   */\n  public setOrReportBgColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 1);\n  }\n\n  /**\n   * OSC 12 ; <xcolor name>|<?> ST - set or query default cursor color\n   *\n   * @vt: #Y  OSC   12    \"Set or query default cursor color\"   \"OSC 12 ; Pt BEL\"  \"Same as OSC 10, but for default cursor color.\"\n   */\n  public setOrReportCursorColor(data: string): boolean {\n    return this._setOrReportSpecialColor(data, 2);\n  }\n\n  /**\n   * OSC 104 ; <num> ST - restore ANSI color <num>\n   *\n   * @vt: #Y  OSC   104    \"Reset ANSI color\"   \"OSC 104 ; c BEL\" \"Reset color number `c` to themed color.\"\n   * `c` is the color index between 0 and 255. This function restores the default color for `c` as\n   * specified by the loaded theme. Any number of `c` parameters may be given.\n   * If no parameters are given, the entire indexed color table will be reset.\n   */\n  public restoreIndexedColor(data: string): boolean {\n    if (!data) {\n      this._onColor.fire([{ type: ColorRequestType.RESTORE }]);\n      return true;\n    }\n    const event: IColorEvent = [];\n    const slots = data.split(';');\n    for (let i = 0; i < slots.length; ++i) {\n      if (/^\\d+$/.exec(slots[i])) {\n        const index = parseInt(slots[i]);\n        if (isValidColorIndex(index)) {\n          event.push({ type: ColorRequestType.RESTORE, index });\n        }\n      }\n    }\n    if (event.length) {\n      this._onColor.fire(event);\n    }\n    return true;\n  }\n\n  /**\n   * OSC 110 ST - restore default foreground color\n   *\n   * @vt: #Y  OSC   110    \"Restore default foreground color\"   \"OSC 110 BEL\"  \"Restore default foreground to themed color.\"\n   */\n  public restoreFgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.FOREGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 111 ST - restore default background color\n   *\n   * @vt: #Y  OSC   111    \"Restore default background color\"   \"OSC 111 BEL\"  \"Restore default background to themed color.\"\n   */\n  public restoreBgColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.BACKGROUND }]);\n    return true;\n  }\n\n  /**\n   * OSC 112 ST - restore default cursor color\n   *\n   * @vt: #Y  OSC   112    \"Restore default cursor color\"   \"OSC 112 BEL\"  \"Restore default cursor to themed color.\"\n   */\n  public restoreCursorColor(data: string): boolean {\n    this._onColor.fire([{ type: ColorRequestType.RESTORE, index: SpecialColorIndex.CURSOR }]);\n    return true;\n  }\n\n  /**\n   * ESC E\n   * C1.NEL\n   *   DEC mnemonic: NEL (https://vt100.net/docs/vt510-rm/NEL)\n   *   Moves cursor to first position on next line.\n   *\n   * @vt: #Y   C1    NEL   \"Next Line\"   \"\\x85\"    \"Move the cursor to the beginning of the next row.\"\n   * @vt: #Y   ESC   NEL   \"Next Line\"   \"ESC E\"   \"Move the cursor to the beginning of the next row.\"\n   */\n  public nextLine(): boolean {\n    this._activeBuffer.x = 0;\n    this.index();\n    return true;\n  }\n\n  /**\n   * ESC =\n   *   DEC mnemonic: DECKPAM (https://vt100.net/docs/vt510-rm/DECKPAM.html)\n   *   Enables the numeric keypad to send application sequences to the host.\n   */\n  public keypadApplicationMode(): boolean {\n    this._logService.debug('Serial port requested application keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = true;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC >\n   *   DEC mnemonic: DECKPNM (https://vt100.net/docs/vt510-rm/DECKPNM.html)\n   *   Enables the keypad to send numeric characters to the host.\n   */\n  public keypadNumericMode(): boolean {\n    this._logService.debug('Switching back to normal keypad.');\n    this._coreService.decPrivateModes.applicationKeypad = false;\n    this._onRequestSyncScrollBar.fire();\n    return true;\n  }\n\n  /**\n   * ESC % @\n   * ESC % G\n   *   Select default character set. UTF-8 is not supported (string are unicode anyways)\n   *   therefore ESC % G does the same.\n   */\n  public selectDefaultCharset(): boolean {\n    this._charsetService.setgLevel(0);\n    this._charsetService.setgCharset(0, DEFAULT_CHARSET); // US (default)\n    return true;\n  }\n\n  /**\n   * ESC ( C\n   *   Designate G0 Character Set, VT100, ISO 2022.\n   * ESC ) C\n   *   Designate G1 Character Set (ISO 2022, VT100).\n   * ESC * C\n   *   Designate G2 Character Set (ISO 2022, VT220).\n   * ESC + C\n   *   Designate G3 Character Set (ISO 2022, VT220).\n   * ESC - C\n   *   Designate G1 Character Set (VT300).\n   * ESC . C\n   *   Designate G2 Character Set (VT300).\n   * ESC / C\n   *   Designate G3 Character Set (VT300). C = A  -> ISO Latin-1 Supplemental. - Supported?\n   */\n  public selectCharset(collectAndFlag: string): boolean {\n    if (collectAndFlag.length !== 2) {\n      this.selectDefaultCharset();\n      return true;\n    }\n    if (collectAndFlag[0] === '/') {\n      return true;  // TODO: Is this supported?\n    }\n    this._charsetService.setgCharset(GLEVEL[collectAndFlag[0]], CHARSETS[collectAndFlag[1]] || DEFAULT_CHARSET);\n    return true;\n  }\n\n  /**\n   * ESC D\n   * C1.IND\n   *   DEC mnemonic: IND (https://vt100.net/docs/vt510-rm/IND.html)\n   *   Moves the cursor down one line in the same column.\n   *\n   * @vt: #Y   C1    IND   \"Index\"   \"\\x84\"    \"Move the cursor one line down scrolling if needed.\"\n   * @vt: #Y   ESC   IND   \"Index\"   \"ESC D\"   \"Move the cursor one line down scrolling if needed.\"\n   */\n  public index(): boolean {\n    this._restrictCursor();\n    this._activeBuffer.y++;\n    if (this._activeBuffer.y === this._activeBuffer.scrollBottom + 1) {\n      this._activeBuffer.y--;\n      this._bufferService.scroll(this._eraseAttrData());\n    } else if (this._activeBuffer.y >= this._bufferService.rows) {\n      this._activeBuffer.y = this._bufferService.rows - 1;\n    }\n    this._restrictCursor();\n    return true;\n  }\n\n  /**\n   * ESC H\n   * C1.HTS\n   *   DEC mnemonic: HTS (https://vt100.net/docs/vt510-rm/HTS.html)\n   *   Sets a horizontal tab stop at the column position indicated by\n   *   the value of the active column when the terminal receives an HTS.\n   *\n   * @vt: #Y   C1    HTS   \"Horizontal Tabulation Set\" \"\\x88\"    \"Places a tab stop at the current cursor position.\"\n   * @vt: #Y   ESC   HTS   \"Horizontal Tabulation Set\" \"ESC H\"   \"Places a tab stop at the current cursor position.\"\n   */\n  public tabSet(): boolean {\n    this._activeBuffer.tabs[this._activeBuffer.x] = true;\n    return true;\n  }\n\n  /**\n   * ESC M\n   * C1.RI\n   *   DEC mnemonic: HTS\n   *   Moves the cursor up one line in the same column. If the cursor is at the top margin,\n   *   the page scrolls down.\n   *\n   * @vt: #Y ESC  IR \"Reverse Index\" \"ESC M\"  \"Move the cursor one line up scrolling if needed.\"\n   */\n  public reverseIndex(): boolean {\n    this._restrictCursor();\n    if (this._activeBuffer.y === this._activeBuffer.scrollTop) {\n      // possibly move the code below to term.reverseScroll();\n      // test: echo -ne '\\e[1;1H\\e[44m\\eM\\e[0m'\n      // blankLine(true) is xterm/linux behavior\n      const scrollRegionHeight = this._activeBuffer.scrollBottom - this._activeBuffer.scrollTop;\n      this._activeBuffer.lines.shiftElements(this._activeBuffer.ybase + this._activeBuffer.y, scrollRegionHeight, 1);\n      this._activeBuffer.lines.set(this._activeBuffer.ybase + this._activeBuffer.y, this._activeBuffer.getBlankLine(this._eraseAttrData()));\n      this._dirtyRowTracker.markRangeDirty(this._activeBuffer.scrollTop, this._activeBuffer.scrollBottom);\n    } else {\n      this._activeBuffer.y--;\n      this._restrictCursor(); // quickfix to not run out of bounds\n    }\n    return true;\n  }\n\n  /**\n   * ESC c\n   *   DEC mnemonic: RIS (https://vt100.net/docs/vt510-rm/RIS.html)\n   *   Reset to initial state.\n   */\n  public fullReset(): boolean {\n    this._parser.reset();\n    this._onRequestReset.fire();\n    return true;\n  }\n\n  public reset(): void {\n    this._curAttrData = DEFAULT_ATTR_DATA.clone();\n    this._eraseAttrDataInternal = DEFAULT_ATTR_DATA.clone();\n  }\n\n  /**\n   * back_color_erase feature for xterm.\n   */\n  private _eraseAttrData(): IAttributeData {\n    this._eraseAttrDataInternal.bg &= ~(Attributes.CM_MASK | 0xFFFFFF);\n    this._eraseAttrDataInternal.bg |= this._curAttrData.bg & ~0xFC000000;\n    return this._eraseAttrDataInternal;\n  }\n\n  /**\n   * ESC n\n   * ESC o\n   * ESC |\n   * ESC }\n   * ESC ~\n   *   DEC mnemonic: LS (https://vt100.net/docs/vt510-rm/LS.html)\n   *   When you use a locking shift, the character set remains in GL or GR until\n   *   you use another locking shift. (partly supported)\n   */\n  public setgLevel(level: number): boolean {\n    this._charsetService.setgLevel(level);\n    return true;\n  }\n\n  /**\n   * ESC # 8\n   *   DEC mnemonic: DECALN (https://vt100.net/docs/vt510-rm/DECALN.html)\n   *   This control function fills the complete screen area with\n   *   a test pattern (E) used for adjusting screen alignment.\n   *\n   * @vt: #Y   ESC   DECALN   \"Screen Alignment Pattern\"  \"ESC # 8\"  \"Fill viewport with a test pattern (E).\"\n   */\n  public screenAlignmentPattern(): boolean {\n    // prepare cell data\n    const cell = new CellData();\n    cell.content = 1 << Content.WIDTH_SHIFT | 'E'.charCodeAt(0);\n    cell.fg = this._curAttrData.fg;\n    cell.bg = this._curAttrData.bg;\n\n\n    this._setCursor(0, 0);\n    for (let yOffset = 0; yOffset < this._bufferService.rows; ++yOffset) {\n      const row = this._activeBuffer.ybase + this._activeBuffer.y + yOffset;\n      const line = this._activeBuffer.lines.get(row);\n      if (line) {\n        line.fill(cell);\n        line.isWrapped = false;\n      }\n    }\n    this._dirtyRowTracker.markAllDirty();\n    this._setCursor(0, 0);\n    return true;\n  }\n\n\n  /**\n   * DCS $ q Pt ST\n   *   DECRQSS (https://vt100.net/docs/vt510-rm/DECRQSS.html)\n   *   Request Status String (DECRQSS), VT420 and up.\n   *   Response: DECRPSS (https://vt100.net/docs/vt510-rm/DECRPSS.html)\n   *\n   * @vt: #P[Limited support, see below.]  DCS   DECRQSS   \"Request Selection or Setting\"  \"DCS $ q Pt ST\"   \"Request several terminal settings.\"\n   * Response is in the form `ESC P 1 $ r Pt ST` for valid requests, where `Pt` contains the\n   * corresponding CSI string, `ESC P 0 ST` for invalid requests.\n   *\n   * Supported requests and responses:\n   *\n   * | Type                             | Request           | Response (`Pt`)                                       |\n   * | -------------------------------- | ----------------- | ----------------------------------------------------- |\n   * | Graphic Rendition (SGR)          | `DCS $ q m ST`    | always reporting `0m` (currently broken)              |\n   * | Top and Bottom Margins (DECSTBM) | `DCS $ q r ST`    | `Ps ; Ps r`                                           |\n   * | Cursor Style (DECSCUSR)          | `DCS $ q SP q ST` | `Ps SP q`                                             |\n   * | Protection Attribute (DECSCA)    | `DCS $ q \" q ST`  | `Ps \" q` (DECSCA 2 is reported as Ps = 0)             |\n   * | Conformance Level (DECSCL)       | `DCS $ q \" p ST`  | always reporting `61 ; 1 \" p` (DECSCL is unsupported) |\n   *\n   *\n   * TODO:\n   * - fix SGR report\n   * - either check which conformance is better suited or remove the report completely\n   *   --> we are currently a mixture of all up to VT400 but dont follow anyone strictly\n   */\n  public requestStatusString(data: string, params: IParams): boolean {\n    const f = (s: string): boolean => {\n      this._coreService.triggerDataEvent(`${C0.ESC}${s}${C0.ESC}\\\\`);\n      return true;\n    };\n\n    // access helpers\n    const b = this._bufferService.buffer;\n    const opts = this._optionsService.rawOptions;\n    const STYLES: { [key: string]: number } = { 'block': 2, 'underline': 4, 'bar': 6 };\n\n    if (data === '\"q') return f(`P1$r${this._curAttrData.isProtected() ? 1 : 0}\"q`);\n    if (data === '\"p') return f(`P1$r61;1\"p`);\n    if (data === 'r') return f(`P1$r${b.scrollTop + 1};${b.scrollBottom + 1}r`);\n    // FIXME: report real SGR settings instead of 0m\n    if (data === 'm') return f(`P1$r0m`);\n    if (data === ' q') return f(`P1$r${STYLES[opts.cursorStyle] - (opts.cursorBlink ? 1 : 0)} q`);\n    return f(`P0$r`);\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    this._dirtyRowTracker.markRangeDirty(y1, y2);\n  }\n}\n\nexport interface IDirtyRowTracker {\n  readonly start: number;\n  readonly end: number;\n\n  clearRange(): void;\n  markDirty(y: number): void;\n  markRangeDirty(y1: number, y2: number): void;\n  markAllDirty(): void;\n}\n\nclass DirtyRowTracker implements IDirtyRowTracker {\n  public start!: number;\n  public end!: number;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n    this.clearRange();\n  }\n\n  public clearRange(): void {\n    this.start = this._bufferService.buffer.y;\n    this.end = this._bufferService.buffer.y;\n  }\n\n  public markDirty(y: number): void {\n    if (y < this.start) {\n      this.start = y;\n    } else if (y > this.end) {\n      this.end = y;\n    }\n  }\n\n  public markRangeDirty(y1: number, y2: number): void {\n    if (y1 > y2) {\n      $temp = y1;\n      y1 = y2;\n      y2 = $temp;\n    }\n    if (y1 < this.start) {\n      this.start = y1;\n    }\n    if (y2 > this.end) {\n      this.end = y2;\n    }\n  }\n\n  public markAllDirty(): void {\n    this.markRangeDirty(0, this._bufferService.rows - 1);\n  }\n}\n\nfunction isValidColorIndex(value: number): value is ColorIndex {\n  return 0 <= value && value < 256;\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\n\n/**\n * A base class that can be extended to provide convenience methods for managing the lifecycle of an\n * object and its components.\n */\nexport abstract class Disposable implements IDisposable {\n  protected _disposables: IDisposable[] = [];\n  protected _isDisposed: boolean = false;\n\n  /**\n   * Disposes the object, triggering the `dispose` method on all registered IDisposables.\n   */\n  public dispose(): void {\n    this._isDisposed = true;\n    for (const d of this._disposables) {\n      d.dispose();\n    }\n    this._disposables.length = 0;\n  }\n\n  /**\n   * Registers a disposable object.\n   * @param d The disposable to register.\n   * @returns The disposable.\n   */\n  public register<T extends IDisposable>(d: T): T {\n    this._disposables.push(d);\n    return d;\n  }\n\n  /**\n   * Unregisters a disposable object if it has been registered, if not do\n   * nothing.\n   * @param d The disposable to unregister.\n   */\n  public unregister<T extends IDisposable>(d: T): void {\n    const index = this._disposables.indexOf(d);\n    if (index !== -1) {\n      this._disposables.splice(index, 1);\n    }\n  }\n}\n\nexport class MutableDisposable<T extends IDisposable> implements IDisposable {\n  private _value?: T;\n  private _isDisposed = false;\n\n  /**\n   * Gets the value if it exists.\n   */\n  public get value(): T | undefined {\n    return this._isDisposed ? undefined : this._value;\n  }\n\n  /**\n   * Sets the value, disposing of the old value if it exists.\n   */\n  public set value(value: T | undefined) {\n    if (this._isDisposed || value === this._value) {\n      return;\n    }\n    this._value?.dispose();\n    this._value = value;\n  }\n\n  /**\n   * Resets the stored value and disposes of the previously stored value.\n   */\n  public clear(): void {\n    this.value = undefined;\n  }\n\n  public dispose(): void {\n    this._isDisposed = true;\n    this._value?.dispose();\n    this._value = undefined;\n  }\n}\n\n/**\n * Wrap a function in a disposable.\n */\nexport function toDisposable(f: () => void): IDisposable {\n  return { dispose: f };\n}\n\n/**\n * Dispose of all disposables in an array and set its length to 0.\n */\nexport function disposeArray(disposables: IDisposable[]): void {\n  for (const d of disposables) {\n    d.dispose();\n  }\n  disposables.length = 0;\n}\n\n/**\n * Creates a disposable that will dispose of an array of disposables when disposed.\n */\nexport function getDisposeArrayDisposable(array: IDisposable[]): IDisposable {\n  return { dispose: () => disposeArray(array) };\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport class TwoKeyMap<TFirst extends string | number, TSecond extends string | number, TValue> {\n  private _data: { [bg: string | number]: { [fg: string | number]: TValue | undefined } | undefined } = {};\n\n  public set(first: TFirst, second: TSecond, value: TValue): void {\n    if (!this._data[first]) {\n      this._data[first] = {};\n    }\n    this._data[first as string | number]![second] = value;\n  }\n\n  public get(first: TFirst, second: TSecond): TValue | undefined {\n    return this._data[first as string | number] ? this._data[first as string | number]![second] : undefined;\n  }\n\n  public clear(): void {\n    this._data = {};\n  }\n}\n\nexport class FourKeyMap<TFirst extends string | number, TSecond extends string | number, TThird extends string | number, TFourth extends string | number, TValue> {\n  private _data: TwoKeyMap<TFirst, TSecond, TwoKeyMap<TThird, TFourth, TValue>> = new TwoKeyMap();\n\n  public set(first: TFirst, second: TSecond, third: TThird, fourth: TFourth, value: TValue): void {\n    if (!this._data.get(first, second)) {\n      this._data.set(first, second, new TwoKeyMap());\n    }\n    this._data.get(first, second)!.set(third, fourth, value);\n  }\n\n  public get(first: TFirst, second: TSecond, third: TThird, fourth: TFourth): TValue | undefined {\n    return this._data.get(first, second)?.get(third, fourth);\n  }\n\n  public clear(): void {\n    this._data.clear();\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\ninterface INavigator {\n  userAgent: string;\n  language: string;\n  platform: string;\n}\n\n// We're declaring a navigator global here as we expect it in all runtimes (node and browser), but\n// we want this module to live in common.\ndeclare const navigator: INavigator;\n\nexport const isNode = (typeof navigator === 'undefined') ? true : false;\nconst userAgent = (isNode) ? 'node' : navigator.userAgent;\nconst platform = (isNode) ? 'node' : navigator.platform;\n\nexport const isFirefox = userAgent.includes('Firefox');\nexport const isLegacyEdge = userAgent.includes('Edge');\nexport const isSafari = /^((?!chrome|android).)*safari/i.test(userAgent);\nexport function getSafariVersion(): number {\n  if (!isSafari) {\n    return 0;\n  }\n  const majorVersion = userAgent.match(/Version\\/(\\d+)/);\n  if (majorVersion === null || majorVersion.length < 2) {\n    return 0;\n  }\n  return parseInt(majorVersion[1]);\n}\n\n// Find the users platform. We use this to interpret the meta key\n// and ISO third level shifts.\n// http://stackoverflow.com/q/19877924/577598\nexport const isMac = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'].includes(platform);\nexport const isIpad = platform === 'iPad';\nexport const isIphone = platform === 'iPhone';\nexport const isWindows = ['Windows', 'Win16', 'Win32', 'WinCE'].includes(platform);\nexport const isLinux = platform.indexOf('Linux') >= 0;\n// Note that when this is true, isLinux will also be true.\nexport const isChromeOS = /\\bCrOS\\b/.test(userAgent);\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n// Work variables to avoid garbage collection.\nlet i = 0;\n\n/**\n * A generic list that is maintained in sorted order and allows values with duplicate keys. This\n * list is based on binary search and as such locating a key will take O(log n) amortized, this\n * includes the by key iterator.\n */\nexport class SortedList<T> {\n  private readonly _array: T[] = [];\n\n  constructor(\n    private readonly _getKey: (value: T) => number\n  ) {\n  }\n\n  public clear(): void {\n    this._array.length = 0;\n  }\n\n  public insert(value: T): void {\n    if (this._array.length === 0) {\n      this._array.push(value);\n      return;\n    }\n    i = this._search(this._getKey(value));\n    this._array.splice(i, 0, value);\n  }\n\n  public delete(value: T): boolean {\n    if (this._array.length === 0) {\n      return false;\n    }\n    const key = this._getKey(value);\n    if (key === undefined) {\n      return false;\n    }\n    i = this._search(key);\n    if (i === -1) {\n      return false;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return false;\n    }\n    do {\n      if (this._array[i] === value) {\n        this._array.splice(i, 1);\n        return true;\n      }\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n    return false;\n  }\n\n  public *getKeyIterator(key: number): IterableIterator<T> {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      yield this._array[i];\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public forEachByKey(key: number, callback: (value: T) => void): void {\n    if (this._array.length === 0) {\n      return;\n    }\n    i = this._search(key);\n    if (i < 0 || i >= this._array.length) {\n      return;\n    }\n    if (this._getKey(this._array[i]) !== key) {\n      return;\n    }\n    do {\n      callback(this._array[i]);\n    } while (++i < this._array.length && this._getKey(this._array[i]) === key);\n  }\n\n  public values(): IterableIterator<T> {\n    // Duplicate the array to avoid issues when _array changes while iterating\n    return [...this._array].values();\n  }\n\n  private _search(key: number): number {\n    let min = 0;\n    let max = this._array.length - 1;\n    while (max >= min) {\n      let mid = (min + max) >> 1;\n      const midKey = this._getKey(this._array[mid]);\n      if (midKey > key) {\n        max = mid - 1;\n      } else if (midKey < key) {\n        min = mid + 1;\n      } else {\n        // key in list, walk to lowest duplicate\n        while (mid > 0 && this._getKey(this._array[mid - 1]) === key) {\n          mid--;\n        }\n        return mid;\n      }\n    }\n    // key not in list\n    // still return closest min (also used as insert position)\n    return min;\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { isNode } from 'common/Platform';\n\ninterface ITaskQueue {\n  /**\n   * Adds a task to the queue which will run in a future idle callback.\n   * To avoid perceivable stalls on the mainthread, tasks with heavy workload\n   * should split their work into smaller pieces and return `true` to get\n   * called again until the work is done (on falsy return value).\n   */\n  enqueue(task: () => boolean | void): void;\n\n  /**\n   * Flushes the queue, running all remaining tasks synchronously.\n   */\n  flush(): void;\n\n  /**\n   * Clears any remaining tasks from the queue, these will not be run.\n   */\n  clear(): void;\n}\n\ninterface ITaskDeadline {\n  timeRemaining(): number;\n}\ntype CallbackWithDeadline = (deadline: ITaskDeadline) => void;\n\nabstract class TaskQueue implements ITaskQueue {\n  private _tasks: (() => boolean | void)[] = [];\n  private _idleCallback?: number;\n  private _i = 0;\n\n  protected abstract _requestCallback(callback: CallbackWithDeadline): number;\n  protected abstract _cancelCallback(identifier: number): void;\n\n  public enqueue(task: () => boolean | void): void {\n    this._tasks.push(task);\n    this._start();\n  }\n\n  public flush(): void {\n    while (this._i < this._tasks.length) {\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n    }\n    this.clear();\n  }\n\n  public clear(): void {\n    if (this._idleCallback) {\n      this._cancelCallback(this._idleCallback);\n      this._idleCallback = undefined;\n    }\n    this._i = 0;\n    this._tasks.length = 0;\n  }\n\n  private _start(): void {\n    if (!this._idleCallback) {\n      this._idleCallback = this._requestCallback(this._process.bind(this));\n    }\n  }\n\n  private _process(deadline: ITaskDeadline): void {\n    this._idleCallback = undefined;\n    let taskDuration = 0;\n    let longestTask = 0;\n    let lastDeadlineRemaining = deadline.timeRemaining();\n    let deadlineRemaining = 0;\n    while (this._i < this._tasks.length) {\n      taskDuration = Date.now();\n      if (!this._tasks[this._i]()) {\n        this._i++;\n      }\n      // other than performance.now, Date.now might not be stable (changes on wall clock changes),\n      // this is not an issue here as a clock change during a short running task is very unlikely\n      // in case it still happened and leads to negative duration, simply assume 1 msec\n      taskDuration = Math.max(1, Date.now() - taskDuration);\n      longestTask = Math.max(taskDuration, longestTask);\n      // Guess the following task will take a similar time to the longest task in this batch, allow\n      // additional room to try avoid exceeding the deadline\n      deadlineRemaining = deadline.timeRemaining();\n      if (longestTask * 1.5 > deadlineRemaining) {\n        // Warn when the time exceeding the deadline is over 20ms, if this happens in practice the\n        // task should be split into sub-tasks to ensure the UI remains responsive.\n        if (lastDeadlineRemaining - taskDuration < -20) {\n          console.warn(`task queue exceeded allotted deadline by ${Math.abs(Math.round(lastDeadlineRemaining - taskDuration))}ms`);\n        }\n        this._start();\n        return;\n      }\n      lastDeadlineRemaining = deadlineRemaining;\n    }\n    this.clear();\n  }\n}\n\n/**\n * A queue of that runs tasks over several tasks via setTimeout, trying to maintain above 60 frames\n * per second. The tasks will run in the order they are enqueued, but they will run some time later,\n * and care should be taken to ensure they're non-urgent and will not introduce race conditions.\n */\nexport class PriorityTaskQueue extends TaskQueue {\n  protected _requestCallback(callback: CallbackWithDeadline): number {\n    return setTimeout(() => callback(this._createDeadline(16)));\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    clearTimeout(identifier);\n  }\n\n  private _createDeadline(duration: number): ITaskDeadline {\n    const end = Date.now() + duration;\n    return {\n      timeRemaining: () => Math.max(0, end - Date.now())\n    };\n  }\n}\n\nclass IdleTaskQueueInternal extends TaskQueue {\n  protected _requestCallback(callback: IdleRequestCallback): number {\n    return requestIdleCallback(callback);\n  }\n\n  protected _cancelCallback(identifier: number): void {\n    cancelIdleCallback(identifier);\n  }\n}\n\n/**\n * A queue of that runs tasks over several idle callbacks, trying to respect the idle callback's\n * deadline given by the environment. The tasks will run in the order they are enqueued, but they\n * will run some time later, and care should be taken to ensure they're non-urgent and will not\n * introduce race conditions.\n *\n * This reverts to a {@link PriorityTaskQueue} if the environment does not support idle callbacks.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport const IdleTaskQueue = (!isNode && 'requestIdleCallback' in window) ? IdleTaskQueueInternal : PriorityTaskQueue;\n\n/**\n * An object that tracks a single debounced task that will run on the next idle frame. When called\n * multiple times, only the last set task will run.\n */\nexport class DebouncedIdleTask {\n  private _queue: ITaskQueue;\n\n  constructor() {\n    this._queue = new IdleTaskQueue();\n  }\n\n  public set(task: () => boolean | void): void {\n    this._queue.clear();\n    this._queue.enqueue(task);\n  }\n\n  public flush(): void {\n    this._queue.flush();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CHAR_DATA_CODE_INDEX, NULL_CELL_CODE, WHITESPACE_CELL_CODE } from 'common/buffer/Constants';\nimport { IBufferService } from 'common/services/Services';\n\nexport function updateWindowsModeWrappedState(bufferService: IBufferService): void {\n  // Winpty does not support wraparound mode which means that lines will never\n  // be marked as wrapped. This causes issues for things like copying a line\n  // retaining the wrapped new line characters or if consumers are listening\n  // in on the data stream.\n  //\n  // The workaround for this is to listen to every incoming line feed and mark\n  // the line as wrapped if the last character in the previous line is not a\n  // space. This is certainly not without its problems, but generally on\n  // Windows when text reaches the end of the terminal it's likely going to be\n  // wrapped.\n  const line = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y - 1);\n  const lastChar = line?.get(bufferService.cols - 1);\n\n  const nextLine = bufferService.buffer.lines.get(bufferService.buffer.ybase + bufferService.buffer.y);\n  if (nextLine && lastChar) {\n    nextLine.isWrapped = (lastChar[CHAR_DATA_CODE_INDEX] !== NULL_CELL_CODE && lastChar[CHAR_DATA_CODE_INDEX] !== WHITESPACE_CELL_CODE);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IAttributeData, IColorRGB, IExtendedAttrs } from 'common/Types';\nimport { Attributes, FgFlags, BgFlags, UnderlineStyle, ExtFlags } from 'common/buffer/Constants';\n\nexport class AttributeData implements IAttributeData {\n  public static toColorRGB(value: number): IColorRGB {\n    return [\n      value >>> Attributes.RED_SHIFT & 255,\n      value >>> Attributes.GREEN_SHIFT & 255,\n      value & 255\n    ];\n  }\n\n  public static fromColorRGB(value: IColorRGB): number {\n    return (value[0] & 255) << Attributes.RED_SHIFT | (value[1] & 255) << Attributes.GREEN_SHIFT | value[2] & 255;\n  }\n\n  public clone(): IAttributeData {\n    const newObj = new AttributeData();\n    newObj.fg = this.fg;\n    newObj.bg = this.bg;\n    newObj.extended = this.extended.clone();\n    return newObj;\n  }\n\n  // data\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n\n  // flags\n  public isInverse(): number       { return this.fg & FgFlags.INVERSE; }\n  public isBold(): number          { return this.fg & FgFlags.BOLD; }\n  public isUnderline(): number     {\n    if (this.hasExtendedAttrs() && this.extended.underlineStyle !== UnderlineStyle.NONE) {\n      return 1;\n    }\n    return this.fg & FgFlags.UNDERLINE;\n  }\n  public isBlink(): number         { return this.fg & FgFlags.BLINK; }\n  public isInvisible(): number     { return this.fg & FgFlags.INVISIBLE; }\n  public isItalic(): number        { return this.bg & BgFlags.ITALIC; }\n  public isDim(): number           { return this.bg & BgFlags.DIM; }\n  public isStrikethrough(): number { return this.fg & FgFlags.STRIKETHROUGH; }\n  public isProtected(): number     { return this.bg & BgFlags.PROTECTED; }\n  public isOverline(): number      { return this.bg & BgFlags.OVERLINE; }\n\n  // color modes\n  public getFgColorMode(): number { return this.fg & Attributes.CM_MASK; }\n  public getBgColorMode(): number { return this.bg & Attributes.CM_MASK; }\n  public isFgRGB(): boolean       { return (this.fg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isBgRGB(): boolean       { return (this.bg & Attributes.CM_MASK) === Attributes.CM_RGB; }\n  public isFgPalette(): boolean   { return (this.fg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.fg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isBgPalette(): boolean   { return (this.bg & Attributes.CM_MASK) === Attributes.CM_P16 || (this.bg & Attributes.CM_MASK) === Attributes.CM_P256; }\n  public isFgDefault(): boolean   { return (this.fg & Attributes.CM_MASK) === 0; }\n  public isBgDefault(): boolean   { return (this.bg & Attributes.CM_MASK) === 0; }\n  public isAttributeDefault(): boolean { return this.fg === 0 && this.bg === 0; }\n\n  // colors\n  public getFgColor(): number {\n    switch (this.fg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.fg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.fg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n  public getBgColor(): number {\n    switch (this.bg & Attributes.CM_MASK) {\n      case Attributes.CM_P16:\n      case Attributes.CM_P256:  return this.bg & Attributes.PCOLOR_MASK;\n      case Attributes.CM_RGB:   return this.bg & Attributes.RGB_MASK;\n      default:                  return -1;  // CM_DEFAULT defaults to -1\n    }\n  }\n\n  // extended attrs\n  public hasExtendedAttrs(): number {\n    return this.bg & BgFlags.HAS_EXTENDED;\n  }\n  public updateExtended(): void {\n    if (this.extended.isEmpty()) {\n      this.bg &= ~BgFlags.HAS_EXTENDED;\n    } else {\n      this.bg |= BgFlags.HAS_EXTENDED;\n    }\n  }\n  public getUnderlineColor(): number {\n    if ((this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor) {\n      switch (this.extended.underlineColor & Attributes.CM_MASK) {\n        case Attributes.CM_P16:\n        case Attributes.CM_P256:  return this.extended.underlineColor & Attributes.PCOLOR_MASK;\n        case Attributes.CM_RGB:   return this.extended.underlineColor & Attributes.RGB_MASK;\n        default:                  return this.getFgColor();\n      }\n    }\n    return this.getFgColor();\n  }\n  public getUnderlineColorMode(): number {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? this.extended.underlineColor & Attributes.CM_MASK\n      : this.getFgColorMode();\n  }\n  public isUnderlineColorRGB(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_RGB\n      : this.isFgRGB();\n  }\n  public isUnderlineColorPalette(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P16\n          || (this.extended.underlineColor & Attributes.CM_MASK) === Attributes.CM_P256\n      : this.isFgPalette();\n  }\n  public isUnderlineColorDefault(): boolean {\n    return (this.bg & BgFlags.HAS_EXTENDED) && ~this.extended.underlineColor\n      ? (this.extended.underlineColor & Attributes.CM_MASK) === 0\n      : this.isFgDefault();\n  }\n  public getUnderlineStyle(): UnderlineStyle {\n    return this.fg & FgFlags.UNDERLINE\n      ? (this.bg & BgFlags.HAS_EXTENDED ? this.extended.underlineStyle : UnderlineStyle.SINGLE)\n      : UnderlineStyle.NONE;\n  }\n}\n\n\n/**\n * Extended attributes for a cell.\n * Holds information about different underline styles and color.\n */\nexport class ExtendedAttrs implements IExtendedAttrs {\n  private _ext: number = 0;\n  public get ext(): number {\n    if (this._urlId) {\n      return (\n        (this._ext & ~ExtFlags.UNDERLINE_STYLE) |\n        (this.underlineStyle << 26)\n      );\n    }\n    return this._ext;\n  }\n  public set ext(value: number) { this._ext = value; }\n\n  public get underlineStyle(): UnderlineStyle {\n    // Always return the URL style if it has one\n    if (this._urlId) {\n      return UnderlineStyle.DASHED;\n    }\n    return (this._ext & ExtFlags.UNDERLINE_STYLE) >> 26;\n  }\n  public set underlineStyle(value: UnderlineStyle) {\n    this._ext &= ~ExtFlags.UNDERLINE_STYLE;\n    this._ext |= (value << 26) & ExtFlags.UNDERLINE_STYLE;\n  }\n\n  public get underlineColor(): number {\n    return this._ext & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n  public set underlineColor(value: number) {\n    this._ext &= ~(Attributes.CM_MASK | Attributes.RGB_MASK);\n    this._ext |= value & (Attributes.CM_MASK | Attributes.RGB_MASK);\n  }\n\n  private _urlId: number = 0;\n  public get urlId(): number {\n    return this._urlId;\n  }\n  public set urlId(value: number) {\n    this._urlId = value;\n  }\n\n  constructor(\n    ext: number = 0,\n    urlId: number = 0\n  ) {\n    this._ext = ext;\n    this._urlId = urlId;\n  }\n\n  public clone(): IExtendedAttrs {\n    return new ExtendedAttrs(this._ext, this._urlId);\n  }\n\n  /**\n   * Convenient method to indicate whether the object holds no additional information,\n   * that needs to be persistant in the buffer.\n   */\n  public isEmpty(): boolean {\n    return this.underlineStyle === UnderlineStyle.NONE && this._urlId === 0;\n  }\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CircularList, IInsertEvent } from 'common/CircularList';\nimport { IdleTaskQueue } from 'common/TaskQueue';\nimport { IAttributeData, IBufferLine, ICellData, ICharset } from 'common/Types';\nimport { ExtendedAttrs } from 'common/buffer/AttributeData';\nimport { BufferLine, DEFAULT_ATTR_DATA } from 'common/buffer/BufferLine';\nimport { getWrappedLineTrimmedLength, reflowLargerApplyNewLayout, reflowLargerCreateNewLayout, reflowLargerGetLinesToRemove, reflowSmallerGetNewLineLengths } from 'common/buffer/BufferReflow';\nimport { CellData } from 'common/buffer/CellData';\nimport { NULL_CELL_CHAR, NULL_CELL_CODE, NULL_CELL_WIDTH, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_CODE, WHITESPACE_CELL_WIDTH } from 'common/buffer/Constants';\nimport { Marker } from 'common/buffer/Marker';\nimport { IBuffer } from 'common/buffer/Types';\nimport { DEFAULT_CHARSET } from 'common/data/Charsets';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nexport const MAX_BUFFER_SIZE = 4294967295; // 2^32 - 1\n\n/**\n * This class represents a terminal buffer (an internal state of the terminal), where the\n * following information is stored (in high-level):\n *   - text content of this particular buffer\n *   - cursor position\n *   - scroll position\n */\nexport class Buffer implements IBuffer {\n  public lines: CircularList<IBufferLine>;\n  public ydisp: number = 0;\n  public ybase: number = 0;\n  public y: number = 0;\n  public x: number = 0;\n  public scrollBottom: number;\n  public scrollTop: number;\n  public tabs: { [column: number]: boolean | undefined } = {};\n  public savedY: number = 0;\n  public savedX: number = 0;\n  public savedCurAttrData = DEFAULT_ATTR_DATA.clone();\n  public savedCharset: ICharset | undefined = DEFAULT_CHARSET;\n  public markers: Marker[] = [];\n  private _nullCell: ICellData = CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n  private _whitespaceCell: ICellData = CellData.fromCharData([0, WHITESPACE_CELL_CHAR, WHITESPACE_CELL_WIDTH, WHITESPACE_CELL_CODE]);\n  private _cols: number;\n  private _rows: number;\n  private _isClearing: boolean = false;\n\n  constructor(\n    private _hasScrollback: boolean,\n    private _optionsService: IOptionsService,\n    private _bufferService: IBufferService\n  ) {\n    this._cols = this._bufferService.cols;\n    this._rows = this._bufferService.rows;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  public getNullCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._nullCell.fg = attr.fg;\n      this._nullCell.bg = attr.bg;\n      this._nullCell.extended = attr.extended;\n    } else {\n      this._nullCell.fg = 0;\n      this._nullCell.bg = 0;\n      this._nullCell.extended = new ExtendedAttrs();\n    }\n    return this._nullCell;\n  }\n\n  public getWhitespaceCell(attr?: IAttributeData): ICellData {\n    if (attr) {\n      this._whitespaceCell.fg = attr.fg;\n      this._whitespaceCell.bg = attr.bg;\n      this._whitespaceCell.extended = attr.extended;\n    } else {\n      this._whitespaceCell.fg = 0;\n      this._whitespaceCell.bg = 0;\n      this._whitespaceCell.extended = new ExtendedAttrs();\n    }\n    return this._whitespaceCell;\n  }\n\n  public getBlankLine(attr: IAttributeData, isWrapped?: boolean): IBufferLine {\n    return new BufferLine(this._bufferService.cols, this.getNullCell(attr), isWrapped);\n  }\n\n  public get hasScrollback(): boolean {\n    return this._hasScrollback && this.lines.maxLength > this._rows;\n  }\n\n  public get isCursorInViewport(): boolean {\n    const absoluteY = this.ybase + this.y;\n    const relativeY = absoluteY - this.ydisp;\n    return (relativeY >= 0 && relativeY < this._rows);\n  }\n\n  /**\n   * Gets the correct buffer length based on the rows provided, the terminal's\n   * scrollback and whether this buffer is flagged to have scrollback or not.\n   * @param rows The terminal rows to use in the calculation.\n   */\n  private _getCorrectBufferLength(rows: number): number {\n    if (!this._hasScrollback) {\n      return rows;\n    }\n\n    const correctBufferLength = rows + this._optionsService.rawOptions.scrollback;\n\n    return correctBufferLength > MAX_BUFFER_SIZE ? MAX_BUFFER_SIZE : correctBufferLength;\n  }\n\n  /**\n   * Fills the buffer's viewport with blank lines.\n   */\n  public fillViewportRows(fillAttr?: IAttributeData): void {\n    if (this.lines.length === 0) {\n      if (fillAttr === undefined) {\n        fillAttr = DEFAULT_ATTR_DATA;\n      }\n      let i = this._rows;\n      while (i--) {\n        this.lines.push(this.getBlankLine(fillAttr));\n      }\n    }\n  }\n\n  /**\n   * Clears the buffer to it's initial state, discarding all previous data.\n   */\n  public clear(): void {\n    this.ydisp = 0;\n    this.ybase = 0;\n    this.y = 0;\n    this.x = 0;\n    this.lines = new CircularList<IBufferLine>(this._getCorrectBufferLength(this._rows));\n    this.scrollTop = 0;\n    this.scrollBottom = this._rows - 1;\n    this.setupTabStops();\n  }\n\n  /**\n   * Resizes the buffer, adjusting its data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    // store reference to null cell with default attrs\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n\n    // count bufferlines with overly big memory to be cleaned afterwards\n    let dirtyMemoryLines = 0;\n\n    // Increase max length if needed before adjustments to allow space to fill\n    // as required.\n    const newMaxLength = this._getCorrectBufferLength(newRows);\n    if (newMaxLength > this.lines.maxLength) {\n      this.lines.maxLength = newMaxLength;\n    }\n\n    // The following adjustments should only happen if the buffer has been\n    // initialized/filled.\n    if (this.lines.length > 0) {\n      // Deal with columns increasing (reducing needs to happen after reflow)\n      if (this._cols < newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n\n      // Resize rows in both directions as needed\n      let addToY = 0;\n      if (this._rows < newRows) {\n        for (let y = this._rows; y < newRows; y++) {\n          if (this.lines.length < newRows + this.ybase) {\n            if (this._optionsService.rawOptions.windowsMode || this._optionsService.rawOptions.windowsPty.backend !== undefined || this._optionsService.rawOptions.windowsPty.buildNumber !== undefined) {\n              // Just add the new missing rows on Windows as conpty reprints the screen with it's\n              // view of the world. Once a line enters scrollback for conpty it remains there\n              this.lines.push(new BufferLine(newCols, nullCell));\n            } else {\n              if (this.ybase > 0 && this.lines.length <= this.ybase + this.y + addToY + 1) {\n                // There is room above the buffer and there are no empty elements below the line,\n                // scroll up\n                this.ybase--;\n                addToY++;\n                if (this.ydisp > 0) {\n                  // Viewport is at the top of the buffer, must increase downwards\n                  this.ydisp--;\n                }\n              } else {\n                // Add a blank line if there is no buffer left at the top to scroll to, or if there\n                // are blank lines after the cursor\n                this.lines.push(new BufferLine(newCols, nullCell));\n              }\n            }\n          }\n        }\n      } else { // (this._rows >= newRows)\n        for (let y = this._rows; y > newRows; y--) {\n          if (this.lines.length > newRows + this.ybase) {\n            if (this.lines.length > this.ybase + this.y + 1) {\n              // The line is a blank line below the cursor, remove it\n              this.lines.pop();\n            } else {\n              // The line is the cursor, scroll down\n              this.ybase++;\n              this.ydisp++;\n            }\n          }\n        }\n      }\n\n      // Reduce max length if needed after adjustments, this is done after as it\n      // would otherwise cut data from the bottom of the buffer.\n      if (newMaxLength < this.lines.maxLength) {\n        // Trim from the top of the buffer and adjust ybase and ydisp.\n        const amountToTrim = this.lines.length - newMaxLength;\n        if (amountToTrim > 0) {\n          this.lines.trimStart(amountToTrim);\n          this.ybase = Math.max(this.ybase - amountToTrim, 0);\n          this.ydisp = Math.max(this.ydisp - amountToTrim, 0);\n          this.savedY = Math.max(this.savedY - amountToTrim, 0);\n        }\n        this.lines.maxLength = newMaxLength;\n      }\n\n      // Make sure that the cursor stays on screen\n      this.x = Math.min(this.x, newCols - 1);\n      this.y = Math.min(this.y, newRows - 1);\n      if (addToY) {\n        this.y += addToY;\n      }\n      this.savedX = Math.min(this.savedX, newCols - 1);\n\n      this.scrollTop = 0;\n    }\n\n    this.scrollBottom = newRows - 1;\n\n    if (this._isReflowEnabled) {\n      this._reflow(newCols, newRows);\n\n      // Trim the end of the line off if cols shrunk\n      if (this._cols > newCols) {\n        for (let i = 0; i < this.lines.length; i++) {\n          // +boolean for fast 0 or 1 conversion\n          dirtyMemoryLines += +this.lines.get(i)!.resize(newCols, nullCell);\n        }\n      }\n    }\n\n    this._cols = newCols;\n    this._rows = newRows;\n\n    this._memoryCleanupQueue.clear();\n    // schedule memory cleanup only, if more than 10% of the lines are affected\n    if (dirtyMemoryLines > 0.1 * this.lines.length) {\n      this._memoryCleanupPosition = 0;\n      this._memoryCleanupQueue.enqueue(() => this._batchedMemoryCleanup());\n    }\n  }\n\n  private _memoryCleanupQueue = new IdleTaskQueue();\n  private _memoryCleanupPosition = 0;\n\n  private _batchedMemoryCleanup(): boolean {\n    let normalRun = true;\n    if (this._memoryCleanupPosition >= this.lines.length) {\n      // cleanup made it once through all lines, thus rescan in loop below to also catch shifted\n      // lines, which should finish rather quick if there are no more cleanups pending\n      this._memoryCleanupPosition = 0;\n      normalRun = false;\n    }\n    let counted = 0;\n    while (this._memoryCleanupPosition < this.lines.length) {\n      counted += this.lines.get(this._memoryCleanupPosition++)!.cleanupMemory();\n      // cleanup max 100 lines per batch\n      if (counted > 100) {\n        return true;\n      }\n    }\n    // normal runs always need another rescan afterwards\n    // if we made it here with normalRun=false, we are in a final run\n    // and can end the cleanup task for sure\n    return normalRun;\n  }\n\n  private get _isReflowEnabled(): boolean {\n    const windowsPty = this._optionsService.rawOptions.windowsPty;\n    if (windowsPty && windowsPty.buildNumber) {\n      return this._hasScrollback && windowsPty.backend === 'conpty' && windowsPty.buildNumber >= 21376;\n    }\n    return this._hasScrollback && !this._optionsService.rawOptions.windowsMode;\n  }\n\n  private _reflow(newCols: number, newRows: number): void {\n    if (this._cols === newCols) {\n      return;\n    }\n\n    // Iterate through rows, ignore the last one as it cannot be wrapped\n    if (newCols > this._cols) {\n      this._reflowLarger(newCols, newRows);\n    } else {\n      this._reflowSmaller(newCols, newRows);\n    }\n  }\n\n  private _reflowLarger(newCols: number, newRows: number): void {\n    const toRemove: number[] = reflowLargerGetLinesToRemove(this.lines, this._cols, newCols, this.ybase + this.y, this.getNullCell(DEFAULT_ATTR_DATA));\n    if (toRemove.length > 0) {\n      const newLayoutResult = reflowLargerCreateNewLayout(this.lines, toRemove);\n      reflowLargerApplyNewLayout(this.lines, newLayoutResult.layout);\n      this._reflowLargerAdjustViewport(newCols, newRows, newLayoutResult.countRemoved);\n    }\n  }\n\n  private _reflowLargerAdjustViewport(newCols: number, newRows: number, countRemoved: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Adjust viewport based on number of items removed\n    let viewportAdjustments = countRemoved;\n    while (viewportAdjustments-- > 0) {\n      if (this.ybase === 0) {\n        if (this.y > 0) {\n          this.y--;\n        }\n        if (this.lines.length < newRows) {\n          // Add an extra row at the bottom of the viewport\n          this.lines.push(new BufferLine(newCols, nullCell));\n        }\n      } else {\n        if (this.ydisp === this.ybase) {\n          this.ydisp--;\n        }\n        this.ybase--;\n      }\n    }\n    this.savedY = Math.max(this.savedY - countRemoved, 0);\n  }\n\n  private _reflowSmaller(newCols: number, newRows: number): void {\n    const nullCell = this.getNullCell(DEFAULT_ATTR_DATA);\n    // Gather all BufferLines that need to be inserted into the Buffer here so that they can be\n    // batched up and only committed once\n    const toInsert = [];\n    let countToInsert = 0;\n    // Go backwards as many lines may be trimmed and this will avoid considering them\n    for (let y = this.lines.length - 1; y >= 0; y--) {\n      // Check whether this line is a problem\n      let nextLine = this.lines.get(y) as BufferLine;\n      if (!nextLine || !nextLine.isWrapped && nextLine.getTrimmedLength() <= newCols) {\n        continue;\n      }\n\n      // Gather wrapped lines and adjust y to be the starting line\n      const wrappedLines: BufferLine[] = [nextLine];\n      while (nextLine.isWrapped && y > 0) {\n        nextLine = this.lines.get(--y) as BufferLine;\n        wrappedLines.unshift(nextLine);\n      }\n\n      // If these lines contain the cursor don't touch them, the program will handle fixing up\n      // wrapped lines with the cursor\n      const absoluteY = this.ybase + this.y;\n      if (absoluteY >= y && absoluteY < y + wrappedLines.length) {\n        continue;\n      }\n\n      const lastLineLength = wrappedLines[wrappedLines.length - 1].getTrimmedLength();\n      const destLineLengths = reflowSmallerGetNewLineLengths(wrappedLines, this._cols, newCols);\n      const linesToAdd = destLineLengths.length - wrappedLines.length;\n      let trimmedLines: number;\n      if (this.ybase === 0 && this.y !== this.lines.length - 1) {\n        // If the top section of the buffer is not yet filled\n        trimmedLines = Math.max(0, this.y - this.lines.maxLength + linesToAdd);\n      } else {\n        trimmedLines = Math.max(0, this.lines.length - this.lines.maxLength + linesToAdd);\n      }\n\n      // Add the new lines\n      const newLines: BufferLine[] = [];\n      for (let i = 0; i < linesToAdd; i++) {\n        const newLine = this.getBlankLine(DEFAULT_ATTR_DATA, true) as BufferLine;\n        newLines.push(newLine);\n      }\n      if (newLines.length > 0) {\n        toInsert.push({\n          // countToInsert here gets the actual index, taking into account other inserted items.\n          // using this we can iterate through the list forwards\n          start: y + wrappedLines.length + countToInsert,\n          newLines\n        });\n        countToInsert += newLines.length;\n      }\n      wrappedLines.push(...newLines);\n\n      // Copy buffer data to new locations, this needs to happen backwards to do in-place\n      let destLineIndex = destLineLengths.length - 1; // Math.floor(cellsNeeded / newCols);\n      let destCol = destLineLengths[destLineIndex]; // cellsNeeded % newCols;\n      if (destCol === 0) {\n        destLineIndex--;\n        destCol = destLineLengths[destLineIndex];\n      }\n      let srcLineIndex = wrappedLines.length - linesToAdd - 1;\n      let srcCol = lastLineLength;\n      while (srcLineIndex >= 0) {\n        const cellsToCopy = Math.min(srcCol, destCol);\n        if (wrappedLines[destLineIndex] === undefined) {\n          // Sanity check that the line exists, this has been known to fail for an unknown reason\n          // which would stop the reflow from happening if an exception would throw.\n          break;\n        }\n        wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol - cellsToCopy, destCol - cellsToCopy, cellsToCopy, true);\n        destCol -= cellsToCopy;\n        if (destCol === 0) {\n          destLineIndex--;\n          destCol = destLineLengths[destLineIndex];\n        }\n        srcCol -= cellsToCopy;\n        if (srcCol === 0) {\n          srcLineIndex--;\n          const wrappedLinesIndex = Math.max(srcLineIndex, 0);\n          srcCol = getWrappedLineTrimmedLength(wrappedLines, wrappedLinesIndex, this._cols);\n        }\n      }\n\n      // Null out the end of the line ends if a wide character wrapped to the following line\n      for (let i = 0; i < wrappedLines.length; i++) {\n        if (destLineLengths[i] < newCols) {\n          wrappedLines[i].setCell(destLineLengths[i], nullCell);\n        }\n      }\n\n      // Adjust viewport as needed\n      let viewportAdjustments = linesToAdd - trimmedLines;\n      while (viewportAdjustments-- > 0) {\n        if (this.ybase === 0) {\n          if (this.y < newRows - 1) {\n            this.y++;\n            this.lines.pop();\n          } else {\n            this.ybase++;\n            this.ydisp++;\n          }\n        } else {\n          // Ensure ybase does not exceed its maximum value\n          if (this.ybase < Math.min(this.lines.maxLength, this.lines.length + countToInsert) - newRows) {\n            if (this.ybase === this.ydisp) {\n              this.ydisp++;\n            }\n            this.ybase++;\n          }\n        }\n      }\n      this.savedY = Math.min(this.savedY + linesToAdd, this.ybase + newRows - 1);\n    }\n\n    // Rearrange lines in the buffer if there are any insertions, this is done at the end rather\n    // than earlier so that it's a single O(n) pass through the buffer, instead of O(n^2) from many\n    // costly calls to CircularList.splice.\n    if (toInsert.length > 0) {\n      // Record buffer insert events and then play them back backwards so that the indexes are\n      // correct\n      const insertEvents: IInsertEvent[] = [];\n\n      // Record original lines so they don't get overridden when we rearrange the list\n      const originalLines: BufferLine[] = [];\n      for (let i = 0; i < this.lines.length; i++) {\n        originalLines.push(this.lines.get(i) as BufferLine);\n      }\n      const originalLinesLength = this.lines.length;\n\n      let originalLineIndex = originalLinesLength - 1;\n      let nextToInsertIndex = 0;\n      let nextToInsert = toInsert[nextToInsertIndex];\n      this.lines.length = Math.min(this.lines.maxLength, this.lines.length + countToInsert);\n      let countInsertedSoFar = 0;\n      for (let i = Math.min(this.lines.maxLength - 1, originalLinesLength + countToInsert - 1); i >= 0; i--) {\n        if (nextToInsert && nextToInsert.start > originalLineIndex + countInsertedSoFar) {\n          // Insert extra lines here, adjusting i as needed\n          for (let nextI = nextToInsert.newLines.length - 1; nextI >= 0; nextI--) {\n            this.lines.set(i--, nextToInsert.newLines[nextI]);\n          }\n          i++;\n\n          // Create insert events for later\n          insertEvents.push({\n            index: originalLineIndex + 1,\n            amount: nextToInsert.newLines.length\n          });\n\n          countInsertedSoFar += nextToInsert.newLines.length;\n          nextToInsert = toInsert[++nextToInsertIndex];\n        } else {\n          this.lines.set(i, originalLines[originalLineIndex--]);\n        }\n      }\n\n      // Update markers\n      let insertCountEmitted = 0;\n      for (let i = insertEvents.length - 1; i >= 0; i--) {\n        insertEvents[i].index += insertCountEmitted;\n        this.lines.onInsertEmitter.fire(insertEvents[i]);\n        insertCountEmitted += insertEvents[i].amount;\n      }\n      const amountToTrim = Math.max(0, originalLinesLength + countToInsert - this.lines.maxLength);\n      if (amountToTrim > 0) {\n        this.lines.onTrimEmitter.fire(amountToTrim);\n      }\n    }\n  }\n\n  /**\n   * Translates a buffer line to a string, with optional start and end columns.\n   * Wide characters will count as two columns in the resulting string. This\n   * function is useful for getting the actual text underneath the raw selection\n   * position.\n   * @param lineIndex The absolute index of the line being translated.\n   * @param trimRight Whether to trim whitespace to the right.\n   * @param startCol The column to start at.\n   * @param endCol The column to end at.\n   */\n  public translateBufferLineToString(lineIndex: number, trimRight: boolean, startCol: number = 0, endCol?: number): string {\n    const line = this.lines.get(lineIndex);\n    if (!line) {\n      return '';\n    }\n    return line.translateToString(trimRight, startCol, endCol);\n  }\n\n  public getWrappedRangeForLine(y: number): { first: number, last: number } {\n    let first = y;\n    let last = y;\n    // Scan upwards for wrapped lines\n    while (first > 0 && this.lines.get(first)!.isWrapped) {\n      first--;\n    }\n    // Scan downwards for wrapped lines\n    while (last + 1 < this.lines.length && this.lines.get(last + 1)!.isWrapped) {\n      last++;\n    }\n    return { first, last };\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    if (i !== null && i !== undefined) {\n      if (!this.tabs[i]) {\n        i = this.prevStop(i);\n      }\n    } else {\n      this.tabs = {};\n      i = 0;\n    }\n\n    for (; i < this._cols; i += this._optionsService.rawOptions.tabStopWidth) {\n      this.tabs[i] = true;\n    }\n  }\n\n  /**\n   * Move the cursor to the previous tab stop from the given position (default is current).\n   * @param x The position to move the cursor to the previous tab stop.\n   */\n  public prevStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[--x] && x > 0);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Move the cursor one tab stop forward from the given position (default is current).\n   * @param x The position to move the cursor one tab stop forward.\n   */\n  public nextStop(x?: number): number {\n    if (x === null || x === undefined) {\n      x = this.x;\n    }\n    while (!this.tabs[++x] && x < this._cols);\n    return x >= this._cols ? this._cols - 1 : x < 0 ? 0 : x;\n  }\n\n  /**\n   * Clears markers on single line.\n   * @param y The line to clear.\n   */\n  public clearMarkers(y: number): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      if (this.markers[i].line === y) {\n        this.markers[i].dispose();\n        this.markers.splice(i--, 1);\n      }\n    }\n    this._isClearing = false;\n  }\n\n  /**\n   * Clears markers on all lines\n   */\n  public clearAllMarkers(): void {\n    this._isClearing = true;\n    for (let i = 0; i < this.markers.length; i++) {\n      this.markers[i].dispose();\n      this.markers.splice(i--, 1);\n    }\n    this._isClearing = false;\n  }\n\n  public addMarker(y: number): Marker {\n    const marker = new Marker(y);\n    this.markers.push(marker);\n    marker.register(this.lines.onTrim(amount => {\n      marker.line -= amount;\n      // The marker should be disposed when the line is trimmed from the buffer\n      if (marker.line < 0) {\n        marker.dispose();\n      }\n    }));\n    marker.register(this.lines.onInsert(event => {\n      if (marker.line >= event.index) {\n        marker.line += event.amount;\n      }\n    }));\n    marker.register(this.lines.onDelete(event => {\n      // Delete the marker if it's within the range\n      if (marker.line >= event.index && marker.line < event.index + event.amount) {\n        marker.dispose();\n      }\n\n      // Shift the marker if it's after the deleted range\n      if (marker.line > event.index) {\n        marker.line -= event.amount;\n      }\n    }));\n    marker.register(marker.onDispose(() => this._removeMarker(marker)));\n    return marker;\n  }\n\n  private _removeMarker(marker: Marker): void {\n    if (!this._isClearing) {\n      this.markers.splice(this.markers.indexOf(marker), 1);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, IAttributeData, IBufferLine, ICellData, IExtendedAttrs } from 'common/Types';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\nimport { CellData } from 'common/buffer/CellData';\nimport { Attributes, BgFlags, CHAR_DATA_ATTR_INDEX, CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, Content, NULL_CELL_CHAR, NULL_CELL_CODE, NULL_CELL_WIDTH, WHITESPACE_CELL_CHAR } from 'common/buffer/Constants';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\n\n/**\n * buffer memory layout:\n *\n *   |             uint32_t             |        uint32_t         |        uint32_t         |\n *   |             `content`            |          `FG`           |          `BG`           |\n *   | wcwidth(2) comb(1) codepoint(21) | flags(8) R(8) G(8) B(8) | flags(8) R(8) G(8) B(8) |\n */\n\n\n/** typed array slots taken by one cell */\nconst CELL_SIZE = 3;\n\n/**\n * Cell member indices.\n *\n * Direct access:\n *    `content = data[column * CELL_SIZE + Cell.CONTENT];`\n *    `fg = data[column * CELL_SIZE + Cell.FG];`\n *    `bg = data[column * CELL_SIZE + Cell.BG];`\n */\nconst enum Cell {\n  CONTENT = 0,\n  FG = 1, // currently simply holds all known attrs\n  BG = 2  // currently unused\n}\n\nexport const DEFAULT_ATTR_DATA = Object.freeze(new AttributeData());\n\n// Work variables to avoid garbage collection\nlet $startIndex = 0;\n\n/** Factor when to cleanup underlying array buffer after shrinking. */\nconst CLEANUP_THRESHOLD = 2;\n\n/**\n * Typed array based bufferline implementation.\n *\n * There are 2 ways to insert data into the cell buffer:\n * - `setCellFromCodepoint` + `addCodepointToCell`\n *   Use these for data that is already UTF32.\n *   Used during normal input in `InputHandler` for faster buffer access.\n * - `setCell`\n *   This method takes a CellData object and stores the data in the buffer.\n *   Use `CellData.fromCharData` to create the CellData object (e.g. from JS string).\n *\n * To retrieve data from the buffer use either one of the primitive methods\n * (if only one particular value is needed) or `loadCell`. For `loadCell` in a loop\n * memory allocs / GC pressure can be greatly reduced by reusing the CellData object.\n */\nexport class BufferLine implements IBufferLine {\n  protected _data: Uint32Array;\n  protected _combined: {[index: number]: string} = {};\n  protected _extendedAttrs: {[index: number]: IExtendedAttrs | undefined} = {};\n  public length: number;\n\n  constructor(cols: number, fillCellData?: ICellData, public isWrapped: boolean = false) {\n    this._data = new Uint32Array(cols * CELL_SIZE);\n    const cell = fillCellData || CellData.fromCharData([0, NULL_CELL_CHAR, NULL_CELL_WIDTH, NULL_CELL_CODE]);\n    for (let i = 0; i < cols; ++i) {\n      this.setCell(i, cell);\n    }\n    this.length = cols;\n  }\n\n  /**\n   * Get cell data CharData.\n   * @deprecated\n   */\n  public get(index: number): CharData {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    const cp = content & Content.CODEPOINT_MASK;\n    return [\n      this._data[index * CELL_SIZE + Cell.FG],\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index]\n        : (cp) ? stringFromCodePoint(cp) : '',\n      content >> Content.WIDTH_SHIFT,\n      (content & Content.IS_COMBINED_MASK)\n        ? this._combined[index].charCodeAt(this._combined[index].length - 1)\n        : cp\n    ];\n  }\n\n  /**\n   * Set cell data from CharData.\n   * @deprecated\n   */\n  public set(index: number, value: CharData): void {\n    this._data[index * CELL_SIZE + Cell.FG] = value[CHAR_DATA_ATTR_INDEX];\n    if (value[CHAR_DATA_CHAR_INDEX].length > 1) {\n      this._combined[index] = value[1];\n      this._data[index * CELL_SIZE + Cell.CONTENT] = index | Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    } else {\n      this._data[index * CELL_SIZE + Cell.CONTENT] = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n\n  /**\n   * primitive getters\n   * use these when only one value is needed, otherwise use `loadCell`\n   */\n  public getWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT;\n  }\n\n  /** Test whether content has width. */\n  public hasWidth(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.WIDTH_MASK;\n  }\n\n  /** Get FG cell component. */\n  public getFg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.FG];\n  }\n\n  /** Get BG cell component. */\n  public getBg(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG];\n  }\n\n  /**\n   * Test whether contains any chars.\n   * Basically an empty has no content, but other cells might differ in FG/BG\n   * from real empty cells.\n   */\n  public hasContent(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK;\n  }\n\n  /**\n   * Get codepoint of the cell.\n   * To be in line with `code` in CharData this either returns\n   * a single UTF32 codepoint or the last codepoint of a combined string.\n   */\n  public getCodePoint(index: number): number {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index].charCodeAt(this._combined[index].length - 1);\n    }\n    return content & Content.CODEPOINT_MASK;\n  }\n\n  /** Test whether the cell contains a combined string. */\n  public isCombined(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.CONTENT] & Content.IS_COMBINED_MASK;\n  }\n\n  /** Returns the string content of the cell. */\n  public getString(index: number): string {\n    const content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      return this._combined[index];\n    }\n    if (content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(content & Content.CODEPOINT_MASK);\n    }\n    // return empty string for empty cells\n    return '';\n  }\n\n  /** Get state of protected flag. */\n  public isProtected(index: number): number {\n    return this._data[index * CELL_SIZE + Cell.BG] & BgFlags.PROTECTED;\n  }\n\n  /**\n   * Load data at `index` into `cell`. This is used to access cells in a way that's more friendly\n   * to GC as it significantly reduced the amount of new objects/references needed.\n   */\n  public loadCell(index: number, cell: ICellData): ICellData {\n    $startIndex = index * CELL_SIZE;\n    cell.content = this._data[$startIndex + Cell.CONTENT];\n    cell.fg = this._data[$startIndex + Cell.FG];\n    cell.bg = this._data[$startIndex + Cell.BG];\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      cell.combinedData = this._combined[index];\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      cell.extended = this._extendedAttrs[index]!;\n    }\n    return cell;\n  }\n\n  /**\n   * Set data at `index` to `cell`.\n   */\n  public setCell(index: number, cell: ICellData): void {\n    if (cell.content & Content.IS_COMBINED_MASK) {\n      this._combined[index] = cell.combinedData;\n    }\n    if (cell.bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = cell.extended;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = cell.content;\n    this._data[index * CELL_SIZE + Cell.FG] = cell.fg;\n    this._data[index * CELL_SIZE + Cell.BG] = cell.bg;\n  }\n\n  /**\n   * Set cell data from input handler.\n   * Since the input handler see the incoming chars as UTF32 codepoints,\n   * it gets an optimized access method.\n   */\n  public setCellFromCodePoint(index: number, codePoint: number, width: number, fg: number, bg: number, eAttrs: IExtendedAttrs): void {\n    if (bg & BgFlags.HAS_EXTENDED) {\n      this._extendedAttrs[index] = eAttrs;\n    }\n    this._data[index * CELL_SIZE + Cell.CONTENT] = codePoint | (width << Content.WIDTH_SHIFT);\n    this._data[index * CELL_SIZE + Cell.FG] = fg;\n    this._data[index * CELL_SIZE + Cell.BG] = bg;\n  }\n\n  /**\n   * Add a codepoint to a cell from input handler.\n   * During input stage combining chars with a width of 0 follow and stack\n   * onto a leading char. Since we already set the attrs\n   * by the previous `setDataFromCodePoint` call, we can omit it here.\n   */\n  public addCodepointToCell(index: number, codePoint: number): void {\n    let content = this._data[index * CELL_SIZE + Cell.CONTENT];\n    if (content & Content.IS_COMBINED_MASK) {\n      // we already have a combined string, simply add\n      this._combined[index] += stringFromCodePoint(codePoint);\n    } else {\n      if (content & Content.CODEPOINT_MASK) {\n        // normal case for combining chars:\n        //  - move current leading char + new one into combined string\n        //  - set combined flag\n        this._combined[index] = stringFromCodePoint(content & Content.CODEPOINT_MASK) + stringFromCodePoint(codePoint);\n        content &= ~Content.CODEPOINT_MASK; // set codepoint in buffer to 0\n        content |= Content.IS_COMBINED_MASK;\n      } else {\n        // should not happen - we actually have no data in the cell yet\n        // simply set the data in the cell buffer with a width of 1\n        content = codePoint | (1 << Content.WIDTH_SHIFT);\n      }\n      this._data[index * CELL_SIZE + Cell.CONTENT] = content;\n    }\n  }\n\n  public insertCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n\n    // handle fullwidth at pos: reset cell one to the left if pos is second cell of a wide char\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = this.length - pos - n - 1; i >= 0; --i) {\n        this.setCell(pos + n + i, this.loadCell(pos + i, cell));\n      }\n      for (let i = 0; i < n; ++i) {\n        this.setCell(pos + i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at line end: reset last cell if it is first cell of a wide char\n    if (this.getWidth(this.length - 1) === 2) {\n      this.setCellFromCodePoint(this.length - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public deleteCells(pos: number, n: number, fillCellData: ICellData, eraseAttr?: IAttributeData): void {\n    pos %= this.length;\n    if (n < this.length - pos) {\n      const cell = new CellData();\n      for (let i = 0; i < this.length - pos - n; ++i) {\n        this.setCell(pos + i, this.loadCell(pos + n + i, cell));\n      }\n      for (let i = this.length - n; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      for (let i = pos; i < this.length; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    }\n\n    // handle fullwidth at pos:\n    // - reset pos-1 if wide char\n    // - reset pos if width==0 (previous second cell of a wide char)\n    if (pos && this.getWidth(pos - 1) === 2) {\n      this.setCellFromCodePoint(pos - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    if (this.getWidth(pos) === 0 && !this.hasContent(pos)) {\n      this.setCellFromCodePoint(pos, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n  }\n\n  public replaceCells(start: number, end: number, fillCellData: ICellData, eraseAttr?: IAttributeData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      if (start && this.getWidth(start - 1) === 2 && !this.isProtected(start - 1)) {\n        this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      if (end < this.length && this.getWidth(end - 1) === 2 && !this.isProtected(end)) {\n        this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n      }\n      while (start < end  && start < this.length) {\n        if (!this.isProtected(start)) {\n          this.setCell(start, fillCellData);\n        }\n        start++;\n      }\n      return;\n    }\n\n    // handle fullwidth at start: reset cell one to the left if start is second cell of a wide char\n    if (start && this.getWidth(start - 1) === 2) {\n      this.setCellFromCodePoint(start - 1, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n    // handle fullwidth at last cell + 1: reset to empty cell if it is second part of a wide char\n    if (end < this.length && this.getWidth(end - 1) === 2) {\n      this.setCellFromCodePoint(end, 0, 1, eraseAttr?.fg || 0, eraseAttr?.bg || 0, eraseAttr?.extended || new ExtendedAttrs());\n    }\n\n    while (start < end  && start < this.length) {\n      this.setCell(start++, fillCellData);\n    }\n  }\n\n  /**\n   * Resize BufferLine to `cols` filling excess cells with `fillCellData`.\n   * The underlying array buffer will not change if there is still enough space\n   * to hold the new buffer line data.\n   * Returns a boolean indicating, whether a `cleanupMemory` call would free\n   * excess memory (true after shrinking > CLEANUP_THRESHOLD).\n   */\n  public resize(cols: number, fillCellData: ICellData): boolean {\n    if (cols === this.length) {\n      return this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n    }\n    const uint32Cells = cols * CELL_SIZE;\n    if (cols > this.length) {\n      if (this._data.buffer.byteLength >= uint32Cells * 4) {\n        // optimization: avoid alloc and data copy if buffer has enough room\n        this._data = new Uint32Array(this._data.buffer, 0, uint32Cells);\n      } else {\n        // slow path: new alloc and full data copy\n        const data = new Uint32Array(uint32Cells);\n        data.set(this._data);\n        this._data = data;\n      }\n      for (let i = this.length; i < cols; ++i) {\n        this.setCell(i, fillCellData);\n      }\n    } else {\n      // optimization: just shrink the view on existing buffer\n      this._data = this._data.subarray(0, uint32Cells);\n      // Remove any cut off combined data\n      const keys = Object.keys(this._combined);\n      for (let i = 0; i < keys.length; i++) {\n        const key = parseInt(keys[i], 10);\n        if (key >= cols) {\n          delete this._combined[key];\n        }\n      }\n      // remove any cut off extended attributes\n      const extKeys = Object.keys(this._extendedAttrs);\n      for (let i = 0; i < extKeys.length; i++) {\n        const key = parseInt(extKeys[i], 10);\n        if (key >= cols) {\n          delete this._extendedAttrs[key];\n        }\n      }\n    }\n    this.length = cols;\n    return uint32Cells * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength;\n  }\n\n  /**\n   * Cleanup underlying array buffer.\n   * A cleanup will be triggered if the array buffer exceeds the actual used\n   * memory by a factor of CLEANUP_THRESHOLD.\n   * Returns 0 or 1 indicating whether a cleanup happened.\n   */\n  public cleanupMemory(): number {\n    if (this._data.length * 4 * CLEANUP_THRESHOLD < this._data.buffer.byteLength) {\n      const data = new Uint32Array(this._data.length);\n      data.set(this._data);\n      this._data = data;\n      return 1;\n    }\n    return 0;\n  }\n\n  /** fill a line with fillCharData */\n  public fill(fillCellData: ICellData, respectProtect: boolean = false): void {\n    // full branching on respectProtect==true, hopefully getting fast JIT for standard case\n    if (respectProtect) {\n      for (let i = 0; i < this.length; ++i) {\n        if (!this.isProtected(i)) {\n          this.setCell(i, fillCellData);\n        }\n      }\n      return;\n    }\n    this._combined = {};\n    this._extendedAttrs = {};\n    for (let i = 0; i < this.length; ++i) {\n      this.setCell(i, fillCellData);\n    }\n  }\n\n  /** alter to a full copy of line  */\n  public copyFrom(line: BufferLine): void {\n    if (this.length !== line.length) {\n      this._data = new Uint32Array(line._data);\n    } else {\n      // use high speed copy if lengths are equal\n      this._data.set(line._data);\n    }\n    this.length = line.length;\n    this._combined = {};\n    for (const el in line._combined) {\n      this._combined[el] = line._combined[el];\n    }\n    this._extendedAttrs = {};\n    for (const el in line._extendedAttrs) {\n      this._extendedAttrs[el] = line._extendedAttrs[el];\n    }\n    this.isWrapped = line.isWrapped;\n  }\n\n  /** create a new clone */\n  public clone(): IBufferLine {\n    const newLine = new BufferLine(0);\n    newLine._data = new Uint32Array(this._data);\n    newLine.length = this.length;\n    for (const el in this._combined) {\n      newLine._combined[el] = this._combined[el];\n    }\n    for (const el in this._extendedAttrs) {\n      newLine._extendedAttrs[el] = this._extendedAttrs[el];\n    }\n    newLine.isWrapped = this.isWrapped;\n    return newLine;\n  }\n\n  public getTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public getNoBgTrimmedLength(): number {\n    for (let i = this.length - 1; i >= 0; --i) {\n      if ((this._data[i * CELL_SIZE + Cell.CONTENT] & Content.HAS_CONTENT_MASK) || (this._data[i * CELL_SIZE + Cell.BG] & Attributes.CM_MASK)) {\n        return i + (this._data[i * CELL_SIZE + Cell.CONTENT] >> Content.WIDTH_SHIFT);\n      }\n    }\n    return 0;\n  }\n\n  public copyCellsFrom(src: BufferLine, srcCol: number, destCol: number, length: number, applyInReverse: boolean): void {\n    const srcData = src._data;\n    if (applyInReverse) {\n      for (let cell = length - 1; cell >= 0; cell--) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    } else {\n      for (let cell = 0; cell < length; cell++) {\n        for (let i = 0; i < CELL_SIZE; i++) {\n          this._data[(destCol + cell) * CELL_SIZE + i] = srcData[(srcCol + cell) * CELL_SIZE + i];\n        }\n        if (srcData[(srcCol + cell) * CELL_SIZE + Cell.BG] & BgFlags.HAS_EXTENDED) {\n          this._extendedAttrs[destCol + cell] = src._extendedAttrs[srcCol + cell];\n        }\n      }\n    }\n\n    // Move any combined data over as needed, FIXME: repeat for extended attrs\n    const srcCombinedKeys = Object.keys(src._combined);\n    for (let i = 0; i < srcCombinedKeys.length; i++) {\n      const key = parseInt(srcCombinedKeys[i], 10);\n      if (key >= srcCol) {\n        this._combined[key - srcCol + destCol] = src._combined[key];\n      }\n    }\n  }\n\n  public translateToString(trimRight: boolean = false, startCol: number = 0, endCol: number = this.length): string {\n    if (trimRight) {\n      endCol = Math.min(endCol, this.getTrimmedLength());\n    }\n    let result = '';\n    while (startCol < endCol) {\n      const content = this._data[startCol * CELL_SIZE + Cell.CONTENT];\n      const cp = content & Content.CODEPOINT_MASK;\n      result += (content & Content.IS_COMBINED_MASK) ? this._combined[startCol] : (cp) ? stringFromCodePoint(cp) : WHITESPACE_CELL_CHAR;\n      startCol += (content >> Content.WIDTH_SHIFT) || 1; // always advance by 1\n    }\n    return result;\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBufferRange } from 'xterm';\n\nexport function getRangeLength(range: IBufferRange, bufferCols: number): number {\n  if (range.start.y > range.end.y) {\n    throw new Error(`Buffer range end (${range.end.x}, ${range.end.y}) cannot be before start (${range.start.x}, ${range.start.y})`);\n  }\n  return bufferCols * (range.end.y - range.start.y) + (range.end.x - range.start.x + 1);\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { BufferLine } from 'common/buffer/BufferLine';\nimport { CircularList } from 'common/CircularList';\nimport { IBufferLine, ICellData } from 'common/Types';\n\nexport interface INewLayoutResult {\n  layout: number[];\n  countRemoved: number;\n}\n\n/**\n * Evaluates and returns indexes to be removed after a reflow larger occurs. Lines will be removed\n * when a wrapped line unwraps.\n * @param lines The buffer lines.\n * @param oldCols The columns before resize\n * @param newCols The columns after resize.\n * @param bufferAbsoluteY The absolute y position of the cursor (baseY + cursorY).\n * @param nullCell The cell data to use when filling in empty cells.\n */\nexport function reflowLargerGetLinesToRemove(lines: CircularList<IBufferLine>, oldCols: number, newCols: number, bufferAbsoluteY: number, nullCell: ICellData): number[] {\n  // Gather all BufferLines that need to be removed from the Buffer here so that they can be\n  // batched up and only committed once\n  const toRemove: number[] = [];\n\n  for (let y = 0; y < lines.length - 1; y++) {\n    // Check if this row is wrapped\n    let i = y;\n    let nextLine = lines.get(++i) as BufferLine;\n    if (!nextLine.isWrapped) {\n      continue;\n    }\n\n    // Check how many lines it's wrapped for\n    const wrappedLines: BufferLine[] = [lines.get(y) as BufferLine];\n    while (i < lines.length && nextLine.isWrapped) {\n      wrappedLines.push(nextLine);\n      nextLine = lines.get(++i) as BufferLine;\n    }\n\n    // If these lines contain the cursor don't touch them, the program will handle fixing up wrapped\n    // lines with the cursor\n    if (bufferAbsoluteY >= y && bufferAbsoluteY < i) {\n      y += wrappedLines.length - 1;\n      continue;\n    }\n\n    // Copy buffer data to new locations\n    let destLineIndex = 0;\n    let destCol = getWrappedLineTrimmedLength(wrappedLines, destLineIndex, oldCols);\n    let srcLineIndex = 1;\n    let srcCol = 0;\n    while (srcLineIndex < wrappedLines.length) {\n      const srcTrimmedTineLength = getWrappedLineTrimmedLength(wrappedLines, srcLineIndex, oldCols);\n      const srcRemainingCells = srcTrimmedTineLength - srcCol;\n      const destRemainingCells = newCols - destCol;\n      const cellsToCopy = Math.min(srcRemainingCells, destRemainingCells);\n\n      wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[srcLineIndex], srcCol, destCol, cellsToCopy, false);\n\n      destCol += cellsToCopy;\n      if (destCol === newCols) {\n        destLineIndex++;\n        destCol = 0;\n      }\n      srcCol += cellsToCopy;\n      if (srcCol === srcTrimmedTineLength) {\n        srcLineIndex++;\n        srcCol = 0;\n      }\n\n      // Make sure the last cell isn't wide, if it is copy it to the current dest\n      if (destCol === 0 && destLineIndex !== 0) {\n        if (wrappedLines[destLineIndex - 1].getWidth(newCols - 1) === 2) {\n          wrappedLines[destLineIndex].copyCellsFrom(wrappedLines[destLineIndex - 1], newCols - 1, destCol++, 1, false);\n          // Null out the end of the last row\n          wrappedLines[destLineIndex - 1].setCell(newCols - 1, nullCell);\n        }\n      }\n    }\n\n    // Clear out remaining cells or fragments could remain;\n    wrappedLines[destLineIndex].replaceCells(destCol, newCols, nullCell);\n\n    // Work backwards and remove any rows at the end that only contain null cells\n    let countToRemove = 0;\n    for (let i = wrappedLines.length - 1; i > 0; i--) {\n      if (i > destLineIndex || wrappedLines[i].getTrimmedLength() === 0) {\n        countToRemove++;\n      } else {\n        break;\n      }\n    }\n\n    if (countToRemove > 0) {\n      toRemove.push(y + wrappedLines.length - countToRemove); // index\n      toRemove.push(countToRemove);\n    }\n\n    y += wrappedLines.length - 1;\n  }\n  return toRemove;\n}\n\n/**\n * Creates and return the new layout for lines given an array of indexes to be removed.\n * @param lines The buffer lines.\n * @param toRemove The indexes to remove.\n */\nexport function reflowLargerCreateNewLayout(lines: CircularList<IBufferLine>, toRemove: number[]): INewLayoutResult {\n  const layout: number[] = [];\n  // First iterate through the list and get the actual indexes to use for rows\n  let nextToRemoveIndex = 0;\n  let nextToRemoveStart = toRemove[nextToRemoveIndex];\n  let countRemovedSoFar = 0;\n  for (let i = 0; i < lines.length; i++) {\n    if (nextToRemoveStart === i) {\n      const countToRemove = toRemove[++nextToRemoveIndex];\n\n      // Tell markers that there was a deletion\n      lines.onDeleteEmitter.fire({\n        index: i - countRemovedSoFar,\n        amount: countToRemove\n      });\n\n      i += countToRemove - 1;\n      countRemovedSoFar += countToRemove;\n      nextToRemoveStart = toRemove[++nextToRemoveIndex];\n    } else {\n      layout.push(i);\n    }\n  }\n  return {\n    layout,\n    countRemoved: countRemovedSoFar\n  };\n}\n\n/**\n * Applies a new layout to the buffer. This essentially does the same as many splice calls but it's\n * done all at once in a single iteration through the list since splice is very expensive.\n * @param lines The buffer lines.\n * @param newLayout The new layout to apply.\n */\nexport function reflowLargerApplyNewLayout(lines: CircularList<IBufferLine>, newLayout: number[]): void {\n  // Record original lines so they don't get overridden when we rearrange the list\n  const newLayoutLines: BufferLine[] = [];\n  for (let i = 0; i < newLayout.length; i++) {\n    newLayoutLines.push(lines.get(newLayout[i]) as BufferLine);\n  }\n\n  // Rearrange the list\n  for (let i = 0; i < newLayoutLines.length; i++) {\n    lines.set(i, newLayoutLines[i]);\n  }\n  lines.length = newLayout.length;\n}\n\n/**\n * Gets the new line lengths for a given wrapped line. The purpose of this function it to pre-\n * compute the wrapping points since wide characters may need to be wrapped onto the following line.\n * This function will return an array of numbers of where each line wraps to, the resulting array\n * will only contain the values `newCols` (when the line does not end with a wide character) and\n * `newCols - 1` (when the line does end with a wide character), except for the last value which\n * will contain the remaining items to fill the line.\n *\n * Calling this with a `newCols` value of `1` will lock up.\n *\n * @param wrappedLines The wrapped lines to evaluate.\n * @param oldCols The columns before resize.\n * @param newCols The columns after resize.\n */\nexport function reflowSmallerGetNewLineLengths(wrappedLines: BufferLine[], oldCols: number, newCols: number): number[] {\n  const newLineLengths: number[] = [];\n  const cellsNeeded = wrappedLines.map((l, i) => getWrappedLineTrimmedLength(wrappedLines, i, oldCols)).reduce((p, c) => p + c);\n\n  // Use srcCol and srcLine to find the new wrapping point, use that to get the cellsAvailable and\n  // linesNeeded\n  let srcCol = 0;\n  let srcLine = 0;\n  let cellsAvailable = 0;\n  while (cellsAvailable < cellsNeeded) {\n    if (cellsNeeded - cellsAvailable < newCols) {\n      // Add the final line and exit the loop\n      newLineLengths.push(cellsNeeded - cellsAvailable);\n      break;\n    }\n    srcCol += newCols;\n    const oldTrimmedLength = getWrappedLineTrimmedLength(wrappedLines, srcLine, oldCols);\n    if (srcCol > oldTrimmedLength) {\n      srcCol -= oldTrimmedLength;\n      srcLine++;\n    }\n    const endsWithWide = wrappedLines[srcLine].getWidth(srcCol - 1) === 2;\n    if (endsWithWide) {\n      srcCol--;\n    }\n    const lineLength = endsWithWide ? newCols - 1 : newCols;\n    newLineLengths.push(lineLength);\n    cellsAvailable += lineLength;\n  }\n\n  return newLineLengths;\n}\n\nexport function getWrappedLineTrimmedLength(lines: BufferLine[], i: number, cols: number): number {\n  // If this is the last row in the wrapped line, get the actual trimmed length\n  if (i === lines.length - 1) {\n    return lines[i].getTrimmedLength();\n  }\n  // Detect whether the following line starts with a wide character and the end of the current line\n  // is null, if so then we can be pretty sure the null character should be excluded from the line\n  // length]\n  const endsInNull = !(lines[i].hasContent(cols - 1)) && lines[i].getWidth(cols - 1) === 1;\n  const followingLineStartsWithWide = lines[i + 1].getWidth(0) === 2;\n  if (endsInNull && followingLineStartsWithWide) {\n    return cols - 1;\n  }\n  return cols;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData } from 'common/Types';\nimport { Buffer } from 'common/buffer/Buffer';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\n/**\n * The BufferSet represents the set of two buffers used by xterm terminals (normal and alt) and\n * provides also utilities for working with them.\n */\nexport class BufferSet extends Disposable implements IBufferSet {\n  private _normal!: Buffer;\n  private _alt!: Buffer;\n  private _activeBuffer!: Buffer;\n\n  private readonly _onBufferActivate = this.register(new EventEmitter<{activeBuffer: IBuffer, inactiveBuffer: IBuffer}>());\n  public readonly onBufferActivate = this._onBufferActivate.event;\n\n  /**\n   * Create a new BufferSet for the given terminal.\n   */\n  constructor(\n    private readonly _optionsService: IOptionsService,\n    private readonly _bufferService: IBufferService\n  ) {\n    super();\n    this.reset();\n    this.register(this._optionsService.onSpecificOptionChange('scrollback', () => this.resize(this._bufferService.cols, this._bufferService.rows)));\n    this.register(this._optionsService.onSpecificOptionChange('tabStopWidth', () => this.setupTabStops()));\n  }\n\n  public reset(): void {\n    this._normal = new Buffer(true, this._optionsService, this._bufferService);\n    this._normal.fillViewportRows();\n\n    // The alt buffer should never have scrollback.\n    // See http://invisible-island.net/xterm/ctlseqs/ctlseqs.html#h2-The-Alternate-Screen-Buffer\n    this._alt = new Buffer(false, this._optionsService, this._bufferService);\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n\n    this.setupTabStops();\n  }\n\n  /**\n   * Returns the alt Buffer of the BufferSet\n   */\n  public get alt(): Buffer {\n    return this._alt;\n  }\n\n  /**\n   * Returns the currently active Buffer of the BufferSet\n   */\n  public get active(): Buffer {\n    return this._activeBuffer;\n  }\n\n  /**\n   * Returns the normal Buffer of the BufferSet\n   */\n  public get normal(): Buffer {\n    return this._normal;\n  }\n\n  /**\n   * Sets the normal Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateNormalBuffer(): void {\n    if (this._activeBuffer === this._normal) {\n      return;\n    }\n    this._normal.x = this._alt.x;\n    this._normal.y = this._alt.y;\n    // The alt buffer should always be cleared when we switch to the normal\n    // buffer. This frees up memory since the alt buffer should always be new\n    // when activated.\n    this._alt.clearAllMarkers();\n    this._alt.clear();\n    this._activeBuffer = this._normal;\n    this._onBufferActivate.fire({\n      activeBuffer: this._normal,\n      inactiveBuffer: this._alt\n    });\n  }\n\n  /**\n   * Sets the alt Buffer of the BufferSet as its currently active Buffer\n   */\n  public activateAltBuffer(fillAttr?: IAttributeData): void {\n    if (this._activeBuffer === this._alt) {\n      return;\n    }\n    // Since the alt buffer is always cleared when the normal buffer is\n    // activated, we want to fill it when switching to it.\n    this._alt.fillViewportRows(fillAttr);\n    this._alt.x = this._normal.x;\n    this._alt.y = this._normal.y;\n    this._activeBuffer = this._alt;\n    this._onBufferActivate.fire({\n      activeBuffer: this._alt,\n      inactiveBuffer: this._normal\n    });\n  }\n\n  /**\n   * Resizes both normal and alt buffers, adjusting their data accordingly.\n   * @param newCols The new number of columns.\n   * @param newRows The new number of rows.\n   */\n  public resize(newCols: number, newRows: number): void {\n    this._normal.resize(newCols, newRows);\n    this._alt.resize(newCols, newRows);\n    this.setupTabStops(newCols);\n  }\n\n  /**\n   * Setup the tab stops.\n   * @param i The index to start setting up tab stops from.\n   */\n  public setupTabStops(i?: number): void {\n    this._normal.setupTabStops(i);\n    this._alt.setupTabStops(i);\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CharData, ICellData, IExtendedAttrs } from 'common/Types';\nimport { stringFromCodePoint } from 'common/input/TextDecoder';\nimport { CHAR_DATA_CHAR_INDEX, CHAR_DATA_WIDTH_INDEX, CHAR_DATA_ATTR_INDEX, Content } from 'common/buffer/Constants';\nimport { AttributeData, ExtendedAttrs } from 'common/buffer/AttributeData';\n\n/**\n * CellData - represents a single Cell in the terminal buffer.\n */\nexport class CellData extends AttributeData implements ICellData {\n  /** Helper to create CellData from CharData. */\n  public static fromCharData(value: CharData): CellData {\n    const obj = new CellData();\n    obj.setFromCharData(value);\n    return obj;\n  }\n  /** Primitives from terminal buffer. */\n  public content = 0;\n  public fg = 0;\n  public bg = 0;\n  public extended: IExtendedAttrs = new ExtendedAttrs();\n  public combinedData = '';\n  /** Whether cell contains a combined string. */\n  public isCombined(): number {\n    return this.content & Content.IS_COMBINED_MASK;\n  }\n  /** Width of the cell. */\n  public getWidth(): number {\n    return this.content >> Content.WIDTH_SHIFT;\n  }\n  /** JS string of the content. */\n  public getChars(): string {\n    if (this.content & Content.IS_COMBINED_MASK) {\n      return this.combinedData;\n    }\n    if (this.content & Content.CODEPOINT_MASK) {\n      return stringFromCodePoint(this.content & Content.CODEPOINT_MASK);\n    }\n    return '';\n  }\n  /**\n   * Codepoint of cell\n   * Note this returns the UTF32 codepoint of single chars,\n   * if content is a combined string it returns the codepoint\n   * of the last char in string to be in line with code in CharData.\n   */\n  public getCode(): number {\n    return (this.isCombined())\n      ? this.combinedData.charCodeAt(this.combinedData.length - 1)\n      : this.content & Content.CODEPOINT_MASK;\n  }\n  /** Set data from CharData */\n  public setFromCharData(value: CharData): void {\n    this.fg = value[CHAR_DATA_ATTR_INDEX];\n    this.bg = 0;\n    let combined = false;\n    // surrogates and combined strings need special treatment\n    if (value[CHAR_DATA_CHAR_INDEX].length > 2) {\n      combined = true;\n    }\n    else if (value[CHAR_DATA_CHAR_INDEX].length === 2) {\n      const code = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0);\n      // if the 2-char string is a surrogate create single codepoint\n      // everything else is combined\n      if (0xD800 <= code && code <= 0xDBFF) {\n        const second = value[CHAR_DATA_CHAR_INDEX].charCodeAt(1);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          this.content = ((code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n        }\n        else {\n          combined = true;\n        }\n      }\n      else {\n        combined = true;\n      }\n    }\n    else {\n      this.content = value[CHAR_DATA_CHAR_INDEX].charCodeAt(0) | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n    if (combined) {\n      this.combinedData = value[CHAR_DATA_CHAR_INDEX];\n      this.content = Content.IS_COMBINED_MASK | (value[CHAR_DATA_WIDTH_INDEX] << Content.WIDTH_SHIFT);\n    }\n  }\n  /** Get data as CharData. */\n  public getAsCharData(): CharData {\n    return [this.fg, this.getChars(), this.getWidth(), this.getCode()];\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nexport const DEFAULT_COLOR = 0;\nexport const DEFAULT_ATTR = (0 << 18) | (DEFAULT_COLOR << 9) | (256 << 0);\nexport const DEFAULT_EXT = 0;\n\nexport const CHAR_DATA_ATTR_INDEX = 0;\nexport const CHAR_DATA_CHAR_INDEX = 1;\nexport const CHAR_DATA_WIDTH_INDEX = 2;\nexport const CHAR_DATA_CODE_INDEX = 3;\n\n/**\n * Null cell - a real empty cell (containing nothing).\n * Note that code should always be 0 for a null cell as\n * several test condition of the buffer line rely on this.\n */\nexport const NULL_CELL_CHAR = '';\nexport const NULL_CELL_WIDTH = 1;\nexport const NULL_CELL_CODE = 0;\n\n/**\n * Whitespace cell.\n * This is meant as a replacement for empty cells when needed\n * during rendering lines to preserve correct aligment.\n */\nexport const WHITESPACE_CELL_CHAR = ' ';\nexport const WHITESPACE_CELL_WIDTH = 1;\nexport const WHITESPACE_CELL_CODE = 32;\n\n/**\n * Bitmasks for accessing data in `content`.\n */\nexport const enum Content {\n  /**\n   * bit 1..21    codepoint, max allowed in UTF32 is 0x10FFFF (21 bits taken)\n   *              read:   `codepoint = content & Content.codepointMask;`\n   *              write:  `content |= codepoint & Content.codepointMask;`\n   *                      shortcut if precondition `codepoint <= 0x10FFFF` is met:\n   *                      `content |= codepoint;`\n   */\n  CODEPOINT_MASK = 0x1FFFFF,\n\n  /**\n   * bit 22       flag indication whether a cell contains combined content\n   *              read:   `isCombined = content & Content.isCombined;`\n   *              set:    `content |= Content.isCombined;`\n   *              clear:  `content &= ~Content.isCombined;`\n   */\n  IS_COMBINED_MASK = 0x200000,  // 1 << 21\n\n  /**\n   * bit 1..22    mask to check whether a cell contains any string data\n   *              we need to check for codepoint and isCombined bits to see\n   *              whether a cell contains anything\n   *              read:   `isEmpty = !(content & Content.hasContent)`\n   */\n  HAS_CONTENT_MASK = 0x3FFFFF,\n\n  /**\n   * bit 23..24   wcwidth value of cell, takes 2 bits (ranges from 0..2)\n   *              read:   `width = (content & Content.widthMask) >> Content.widthShift;`\n   *                      `hasWidth = content & Content.widthMask;`\n   *                      as long as wcwidth is highest value in `content`:\n   *                      `width = content >> Content.widthShift;`\n   *              write:  `content |= (width << Content.widthShift) & Content.widthMask;`\n   *                      shortcut if precondition `0 <= width <= 3` is met:\n   *                      `content |= width << Content.widthShift;`\n   */\n  WIDTH_MASK = 0xC00000,   // 3 << 22\n  WIDTH_SHIFT = 22\n}\n\nexport const enum Attributes {\n  /**\n   * bit 1..8     blue in RGB, color in P256 and P16\n   */\n  BLUE_MASK = 0xFF,\n  BLUE_SHIFT = 0,\n  PCOLOR_MASK = 0xFF,\n  PCOLOR_SHIFT = 0,\n\n  /**\n   * bit 9..16    green in RGB\n   */\n  GREEN_MASK = 0xFF00,\n  GREEN_SHIFT = 8,\n\n  /**\n   * bit 17..24   red in RGB\n   */\n  RED_MASK = 0xFF0000,\n  RED_SHIFT = 16,\n\n  /**\n   * bit 25..26   color mode: DEFAULT (0) | P16 (1) | P256 (2) | RGB (3)\n   */\n  CM_MASK = 0x3000000,\n  CM_DEFAULT = 0,\n  CM_P16 = 0x1000000,\n  CM_P256 = 0x2000000,\n  CM_RGB = 0x3000000,\n\n  /**\n   * bit 1..24  RGB room\n   */\n  RGB_MASK = 0xFFFFFF\n}\n\nexport const enum FgFlags {\n  /**\n   * bit 27..32\n   */\n  INVERSE = 0x4000000,\n  BOLD = 0x8000000,\n  UNDERLINE = 0x10000000,\n  BLINK = 0x20000000,\n  INVISIBLE = 0x40000000,\n  STRIKETHROUGH = 0x80000000,\n}\n\nexport const enum BgFlags {\n  /**\n   * bit 27..32 (upper 2 unused)\n   */\n  ITALIC = 0x4000000,\n  DIM = 0x8000000,\n  HAS_EXTENDED = 0x10000000,\n  PROTECTED = 0x20000000,\n  OVERLINE = 0x40000000\n}\n\nexport const enum ExtFlags {\n  /**\n   * bit 27..32 (upper 3 unused)\n   */\n  UNDERLINE_STYLE = 0x1C000000\n}\n\nexport const enum UnderlineStyle {\n  NONE = 0,\n  SINGLE = 1,\n  DOUBLE = 2,\n  CURLY = 3,\n  DOTTED = 4,\n  DASHED = 5\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { disposeArray } from 'common/Lifecycle';\nimport { IDisposable, IMarker } from 'common/Types';\n\nexport class Marker implements IMarker {\n  private static _nextId = 1;\n\n  public isDisposed: boolean = false;\n  private readonly _disposables: IDisposable[] = [];\n\n  private readonly _id: number = Marker._nextId++;\n  public get id(): number { return this._id; }\n\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  constructor(\n    public line: number\n  ) {\n  }\n\n  public dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n    this.isDisposed = true;\n    this.line = -1;\n    // Emit before super.dispose such that dispose listeners get a change to react\n    this._onDispose.fire();\n    disposeArray(this._disposables);\n    this._disposables.length = 0;\n  }\n\n  public register<T extends IDisposable>(disposable: T): T {\n    this._disposables.push(disposable);\n    return disposable;\n  }\n}\n", "/**\n * Copyright (c) 2016 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharset } from 'common/Types';\n\n/**\n * The character sets supported by the terminal. These enable several languages\n * to be represented within the terminal with only 8-bit encoding. See ISO 2022\n * for a discussion on character sets. Only VT100 character sets are supported.\n */\nexport const CHARSETS: { [key: string]: ICharset | undefined } = {};\n\n/**\n * The default character set, US.\n */\nexport const DEFAULT_CHARSET: ICharset | undefined = CHARSETS['B'];\n\n/**\n * DEC Special Character and Line Drawing Set.\n * Reference: http://vt100.net/docs/vt102-ug/table5-13.html\n * A lot of curses apps use this if they see TERM=xterm.\n * testing: echo -e '\\e(0a\\e(B'\n * The xterm output sometimes seems to conflict with the\n * reference above. xterm seems in line with the reference\n * when running vttest however.\n * The table below now uses xterm's output from vttest.\n */\nCHARSETS['0'] = {\n  '`': '\\u25c6', // '◆'\n  'a': '\\u2592', // '▒'\n  'b': '\\u2409', // '␉' (HT)\n  'c': '\\u240c', // '␌' (FF)\n  'd': '\\u240d', // '␍' (CR)\n  'e': '\\u240a', // '␊' (LF)\n  'f': '\\u00b0', // '°'\n  'g': '\\u00b1', // '±'\n  'h': '\\u2424', // '␤' (NL)\n  'i': '\\u240b', // '␋' (VT)\n  'j': '\\u2518', // '┘'\n  'k': '\\u2510', // '┐'\n  'l': '\\u250c', // '┌'\n  'm': '\\u2514', // '└'\n  'n': '\\u253c', // '┼'\n  'o': '\\u23ba', // '⎺'\n  'p': '\\u23bb', // '⎻'\n  'q': '\\u2500', // '─'\n  'r': '\\u23bc', // '⎼'\n  's': '\\u23bd', // '⎽'\n  't': '\\u251c', // '├'\n  'u': '\\u2524', // '┤'\n  'v': '\\u2534', // '┴'\n  'w': '\\u252c', // '┬'\n  'x': '\\u2502', // '│'\n  'y': '\\u2264', // '≤'\n  'z': '\\u2265', // '≥'\n  '{': '\\u03c0', // 'π'\n  '|': '\\u2260', // '≠'\n  '}': '\\u00a3', // '£'\n  '~': '\\u00b7'  // '·'\n};\n\n/**\n * British character set\n * ESC (A\n * Reference: http://vt100.net/docs/vt220-rm/table2-5.html\n */\nCHARSETS['A'] = {\n  '#': '£'\n};\n\n/**\n * United States character set\n * ESC (B\n */\nCHARSETS['B'] = undefined;\n\n/**\n * Dutch character set\n * ESC (4\n * Reference: http://vt100.net/docs/vt220-rm/table2-6.html\n */\nCHARSETS['4'] = {\n  '#': '£',\n  '@': '¾',\n  '[': 'ij',\n  '\\\\': '½',\n  ']': '|',\n  '{': '¨',\n  '|': 'f',\n  '}': '¼',\n  '~': '´'\n};\n\n/**\n * Finnish character set\n * ESC (C or ESC (5\n * Reference: http://vt100.net/docs/vt220-rm/table2-7.html\n */\nCHARSETS['C'] =\nCHARSETS['5'] = {\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * French character set\n * ESC (R\n * Reference: http://vt100.net/docs/vt220-rm/table2-8.html\n */\nCHARSETS['R'] = {\n  '#': '£',\n  '@': 'à',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': '§',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': '¨'\n};\n\n/**\n * French Canadian character set\n * ESC (Q\n * Reference: http://vt100.net/docs/vt220-rm/table2-9.html\n */\nCHARSETS['Q'] = {\n  '@': 'à',\n  '[': 'â',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  '`': 'ô',\n  '{': 'é',\n  '|': 'ù',\n  '}': 'è',\n  '~': 'û'\n};\n\n/**\n * German character set\n * ESC (K\n * Reference: http://vt100.net/docs/vt220-rm/table2-10.html\n */\nCHARSETS['K'] = {\n  '@': '§',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Ü',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'ß'\n};\n\n/**\n * Italian character set\n * ESC (Y\n * Reference: http://vt100.net/docs/vt220-rm/table2-11.html\n */\nCHARSETS['Y'] = {\n  '#': '£',\n  '@': '§',\n  '[': '°',\n  '\\\\': 'ç',\n  ']': 'é',\n  '`': 'ù',\n  '{': 'à',\n  '|': 'ò',\n  '}': 'è',\n  '~': 'ì'\n};\n\n/**\n * Norwegian/Danish character set\n * ESC (E or ESC (6\n * Reference: http://vt100.net/docs/vt220-rm/table2-12.html\n */\nCHARSETS['E'] =\nCHARSETS['6'] = {\n  '@': 'Ä',\n  '[': 'Æ',\n  '\\\\': 'Ø',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'ä',\n  '{': 'æ',\n  '|': 'ø',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Spanish character set\n * ESC (Z\n * Reference: http://vt100.net/docs/vt220-rm/table2-13.html\n */\nCHARSETS['Z'] = {\n  '#': '£',\n  '@': '§',\n  '[': '¡',\n  '\\\\': 'Ñ',\n  ']': '¿',\n  '{': '°',\n  '|': 'ñ',\n  '}': 'ç'\n};\n\n/**\n * Swedish character set\n * ESC (H or ESC (7\n * Reference: http://vt100.net/docs/vt220-rm/table2-14.html\n */\nCHARSETS['H'] =\nCHARSETS['7'] = {\n  '@': 'É',\n  '[': 'Ä',\n  '\\\\': 'Ö',\n  ']': 'Å',\n  '^': 'Ü',\n  '`': 'é',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'å',\n  '~': 'ü'\n};\n\n/**\n * Swiss character set\n * ESC (=\n * Reference: http://vt100.net/docs/vt220-rm/table2-15.html\n */\nCHARSETS['='] = {\n  '#': 'ù',\n  '@': 'à',\n  '[': 'é',\n  '\\\\': 'ç',\n  ']': 'ê',\n  '^': 'î',\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  '_': 'è',\n  '`': 'ô',\n  '{': 'ä',\n  '|': 'ö',\n  '}': 'ü',\n  '~': 'û'\n};\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * C0 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C0 {\n  /** Null (Caret = ^@, C = \\0) */\n  export const NUL = '\\x00';\n  /** Start of Heading (Caret = ^A) */\n  export const SOH = '\\x01';\n  /** Start of Text (Caret = ^B) */\n  export const STX = '\\x02';\n  /** End of Text (Caret = ^C) */\n  export const ETX = '\\x03';\n  /** End of Transmission (Caret = ^D) */\n  export const EOT = '\\x04';\n  /** Enquiry (Caret = ^E) */\n  export const ENQ = '\\x05';\n  /** Acknowledge (Caret = ^F) */\n  export const ACK = '\\x06';\n  /** Bell (Caret = ^G, C = \\a) */\n  export const BEL = '\\x07';\n  /** Backspace (Caret = ^H, C = \\b) */\n  export const BS  = '\\x08';\n  /** Character Tabulation, Horizontal Tabulation (Caret = ^I, C = \\t) */\n  export const HT  = '\\x09';\n  /** Line Feed (Caret = ^J, C = \\n) */\n  export const LF  = '\\x0a';\n  /** Line Tabulation, Vertical Tabulation (Caret = ^K, C = \\v) */\n  export const VT  = '\\x0b';\n  /** Form Feed (Caret = ^L, C = \\f) */\n  export const FF  = '\\x0c';\n  /** Carriage Return (Caret = ^M, C = \\r) */\n  export const CR  = '\\x0d';\n  /** Shift Out (Caret = ^N) */\n  export const SO  = '\\x0e';\n  /** Shift In (Caret = ^O) */\n  export const SI  = '\\x0f';\n  /** Data Link Escape (Caret = ^P) */\n  export const DLE = '\\x10';\n  /** Device Control One (XON) (Caret = ^Q) */\n  export const DC1 = '\\x11';\n  /** Device Control Two (Caret = ^R) */\n  export const DC2 = '\\x12';\n  /** Device Control Three (XOFF) (Caret = ^S) */\n  export const DC3 = '\\x13';\n  /** Device Control Four (Caret = ^T) */\n  export const DC4 = '\\x14';\n  /** Negative Acknowledge (Caret = ^U) */\n  export const NAK = '\\x15';\n  /** Synchronous Idle (Caret = ^V) */\n  export const SYN = '\\x16';\n  /** End of Transmission Block (Caret = ^W) */\n  export const ETB = '\\x17';\n  /** Cancel (Caret = ^X) */\n  export const CAN = '\\x18';\n  /** End of Medium (Caret = ^Y) */\n  export const EM  = '\\x19';\n  /** Substitute (Caret = ^Z) */\n  export const SUB = '\\x1a';\n  /** Escape (Caret = ^[, C = \\e) */\n  export const ESC = '\\x1b';\n  /** File Separator (Caret = ^\\) */\n  export const FS  = '\\x1c';\n  /** Group Separator (Caret = ^]) */\n  export const GS  = '\\x1d';\n  /** Record Separator (Caret = ^^) */\n  export const RS  = '\\x1e';\n  /** Unit Separator (Caret = ^_) */\n  export const US  = '\\x1f';\n  /** Space */\n  export const SP  = '\\x20';\n  /** Delete (Caret = ^?) */\n  export const DEL = '\\x7f';\n}\n\n/**\n * C1 control codes\n * See = https://en.wikipedia.org/wiki/C0_and_C1_control_codes\n */\nexport namespace C1 {\n  /** padding character */\n  export const PAD = '\\x80';\n  /** High Octet Preset */\n  export const HOP = '\\x81';\n  /** Break Permitted Here */\n  export const BPH = '\\x82';\n  /** No Break Here */\n  export const NBH = '\\x83';\n  /** Index */\n  export const IND = '\\x84';\n  /** Next Line */\n  export const NEL = '\\x85';\n  /** Start of Selected Area */\n  export const SSA = '\\x86';\n  /** End of Selected Area */\n  export const ESA = '\\x87';\n  /** Horizontal Tabulation Set */\n  export const HTS = '\\x88';\n  /** Horizontal Tabulation With Justification */\n  export const HTJ = '\\x89';\n  /** Vertical Tabulation Set */\n  export const VTS = '\\x8a';\n  /** Partial Line Down */\n  export const PLD = '\\x8b';\n  /** Partial Line Up */\n  export const PLU = '\\x8c';\n  /** Reverse Index */\n  export const RI = '\\x8d';\n  /** Single-Shift 2 */\n  export const SS2 = '\\x8e';\n  /** Single-Shift 3 */\n  export const SS3 = '\\x8f';\n  /** Device Control String */\n  export const DCS = '\\x90';\n  /** Private Use 1 */\n  export const PU1 = '\\x91';\n  /** Private Use 2 */\n  export const PU2 = '\\x92';\n  /** Set Transmit State */\n  export const STS = '\\x93';\n  /** Destructive backspace, intended to eliminate ambiguity about meaning of BS. */\n  export const CCH = '\\x94';\n  /** Message Waiting */\n  export const MW = '\\x95';\n  /** Start of Protected Area */\n  export const SPA = '\\x96';\n  /** End of Protected Area */\n  export const EPA = '\\x97';\n  /** Start of String */\n  export const SOS = '\\x98';\n  /** Single Graphic Character Introducer */\n  export const SGCI = '\\x99';\n  /** Single Character Introducer */\n  export const SCI = '\\x9a';\n  /** Control Sequence Introducer */\n  export const CSI = '\\x9b';\n  /** String Terminator */\n  export const ST = '\\x9c';\n  /** Operating System Command */\n  export const OSC = '\\x9d';\n  /** Privacy Message */\n  export const PM = '\\x9e';\n  /** Application Program Command */\n  export const APC = '\\x9f';\n}\nexport namespace C1_ESCAPED {\n  export const ST = `${C0.ESC}\\\\`;\n}\n", "/**\n * Copyright (c) 2014 The xterm.js authors. All rights reserved.\n * Copyright (c) 2012-2013, Christopher Jeffrey (MIT License)\n * @license MIT\n */\n\nimport { IKeyboardEvent, IKeyboardResult, KeyboardResultType } from 'common/Types';\nimport { C0 } from 'common/data/EscapeSequences';\n\n// reg + shift key mappings for digits and special chars\nconst KEYCODE_KEY_MAPPINGS: { [key: number]: [string, string]} = {\n  // digits 0-9\n  48: ['0', ')'],\n  49: ['1', '!'],\n  50: ['2', '@'],\n  51: ['3', '#'],\n  52: ['4', '$'],\n  53: ['5', '%'],\n  54: ['6', '^'],\n  55: ['7', '&'],\n  56: ['8', '*'],\n  57: ['9', '('],\n\n  // special chars\n  186: [';', ':'],\n  187: ['=', '+'],\n  188: [',', '<'],\n  189: ['-', '_'],\n  190: ['.', '>'],\n  191: ['/', '?'],\n  192: ['`', '~'],\n  219: ['[', '{'],\n  220: ['\\\\', '|'],\n  221: [']', '}'],\n  222: ['\\'', '\"']\n};\n\nexport function evaluateKeyboardEvent(\n  ev: IKeyboardEvent,\n  applicationCursorMode: boolean,\n  isMac: boolean,\n  macOptionIsMeta: boolean\n): IKeyboardResult {\n  const result: IKeyboardResult = {\n    type: KeyboardResultType.SEND_KEY,\n    // Whether to cancel event propagation (NOTE: this may not be needed since the event is\n    // canceled at the end of keyDown\n    cancel: false,\n    // The new key even to emit\n    key: undefined\n  };\n  const modifiers = (ev.shiftKey ? 1 : 0) | (ev.altKey ? 2 : 0) | (ev.ctrlKey ? 4 : 0) | (ev.metaKey ? 8 : 0);\n  switch (ev.keyCode) {\n    case 0:\n      if (ev.key === 'UIKeyInputUpArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OA';\n        } else {\n          result.key = C0.ESC + '[A';\n        }\n      }\n      else if (ev.key === 'UIKeyInputLeftArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OD';\n        } else {\n          result.key = C0.ESC + '[D';\n        }\n      }\n      else if (ev.key === 'UIKeyInputRightArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OC';\n        } else {\n          result.key = C0.ESC + '[C';\n        }\n      }\n      else if (ev.key === 'UIKeyInputDownArrow') {\n        if (applicationCursorMode) {\n          result.key = C0.ESC + 'OB';\n        } else {\n          result.key = C0.ESC + '[B';\n        }\n      }\n      break;\n    case 8:\n      // backspace\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.DEL; // \\e ^?\n        break;\n      }\n      result.key = C0.DEL; // ^?\n      break;\n    case 9:\n      // tab\n      if (ev.shiftKey) {\n        result.key = C0.ESC + '[Z';\n        break;\n      }\n      result.key = C0.HT;\n      result.cancel = true;\n      break;\n    case 13:\n      // return/enter\n      result.key = ev.altKey ? C0.ESC + C0.CR : C0.CR;\n      result.cancel = true;\n      break;\n    case 27:\n      // escape\n      result.key = C0.ESC;\n      if (ev.altKey) {\n        result.key = C0.ESC + C0.ESC;\n      }\n      result.cancel = true;\n      break;\n    case 37:\n      // left-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'D';\n        // HACK: Make Alt + left-arrow behave like Ctrl + left-arrow: move one word backwards\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3D') {\n          result.key = C0.ESC + (isMac ? 'b' : '[1;5D');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OD';\n      } else {\n        result.key = C0.ESC + '[D';\n      }\n      break;\n    case 39:\n      // right-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'C';\n        // HACK: Make Alt + right-arrow behave like Ctrl + right-arrow: move one word forward\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (result.key === C0.ESC + '[1;3C') {\n          result.key = C0.ESC + (isMac ? 'f' : '[1;5C');\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OC';\n      } else {\n        result.key = C0.ESC + '[C';\n      }\n      break;\n    case 38:\n      // up-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'A';\n        // HACK: Make Alt + up-arrow behave like Ctrl + up-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3A') {\n          result.key = C0.ESC + '[1;5A';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OA';\n      } else {\n        result.key = C0.ESC + '[A';\n      }\n      break;\n    case 40:\n      // down-arrow\n      if (ev.metaKey) {\n        break;\n      }\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'B';\n        // HACK: Make Alt + down-arrow behave like Ctrl + down-arrow\n        // http://unix.stackexchange.com/a/108106\n        // macOS uses different escape sequences than linux\n        if (!isMac && result.key === C0.ESC + '[1;3B') {\n          result.key = C0.ESC + '[1;5B';\n        }\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OB';\n      } else {\n        result.key = C0.ESC + '[B';\n      }\n      break;\n    case 45:\n      // insert\n      if (!ev.shiftKey && !ev.ctrlKey) {\n        // <Ctrl> or <Shift> + <Insert> are used to\n        // copy-paste on some systems.\n        result.key = C0.ESC + '[2~';\n      }\n      break;\n    case 46:\n      // delete\n      if (modifiers) {\n        result.key = C0.ESC + '[3;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[3~';\n      }\n      break;\n    case 36:\n      // home\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'H';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OH';\n      } else {\n        result.key = C0.ESC + '[H';\n      }\n      break;\n    case 35:\n      // end\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'F';\n      } else if (applicationCursorMode) {\n        result.key = C0.ESC + 'OF';\n      } else {\n        result.key = C0.ESC + '[F';\n      }\n      break;\n    case 33:\n      // page up\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_UP;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[5;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[5~';\n      }\n      break;\n    case 34:\n      // page down\n      if (ev.shiftKey) {\n        result.type = KeyboardResultType.PAGE_DOWN;\n      } else if (ev.ctrlKey) {\n        result.key = C0.ESC + '[6;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[6~';\n      }\n      break;\n    case 112:\n      // F1-F12\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'P';\n      } else {\n        result.key = C0.ESC + 'OP';\n      }\n      break;\n    case 113:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'Q';\n      } else {\n        result.key = C0.ESC + 'OQ';\n      }\n      break;\n    case 114:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'R';\n      } else {\n        result.key = C0.ESC + 'OR';\n      }\n      break;\n    case 115:\n      if (modifiers) {\n        result.key = C0.ESC + '[1;' + (modifiers + 1) + 'S';\n      } else {\n        result.key = C0.ESC + 'OS';\n      }\n      break;\n    case 116:\n      if (modifiers) {\n        result.key = C0.ESC + '[15;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[15~';\n      }\n      break;\n    case 117:\n      if (modifiers) {\n        result.key = C0.ESC + '[17;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[17~';\n      }\n      break;\n    case 118:\n      if (modifiers) {\n        result.key = C0.ESC + '[18;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[18~';\n      }\n      break;\n    case 119:\n      if (modifiers) {\n        result.key = C0.ESC + '[19;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[19~';\n      }\n      break;\n    case 120:\n      if (modifiers) {\n        result.key = C0.ESC + '[20;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[20~';\n      }\n      break;\n    case 121:\n      if (modifiers) {\n        result.key = C0.ESC + '[21;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[21~';\n      }\n      break;\n    case 122:\n      if (modifiers) {\n        result.key = C0.ESC + '[23;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[23~';\n      }\n      break;\n    case 123:\n      if (modifiers) {\n        result.key = C0.ESC + '[24;' + (modifiers + 1) + '~';\n      } else {\n        result.key = C0.ESC + '[24~';\n      }\n      break;\n    default:\n      // a-z and space\n      if (ev.ctrlKey && !ev.shiftKey && !ev.altKey && !ev.metaKey) {\n        if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          result.key = String.fromCharCode(ev.keyCode - 64);\n        } else if (ev.keyCode === 32) {\n          result.key = C0.NUL;\n        } else if (ev.keyCode >= 51 && ev.keyCode <= 55) {\n          // escape, file sep, group sep, record sep, unit sep\n          result.key = String.fromCharCode(ev.keyCode - 51 + 27);\n        } else if (ev.keyCode === 56) {\n          result.key = C0.DEL;\n        } else if (ev.keyCode === 219) {\n          result.key = C0.ESC;\n        } else if (ev.keyCode === 220) {\n          result.key = C0.FS;\n        } else if (ev.keyCode === 221) {\n          result.key = C0.GS;\n        }\n      } else if ((!isMac || macOptionIsMeta) && ev.altKey && !ev.metaKey) {\n        // On macOS this is a third level shift when !macOptionIsMeta. Use <Esc> instead.\n        const keyMapping = KEYCODE_KEY_MAPPINGS[ev.keyCode];\n        const key = keyMapping?.[!ev.shiftKey ? 0 : 1];\n        if (key) {\n          result.key = C0.ESC + key;\n        } else if (ev.keyCode >= 65 && ev.keyCode <= 90) {\n          const keyCode = ev.ctrlKey ? ev.keyCode - 64 : ev.keyCode + 32;\n          let keyString = String.fromCharCode(keyCode);\n          if (ev.shiftKey) {\n            keyString = keyString.toUpperCase();\n          }\n          result.key = C0.ESC + keyString;\n        } else if (ev.keyCode === 32) {\n          result.key = C0.ESC + (ev.ctrlKey ? C0.NUL : ' ');\n        } else if (ev.key === 'Dead' && ev.code.startsWith('Key')) {\n          // Reference: https://github.com/xtermjs/xterm.js/issues/3725\n          // Alt will produce a \"dead key\" (initate composition) with some\n          // of the letters in US layout (e.g. N/E/U).\n          // It's safe to match against Key* since no other `code` values begin with \"Key\".\n          // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code/code_values#code_values_on_mac\n          let keyString = ev.code.slice(3, 4);\n          if (!ev.shiftKey) {\n            keyString = keyString.toLowerCase();\n          }\n          result.key = C0.ESC + keyString;\n          result.cancel = true;\n        }\n      } else if (isMac && !ev.altKey && !ev.ctrlKey && !ev.shiftKey && ev.metaKey) {\n        if (ev.keyCode === 65) { // cmd + a\n          result.type = KeyboardResultType.SELECT_ALL;\n        }\n      } else if (ev.key && !ev.ctrlKey && !ev.altKey && !ev.metaKey && ev.keyCode >= 48 && ev.key.length === 1) {\n        // Include only keys that that result in a _single_ character; don't include num lock,\n        // volume up, etc.\n        result.key = ev.key;\n      } else if (ev.key && ev.ctrlKey) {\n        if (ev.key === '_') { // ^_\n          result.key = C0.US;\n        }\n        if (ev.key === '@') { // ^ + shift + 2 = ^ + @\n          result.key = C0.NUL;\n        }\n      }\n      break;\n  }\n\n  return result;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Polyfill - Convert UTF32 codepoint into JS string.\n * Note: The built-in String.fromCodePoint happens to be much slower\n *       due to additional sanity checks. We can avoid them since\n *       we always operate on legal UTF32 (granted by the input decoders)\n *       and use this faster version instead.\n */\nexport function stringFromCodePoint(codePoint: number): string {\n  if (codePoint > 0xFFFF) {\n    codePoint -= 0x10000;\n    return String.fromCharCode((codePoint >> 10) + 0xD800) + String.fromCharCode((codePoint % 0x400) + 0xDC00);\n  }\n  return String.fromCharCode(codePoint);\n}\n\n/**\n * Convert UTF32 char codes into JS string.\n * Basically the same as `stringFromCodePoint` but for multiple codepoints\n * in a loop (which is a lot faster).\n */\nexport function utf32ToString(data: Uint32Array, start: number = 0, end: number = data.length): string {\n  let result = '';\n  for (let i = start; i < end; ++i) {\n    let codepoint = data[i];\n    if (codepoint > 0xFFFF) {\n      // JS strings are encoded as UTF16, thus a non BMP codepoint gets converted into a surrogate\n      // pair conversion rules:\n      //  - subtract 0x10000 from code point, leaving a 20 bit number\n      //  - add high 10 bits to 0xD800  --> first surrogate\n      //  - add low 10 bits to 0xDC00   --> second surrogate\n      codepoint -= 0x10000;\n      result += String.fromCharCode((codepoint >> 10) + 0xD800) + String.fromCharCode((codepoint % 0x400) + 0xDC00);\n    } else {\n      result += String.fromCharCode(codepoint);\n    }\n  }\n  return result;\n}\n\n/**\n * StringToUtf32 - decodes UTF16 sequences into UTF32 codepoints.\n * To keep the decoder in line with JS strings it handles single surrogates as UCS2.\n */\nexport class StringToUtf32 {\n  private _interim: number = 0;\n\n  /**\n   * Clears interim and resets decoder to clean state.\n   */\n  public clear(): void {\n    this._interim = 0;\n  }\n\n  /**\n   * Decode JS string to UTF32 codepoints.\n   * The methods assumes stream input and will store partly transmitted\n   * surrogate pairs and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided input data does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: string, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let startPos = 0;\n\n    // handle leftover surrogate high\n    if (this._interim) {\n      const second = input.charCodeAt(startPos++);\n      if (0xDC00 <= second && second <= 0xDFFF) {\n        target[size++] = (this._interim - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n      } else {\n        // illegal codepoint (USC2 handling)\n        target[size++] = this._interim;\n        target[size++] = second;\n      }\n      this._interim = 0;\n    }\n\n    for (let i = startPos; i < length; ++i) {\n      const code = input.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          this._interim = code;\n          return size;\n        }\n        const second = input.charCodeAt(i);\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          target[size++] = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          // illegal codepoint (USC2 handling)\n          target[size++] = code;\n          target[size++] = second;\n        }\n        continue;\n      }\n      if (code === 0xFEFF) {\n        // BOM\n        continue;\n      }\n      target[size++] = code;\n    }\n    return size;\n  }\n}\n\n/**\n * Utf8Decoder - decodes UTF8 byte sequences into UTF32 codepoints.\n */\nexport class Utf8ToUtf32 {\n  public interim: Uint8Array = new Uint8Array(3);\n\n  /**\n   * Clears interim bytes and resets decoder to clean state.\n   */\n  public clear(): void {\n    this.interim.fill(0);\n  }\n\n  /**\n   * Decodes UTF8 byte sequences in `input` to UTF32 codepoints in `target`.\n   * The methods assumes stream input and will store partly transmitted bytes\n   * and decode them with the next data chunk.\n   * Note: The method does no bound checks for target, therefore make sure\n   * the provided data chunk does not exceed the size of `target`.\n   * Returns the number of written codepoints in `target`.\n   */\n  public decode(input: Uint8Array, target: Uint32Array): number {\n    const length = input.length;\n\n    if (!length) {\n      return 0;\n    }\n\n    let size = 0;\n    let byte1: number;\n    let byte2: number;\n    let byte3: number;\n    let byte4: number;\n    let codepoint = 0;\n    let startPos = 0;\n\n    // handle leftover bytes\n    if (this.interim[0]) {\n      let discardInterim = false;\n      let cp = this.interim[0];\n      cp &= ((((cp & 0xE0) === 0xC0)) ? 0x1F : (((cp & 0xF0) === 0xE0)) ? 0x0F : 0x07);\n      let pos = 0;\n      let tmp: number;\n      while ((tmp = this.interim[++pos] & 0x3F) && pos < 4) {\n        cp <<= 6;\n        cp |= tmp;\n      }\n      // missing bytes - read ahead from input\n      const type = (((this.interim[0] & 0xE0) === 0xC0)) ? 2 : (((this.interim[0] & 0xF0) === 0xE0)) ? 3 : 4;\n      const missing = type - pos;\n      while (startPos < missing) {\n        if (startPos >= length) {\n          return 0;\n        }\n        tmp = input[startPos++];\n        if ((tmp & 0xC0) !== 0x80) {\n          // wrong continuation, discard interim bytes completely\n          startPos--;\n          discardInterim = true;\n          break;\n        } else {\n          // need to save so we can continue short inputs in next call\n          this.interim[pos++] = tmp;\n          cp <<= 6;\n          cp |= tmp & 0x3F;\n        }\n      }\n      if (!discardInterim) {\n        // final test is type dependent\n        if (type === 2) {\n          if (cp < 0x80) {\n            // wrong starter byte\n            startPos--;\n          } else {\n            target[size++] = cp;\n          }\n        } else if (type === 3) {\n          if (cp < 0x0800 || (cp >= 0xD800 && cp <= 0xDFFF) || cp === 0xFEFF) {\n            // illegal codepoint or BOM\n          } else {\n            target[size++] = cp;\n          }\n        } else {\n          if (cp < 0x010000 || cp > 0x10FFFF) {\n            // illegal codepoint\n          } else {\n            target[size++] = cp;\n          }\n        }\n      }\n      this.interim.fill(0);\n    }\n\n    // loop through input\n    const fourStop = length - 4;\n    let i = startPos;\n    while (i < length) {\n      /**\n       * ASCII shortcut with loop unrolled to 4 consecutive ASCII chars.\n       * This is a compromise between speed gain for ASCII\n       * and penalty for non ASCII:\n       * For best ASCII performance the char should be stored directly into target,\n       * but even a single attempt to write to target and compare afterwards\n       * penalizes non ASCII really bad (-50%), thus we load the char into byteX first,\n       * which reduces ASCII performance by ~15%.\n       * This trial for ASCII reduces non ASCII performance by ~10% which seems acceptible\n       * compared to the gains.\n       * Note that this optimization only takes place for 4 consecutive ASCII chars,\n       * for any shorter it bails out. Worst case - all 4 bytes being read but\n       * thrown away due to the last being a non ASCII char (-10% performance).\n       */\n      while (i < fourStop\n        && !((byte1 = input[i]) & 0x80)\n        && !((byte2 = input[i + 1]) & 0x80)\n        && !((byte3 = input[i + 2]) & 0x80)\n        && !((byte4 = input[i + 3]) & 0x80))\n      {\n        target[size++] = byte1;\n        target[size++] = byte2;\n        target[size++] = byte3;\n        target[size++] = byte4;\n        i += 4;\n      }\n\n      // reread byte1\n      byte1 = input[i++];\n\n      // 1 byte\n      if (byte1 < 0x80) {\n        target[size++] = byte1;\n\n        // 2 bytes\n      } else if ((byte1 & 0xE0) === 0xC0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x1F) << 6 | (byte2 & 0x3F);\n        if (codepoint < 0x80) {\n          // wrong starter byte\n          i--;\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 3 bytes\n      } else if ((byte1 & 0xF0) === 0xE0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x0F) << 12 | (byte2 & 0x3F) << 6 | (byte3 & 0x3F);\n        if (codepoint < 0x0800 || (codepoint >= 0xD800 && codepoint <= 0xDFFF) || codepoint === 0xFEFF) {\n          // illegal codepoint or BOM, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n\n        // 4 bytes\n      } else if ((byte1 & 0xF8) === 0xF0) {\n        if (i >= length) {\n          this.interim[0] = byte1;\n          return size;\n        }\n        byte2 = input[i++];\n        if ((byte2 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          return size;\n        }\n        byte3 = input[i++];\n        if ((byte3 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        if (i >= length) {\n          this.interim[0] = byte1;\n          this.interim[1] = byte2;\n          this.interim[2] = byte3;\n          return size;\n        }\n        byte4 = input[i++];\n        if ((byte4 & 0xC0) !== 0x80) {\n          // wrong continuation\n          i--;\n          continue;\n        }\n        codepoint = (byte1 & 0x07) << 18 | (byte2 & 0x3F) << 12 | (byte3 & 0x3F) << 6 | (byte4 & 0x3F);\n        if (codepoint < 0x010000 || codepoint > 0x10FFFF) {\n          // illegal codepoint, no i-- here\n          continue;\n        }\n        target[size++] = codepoint;\n      } else {\n        // illegal byte, just skip\n      }\n    }\n    return size;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IUnicodeVersionProvider } from 'common/services/Services';\n\ntype CharWidth = 0 | 1 | 2;\n\nconst BMP_COMBINING = [\n  [0x0300, 0x036F], [0x0483, 0x0486], [0x0488, 0x0489],\n  [0x0591, 0x05BD], [0x05BF, 0x05BF], [0x05C1, 0x05C2],\n  [0x05C4, 0x05C5], [0x05C7, 0x05C7], [0x0600, 0x0603],\n  [0x0610, 0x0615], [0x064B, 0x065E], [0x0670, 0x0670],\n  [0x06D6, 0x06E4], [0x06E7, 0x06E8], [0x06EA, 0x06ED],\n  [0x070F, 0x070F], [0x0711, 0x0711], [0x0730, 0x074A],\n  [0x07A6, 0x07B0], [0x07EB, 0x07F3], [0x0901, 0x0902],\n  [0x093C, 0x093C], [0x0941, 0x0948], [0x094D, 0x094D],\n  [0x0951, 0x0954], [0x0962, 0x0963], [0x0981, 0x0981],\n  [0x09BC, 0x09BC], [0x09C1, 0x09C4], [0x09CD, 0x09CD],\n  [0x09E2, 0x09E3], [0x0A01, 0x0A02], [0x0A3C, 0x0A3C],\n  [0x0A41, 0x0A42], [0x0A47, 0x0A48], [0x0A4B, 0x0A4D],\n  [0x0A70, 0x0A71], [0x0A81, 0x0A82], [0x0ABC, 0x0ABC],\n  [0x0AC1, 0x0AC5], [0x0AC7, 0x0AC8], [0x0ACD, 0x0ACD],\n  [0x0AE2, 0x0AE3], [0x0B01, 0x0B01], [0x0B3C, 0x0B3C],\n  [0x0B3F, 0x0B3F], [0x0B41, 0x0B43], [0x0B4D, 0x0B4D],\n  [0x0B56, 0x0B56], [0x0B82, 0x0B82], [0x0BC0, 0x0BC0],\n  [0x0BCD, 0x0BCD], [0x0C3E, 0x0C40], [0x0C46, 0x0C48],\n  [0x0C4A, 0x0C4D], [0x0C55, 0x0C56], [0x0CBC, 0x0CBC],\n  [0x0CBF, 0x0CBF], [0x0CC6, 0x0CC6], [0x0CCC, 0x0CCD],\n  [0x0CE2, 0x0CE3], [0x0D41, 0x0D43], [0x0D4D, 0x0D4D],\n  [0x0DCA, 0x0DCA], [0x0DD2, 0x0DD4], [0x0DD6, 0x0DD6],\n  [0x0E31, 0x0E31], [0x0E34, 0x0E3A], [0x0E47, 0x0E4E],\n  [0x0EB1, 0x0EB1], [0x0EB4, 0x0EB9], [0x0EBB, 0x0EBC],\n  [0x0EC8, 0x0ECD], [0x0F18, 0x0F19], [0x0F35, 0x0F35],\n  [0x0F37, 0x0F37], [0x0F39, 0x0F39], [0x0F71, 0x0F7E],\n  [0x0F80, 0x0F84], [0x0F86, 0x0F87], [0x0F90, 0x0F97],\n  [0x0F99, 0x0FBC], [0x0FC6, 0x0FC6], [0x102D, 0x1030],\n  [0x1032, 0x1032], [0x1036, 0x1037], [0x1039, 0x1039],\n  [0x1058, 0x1059], [0x1160, 0x11FF], [0x135F, 0x135F],\n  [0x1712, 0x1714], [0x1732, 0x1734], [0x1752, 0x1753],\n  [0x1772, 0x1773], [0x17B4, 0x17B5], [0x17B7, 0x17BD],\n  [0x17C6, 0x17C6], [0x17C9, 0x17D3], [0x17DD, 0x17DD],\n  [0x180B, 0x180D], [0x18A9, 0x18A9], [0x1920, 0x1922],\n  [0x1927, 0x1928], [0x1932, 0x1932], [0x1939, 0x193B],\n  [0x1A17, 0x1A18], [0x1B00, 0x1B03], [0x1B34, 0x1B34],\n  [0x1B36, 0x1B3A], [0x1B3C, 0x1B3C], [0x1B42, 0x1B42],\n  [0x1B6B, 0x1B73], [0x1DC0, 0x1DCA], [0x1DFE, 0x1DFF],\n  [0x200B, 0x200F], [0x202A, 0x202E], [0x2060, 0x2063],\n  [0x206A, 0x206F], [0x20D0, 0x20EF], [0x302A, 0x302F],\n  [0x3099, 0x309A], [0xA806, 0xA806], [0xA80B, 0xA80B],\n  [0xA825, 0xA826], [0xFB1E, 0xFB1E], [0xFE00, 0xFE0F],\n  [0xFE20, 0xFE23], [0xFEFF, 0xFEFF], [0xFFF9, 0xFFFB]\n];\nconst HIGH_COMBINING = [\n  [0x10A01, 0x10A03], [0x10A05, 0x10A06], [0x10A0C, 0x10A0F],\n  [0x10A38, 0x10A3A], [0x10A3F, 0x10A3F], [0x1D167, 0x1D169],\n  [0x1D173, 0x1D182], [0x1D185, 0x1D18B], [0x1D1AA, 0x1D1AD],\n  [0x1D242, 0x1D244], [0xE0001, 0xE0001], [0xE0020, 0xE007F],\n  [0xE0100, 0xE01EF]\n];\n\n// BMP lookup table, lazy initialized during first addon loading\nlet table: Uint8Array;\n\nfunction bisearch(ucs: number, data: number[][]): boolean {\n  let min = 0;\n  let max = data.length - 1;\n  let mid;\n  if (ucs < data[0][0] || ucs > data[max][1]) {\n    return false;\n  }\n  while (max >= min) {\n    mid = (min + max) >> 1;\n    if (ucs > data[mid][1]) {\n      min = mid + 1;\n    } else if (ucs < data[mid][0]) {\n      max = mid - 1;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class UnicodeV6 implements IUnicodeVersionProvider {\n  public readonly version = '6';\n\n  constructor() {\n    // init lookup table once\n    if (!table) {\n      table = new Uint8Array(65536);\n      table.fill(1);\n      table[0] = 0;\n      // control chars\n      table.fill(0, 1, 32);\n      table.fill(0, 0x7f, 0xa0);\n\n      // apply wide char rules first\n      // wide chars\n      table.fill(2, 0x1100, 0x1160);\n      table[0x2329] = 2;\n      table[0x232a] = 2;\n      table.fill(2, 0x2e80, 0xa4d0);\n      table[0x303f] = 1;  // wrongly in last line\n\n      table.fill(2, 0xac00, 0xd7a4);\n      table.fill(2, 0xf900, 0xfb00);\n      table.fill(2, 0xfe10, 0xfe1a);\n      table.fill(2, 0xfe30, 0xfe70);\n      table.fill(2, 0xff00, 0xff61);\n      table.fill(2, 0xffe0, 0xffe7);\n\n      // apply combining last to ensure we overwrite\n      // wrongly wide set chars:\n      //    the original algo evals combining first and falls\n      //    through to wide check so we simply do here the opposite\n      // combining 0\n      for (let r = 0; r < BMP_COMBINING.length; ++r) {\n        table.fill(0, BMP_COMBINING[r][0], BMP_COMBINING[r][1] + 1);\n      }\n    }\n  }\n\n  public wcwidth(num: number): CharWidth {\n    if (num < 32) return 0;\n    if (num < 127) return 1;\n    if (num < 65536) return table[num] as CharWidth;\n    if (bisearch(num, HIGH_COMBINING)) return 0;\n    if ((num >= 0x20000 && num <= 0x2fffd) || (num >= 0x30000 && num <= 0x3fffd)) return 2;\n    return 1;\n  }\n}\n", "\n/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\n\ndeclare const setTimeout: (handler: () => void, timeout?: number) => void;\n\n/**\n * Safety watermark to avoid memory exhaustion and browser engine crash on fast data input.\n * Enable flow control to avoid this limit and make sure that your backend correctly\n * propagates this to the underlying pty. (see docs for further instructions)\n * Since this limit is meant as a safety parachute to prevent browser crashs,\n * it is set to a very high number. Typically xterm.js gets unresponsive with\n * a 100 times lower number (>500 kB).\n */\nconst DISCARD_WATERMARK = 50000000; // ~50 MB\n\n/**\n * The max number of ms to spend on writes before allowing the renderer to\n * catch up with a 0ms setTimeout. A value of < 33 to keep us close to\n * 30fps, and a value of < 16 to try to run at 60fps. Of course, the real FPS\n * depends on the time it takes for the renderer to draw the frame.\n */\nconst WRITE_TIMEOUT_MS = 12;\n\n/**\n * Threshold of max held chunks in the write buffer, that were already processed.\n * This is a tradeoff between extensive write buffer shifts (bad runtime) and high\n * memory consumption by data thats not used anymore.\n */\nconst WRITE_BUFFER_LENGTH_THRESHOLD = 50;\n\nexport class WriteBuffer extends Disposable {\n  private _writeBuffer: (string | Uint8Array)[] = [];\n  private _callbacks: ((() => void) | undefined)[] = [];\n  private _pendingData = 0;\n  private _bufferOffset = 0;\n  private _isSyncWriting = false;\n  private _syncCalls = 0;\n  private _didUserInput = false;\n\n  private readonly _onWriteParsed = this.register(new EventEmitter<void>());\n  public readonly onWriteParsed = this._onWriteParsed.event;\n\n  constructor(private _action: (data: string | Uint8Array, promiseResult?: boolean) => void | Promise<boolean>) {\n    super();\n  }\n\n  public handleUserInput(): void {\n    this._didUserInput = true;\n  }\n\n  /**\n   * @deprecated Unreliable, to be removed soon.\n   */\n  public writeSync(data: string | Uint8Array, maxSubsequentCalls?: number): void {\n    // stop writeSync recursions with maxSubsequentCalls argument\n    // This is dangerous to use as it will lose the current data chunk\n    // and return immediately.\n    if (maxSubsequentCalls !== undefined && this._syncCalls > maxSubsequentCalls) {\n      // comment next line if a whole loop block should only contain x `writeSync` calls\n      // (total flat vs. deep nested limit)\n      this._syncCalls = 0;\n      return;\n    }\n    // append chunk to buffer\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(undefined);\n\n    // increase recursion counter\n    this._syncCalls++;\n    // exit early if another writeSync loop is active\n    if (this._isSyncWriting) {\n      return;\n    }\n    this._isSyncWriting = true;\n\n    // force sync processing on pending data chunks to avoid in-band data scrambling\n    // does the same as innerWrite but without event loop\n    // we have to do it here as single loop steps to not corrupt loop subject\n    // by another writeSync call triggered from _action\n    let chunk: string | Uint8Array | undefined;\n    while (chunk = this._writeBuffer.shift()) {\n      this._action(chunk);\n      const cb = this._callbacks.shift();\n      if (cb) cb();\n    }\n    // reset to avoid reprocessing of chunks with scheduled innerWrite call\n    // stopping scheduled innerWrite by offset > length condition\n    this._pendingData = 0;\n    this._bufferOffset = 0x7FFFFFFF;\n\n    // allow another writeSync to loop\n    this._isSyncWriting = false;\n    this._syncCalls = 0;\n  }\n\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    if (this._pendingData > DISCARD_WATERMARK) {\n      throw new Error('write data discarded, use flow control to avoid losing data');\n    }\n\n    // schedule chunk processing for next event loop run\n    if (!this._writeBuffer.length) {\n      this._bufferOffset = 0;\n\n      // If this is the first write call after the user has done some input,\n      // parse it immediately to minimize input latency,\n      // otherwise schedule for the next event\n      if (this._didUserInput) {\n        this._didUserInput = false;\n        this._pendingData += data.length;\n        this._writeBuffer.push(data);\n        this._callbacks.push(callback);\n        this._innerWrite();\n        return;\n      }\n\n      setTimeout(() => this._innerWrite());\n    }\n\n    this._pendingData += data.length;\n    this._writeBuffer.push(data);\n    this._callbacks.push(callback);\n  }\n\n  /**\n   * Inner write call, that enters the sliced chunk processing by timing.\n   *\n   * `lastTime` indicates, when the last _innerWrite call had started.\n   * It is used to aggregate async handler execution under a timeout constraint\n   * effectively lowering the redrawing needs, schematically:\n   *\n   *   macroTask _innerWrite:\n   *     if (Date.now() - (lastTime | 0) < WRITE_TIMEOUT_MS):\n   *        schedule microTask _innerWrite(lastTime)\n   *     else:\n   *        schedule macroTask _innerWrite(0)\n   *\n   *   overall execution order on task queues:\n   *\n   *   macrotasks:  [...]  -->  _innerWrite(0)  -->  [...]  -->  screenUpdate  -->  [...]\n   *         m  t:                    |\n   *         i  a:                  [...]\n   *         c  s:                    |\n   *         r  k:              while < timeout:\n   *         o  s:                _innerWrite(timeout)\n   *\n   * `promiseResult` depicts the promise resolve value of an async handler.\n   * This value gets carried forward through all saved stack states of the\n   * paused parser for proper continuation.\n   *\n   * Note, for pure sync code `lastTime` and `promiseResult` have no meaning.\n   */\n  protected _innerWrite(lastTime: number = 0, promiseResult: boolean = true): void {\n    const startTime = lastTime || Date.now();\n    while (this._writeBuffer.length > this._bufferOffset) {\n      const data = this._writeBuffer[this._bufferOffset];\n      const result = this._action(data, promiseResult);\n      if (result) {\n        /**\n         * If we get a promise as return value, we re-schedule the continuation\n         * as thenable on the promise and exit right away.\n         *\n         * The exit here means, that we block input processing at the current active chunk,\n         * the exact execution position within the chunk is preserved by the saved\n         * stack content in InputHandler and EscapeSequenceParser.\n         *\n         * Resuming happens automatically from that saved stack state.\n         * Also the resolved promise value is passed along the callstack to\n         * `EscapeSequenceParser.parse` to correctly resume the stopped handler loop.\n         *\n         * Exceptions on async handlers will be logged to console async, but do not interrupt\n         * the input processing (continues with next handler at the current input position).\n         */\n\n        /**\n         * If a promise takes long to resolve, we should schedule continuation behind setTimeout.\n         * This might already be too late, if our .then enters really late (executor + prev thens\n         * took very long). This cannot be solved here for the handler itself (it is the handlers\n         * responsibility to slice hard work), but we can at least schedule a screen update as we\n         * gain control.\n         */\n        const continuation: (r: boolean) => void = (r: boolean) => Date.now() - startTime >= WRITE_TIMEOUT_MS\n          ? setTimeout(() => this._innerWrite(0, r))\n          : this._innerWrite(startTime, r);\n\n        /**\n         * Optimization considerations:\n         * The continuation above favors FPS over throughput by eval'ing `startTime` on resolve.\n         * This might schedule too many screen updates with bad throughput drops (in case a slow\n         * resolving handler sliced its work properly behind setTimeout calls). We cannot spot\n         * this condition here, also the renderer has no way to spot nonsense updates either.\n         * FIXME: A proper fix for this would track the FPS at the renderer entry level separately.\n         *\n         * If favoring of FPS shows bad throughtput impact, use the following instead. It favors\n         * throughput by eval'ing `startTime` upfront pulling at least one more chunk into the\n         * current microtask queue (executed before setTimeout).\n         */\n        // const continuation: (r: boolean) => void = Date.now() - startTime >= WRITE_TIMEOUT_MS\n        //   ? r => setTimeout(() => this._innerWrite(0, r))\n        //   : r => this._innerWrite(startTime, r);\n\n        // Handle exceptions synchronously to current band position, idea:\n        // 1. spawn a single microtask which we allow to throw hard\n        // 2. spawn a promise immediately resolving to `true`\n        // (executed on the same queue, thus properly aligned before continuation happens)\n        result.catch(err => {\n          queueMicrotask(() => {throw err;});\n          return Promise.resolve(false);\n        }).then(continuation);\n        return;\n      }\n\n      const cb = this._callbacks[this._bufferOffset];\n      if (cb) cb();\n      this._bufferOffset++;\n      this._pendingData -= data.length;\n\n      if (Date.now() - startTime >= WRITE_TIMEOUT_MS) {\n        break;\n      }\n    }\n    if (this._writeBuffer.length > this._bufferOffset) {\n      // Allow renderer to catch up before processing the next batch\n      // trim already processed chunks if we are above threshold\n      if (this._bufferOffset > WRITE_BUFFER_LENGTH_THRESHOLD) {\n        this._writeBuffer = this._writeBuffer.slice(this._bufferOffset);\n        this._callbacks = this._callbacks.slice(this._bufferOffset);\n        this._bufferOffset = 0;\n      }\n      setTimeout(() => this._innerWrite());\n    } else {\n      this._writeBuffer.length = 0;\n      this._callbacks.length = 0;\n      this._pendingData = 0;\n      this._bufferOffset = 0;\n    }\n    this._onWriteParsed.fire();\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n\n// 'rgb:' rule - matching: r/g/b | rr/gg/bb | rrr/ggg/bbb | rrrr/gggg/bbbb (hex digits)\nconst RGB_REX = /^([\\da-f])\\/([\\da-f])\\/([\\da-f])$|^([\\da-f]{2})\\/([\\da-f]{2})\\/([\\da-f]{2})$|^([\\da-f]{3})\\/([\\da-f]{3})\\/([\\da-f]{3})$|^([\\da-f]{4})\\/([\\da-f]{4})\\/([\\da-f]{4})$/;\n// '#...' rule - matching any hex digits\nconst HASH_REX = /^[\\da-f]+$/;\n\n/**\n * Parse color spec to RGB values (8 bit per channel).\n * See `man xparsecolor` for details about certain format specifications.\n *\n * Supported formats:\n * - rgb:<red>/<green>/<blue> with <red>, <green>, <blue> in h | hh | hhh | hhhh\n * - #RGB, #RRGGBB, #RRRGGGBBB, #RRRRGGGGBBBB\n *\n * All other formats like rgbi: or device-independent string specifications\n * with float numbering are not supported.\n */\nexport function parseColor(data: string): [number, number, number] | undefined {\n  if (!data) return;\n  // also handle uppercases\n  let low = data.toLowerCase();\n  if (low.indexOf('rgb:') === 0) {\n    // 'rgb:' specifier\n    low = low.slice(4);\n    const m = RGB_REX.exec(low);\n    if (m) {\n      const base = m[1] ? 15 : m[4] ? 255 : m[7] ? 4095 : 65535;\n      return [\n        Math.round(parseInt(m[1] || m[4] || m[7] || m[10], 16) / base * 255),\n        Math.round(parseInt(m[2] || m[5] || m[8] || m[11], 16) / base * 255),\n        Math.round(parseInt(m[3] || m[6] || m[9] || m[12], 16) / base * 255)\n      ];\n    }\n  } else if (low.indexOf('#') === 0) {\n    // '#' specifier\n    low = low.slice(1);\n    if (HASH_REX.exec(low) && [3, 6, 9, 12].includes(low.length)) {\n      const adv = low.length / 3;\n      const result: [number, number, number] = [0, 0, 0];\n      for (let i = 0; i < 3; ++i) {\n        const c = parseInt(low.slice(adv * i, adv * i + adv), 16);\n        result[i] = adv === 1 ? c << 4 : adv === 2 ? c : adv === 3 ? c >> 4 : c >> 8;\n      }\n      return result;\n    }\n  }\n\n  // Named colors are currently not supported due to the large addition to the xterm.js bundle size\n  // they would add. In order to support named colors, we would need some way of optionally loading\n  // additional payloads so startup/download time is not bloated (see #3530).\n}\n\n// pad hex output to requested bit width\nfunction pad(n: number, bits: number): string {\n  const s = n.toString(16);\n  const s2 = s.length < 2 ? '0' + s : s;\n  switch (bits) {\n    case 4:\n      return s[0];\n    case 8:\n      return s2;\n    case 12:\n      return (s2 + s2).slice(0, 3);\n    default:\n      return s2 + s2;\n  }\n}\n\n/**\n * Convert a given color to rgb:../../.. string of `bits` depth.\n */\nexport function toRgbString(color: [number, number, number], bits: number = 16): string {\n  const [r, g, b] = color;\n  return `rgb:${pad(r, bits)}/${pad(g, bits)}/${pad(b, bits)}`;\n}\n", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\n/**\n * Internal states of EscapeSequenceParser.\n */\nexport const enum ParserState {\n  GROUND = 0,\n  ESCAPE = 1,\n  ESCAPE_INTERMEDIATE = 2,\n  CSI_ENTRY = 3,\n  CSI_PARAM = 4,\n  CSI_INTERMEDIATE = 5,\n  CSI_IGNORE = 6,\n  SOS_PM_APC_STRING = 7,\n  OSC_STRING = 8,\n  DCS_ENTRY = 9,\n  DCS_PARAM = 10,\n  DCS_IGNORE = 11,\n  DCS_INTERMEDIATE = 12,\n  DCS_PASSTHROUGH = 13\n}\n\n/**\n * Internal actions of EscapeSequenceParser.\n */\nexport const enum ParserAction {\n  IGNORE = 0,\n  ERROR = 1,\n  PRINT = 2,\n  EXECUTE = 3,\n  OSC_START = 4,\n  OSC_PUT = 5,\n  OSC_END = 6,\n  CSI_DISPATCH = 7,\n  PARAM = 8,\n  COLLECT = 9,\n  ESC_DISPATCH = 10,\n  CLEAR = 11,\n  DCS_HOOK = 12,\n  DCS_PUT = 13,\n  DCS_UNHOOK = 14\n}\n\n/**\n * Internal states of OscParser.\n */\nexport const enum OscState {\n  START = 0,\n  ID = 1,\n  PAYLOAD = 2,\n  ABORT = 3\n}\n\n// payload limit for OSC and DCS\nexport const PAYLOAD_LIMIT = 10000000;\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IDisposable } from 'common/Types';\nimport { IDcsHandler, IParams, IHandlerCollection, IDcsParser, DcsFallbackHandlerType, ISubParserStackState } from 'common/parser/Types';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { Params } from 'common/parser/Params';\nimport { PAYLOAD_LIMIT } from 'common/parser/Constants';\n\nconst EMPTY_HANDLERS: IDcsHandler[] = [];\n\nexport class DcsParser implements IDcsParser {\n  private _handlers: IHandlerCollection<IDcsHandler> = Object.create(null);\n  private _active: IDcsHandler[] = EMPTY_HANDLERS;\n  private _ident: number = 0;\n  private _handlerFb: DcsFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public registerHandler(ident: number, handler: IDcsHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n\n  public setHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public reset(): void {\n    // force cleanup leftover handlers\n    if (this._active.length) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].unhook(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n\n  public hook(ident: number, params: IParams): void {\n    // always reset leftover handlers\n    this.reset();\n    this._ident = ident;\n    this._active = this._handlers[ident] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'HOOK', params);\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].hook(params);\n      }\n    }\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public unhook(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (!this._active.length) {\n      this._handlerFb(this._ident, 'UNHOOK', success);\n    } else {\n      let handlerResult: boolean | Promise<boolean> = false;\n      let j = this._active.length - 1;\n      let fallThrough = false;\n      if (this._stack.paused) {\n        j = this._stack.loopPosition - 1;\n        handlerResult = promiseResult;\n        fallThrough = this._stack.fallThrough;\n        this._stack.paused = false;\n      }\n      if (!fallThrough && handlerResult === false) {\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].unhook(success);\n          if (handlerResult === true) {\n            break;\n          } else if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = false;\n            return handlerResult;\n          }\n        }\n        j--;\n      }\n      // cleanup left over handlers (fallThrough for async)\n      for (; j >= 0; j--) {\n        handlerResult = this._active[j].unhook(false);\n        if (handlerResult instanceof Promise) {\n          this._stack.paused = true;\n          this._stack.loopPosition = j;\n          this._stack.fallThrough = true;\n          return handlerResult;\n        }\n      }\n    }\n    this._active = EMPTY_HANDLERS;\n    this._ident = 0;\n  }\n}\n\n// predefine empty params as [0] (ZDM)\nconst EMPTY_PARAMS = new Params();\nEMPTY_PARAMS.addParam(0);\n\n/**\n * Convenient class to create a DCS handler from a single callback function.\n * Note: The payload is currently limited to 50 MB (hardcoded).\n */\nexport class DcsHandler implements IDcsHandler {\n  private _data = '';\n  private _params: IParams = EMPTY_PARAMS;\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string, params: IParams) => boolean | Promise<boolean>) { }\n\n  public hook(params: IParams): void {\n    // since we need to preserve params until `unhook`, we have to clone it\n    // (only borrowed from parser and spans multiple parser states)\n    // perf optimization:\n    // clone only, if we have non empty params, otherwise stick with default\n    this._params = (params.length > 1 || params.params[0]) ? params.clone() : EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public unhook(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data, this._params);\n      if (ret instanceof Promise) {\n        // need to hold data and params until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._params = EMPTY_PARAMS;\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._params = EMPTY_PARAMS;\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParsingState, IDcsHandler, IEscapeSequenceParser, IParams, IOscHandler, IHandlerCollection, CsiHandlerType, OscFallbackHandlerType, IOscParser, EscHandlerType, IDcsParser, DcsFallbackHandlerType, IFunctionIdentifier, ExecuteFallbackHandlerType, CsiFallbackHandlerType, EscFallbackHandlerType, PrintHandlerType, PrintFallbackHandlerType, ExecuteHandlerType, IParserStackState, ParserStackType, ResumableHandlersType } from 'common/parser/Types';\nimport { ParserState, ParserAction } from 'common/parser/Constants';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDisposable } from 'common/Types';\nimport { Params } from 'common/parser/Params';\nimport { OscParser } from 'common/parser/OscParser';\nimport { DcsParser } from 'common/parser/DcsParser';\n\n/**\n * Table values are generated like this:\n *    index:  currentState << TableValue.INDEX_STATE_SHIFT | charCode\n *    value:  action << TableValue.TRANSITION_ACTION_SHIFT | nextState\n */\nconst enum TableAccess {\n  TRANSITION_ACTION_SHIFT = 4,\n  TRANSITION_STATE_MASK = 15,\n  INDEX_STATE_SHIFT = 8\n}\n\n/**\n * Transition table for EscapeSequenceParser.\n */\nexport class TransitionTable {\n  public table: Uint8Array;\n\n  constructor(length: number) {\n    this.table = new Uint8Array(length);\n  }\n\n  /**\n   * Set default transition.\n   * @param action default action\n   * @param next default next state\n   */\n  public setDefault(action: ParserAction, next: ParserState): void {\n    this.table.fill(action << TableAccess.TRANSITION_ACTION_SHIFT | next);\n  }\n\n  /**\n   * Add a transition to the transition table.\n   * @param code input character code\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public add(code: number, state: ParserState, action: ParserAction, next: ParserState): void {\n    this.table[state << TableAccess.INDEX_STATE_SHIFT | code] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n  }\n\n  /**\n   * Add transitions for multiple input character codes.\n   * @param codes input character code array\n   * @param state current parser state\n   * @param action parser action to be done\n   * @param next next parser state\n   */\n  public addMany(codes: number[], state: ParserState, action: ParserAction, next: ParserState): void {\n    for (let i = 0; i < codes.length; i++) {\n      this.table[state << TableAccess.INDEX_STATE_SHIFT | codes[i]] = action << TableAccess.TRANSITION_ACTION_SHIFT | next;\n    }\n  }\n}\n\n\n// Pseudo-character placeholder for printable non-ascii characters (unicode).\nconst NON_ASCII_PRINTABLE = 0xA0;\n\n\n/**\n * VT500 compatible transition table.\n * Taken from https://vt100.net/emu/dec_ansi_parser.\n */\nexport const VT500_TRANSITION_TABLE = (function (): TransitionTable {\n  const table: TransitionTable = new TransitionTable(4095);\n\n  // range macro for byte\n  const BYTE_VALUES = 256;\n  const blueprint = Array.apply(null, Array(BYTE_VALUES)).map((unused: any, i: number) => i);\n  const r = (start: number, end: number): number[] => blueprint.slice(start, end);\n\n  // Default definitions.\n  const PRINTABLES = r(0x20, 0x7f); // 0x20 (SP) included, 0x7F (DEL) excluded\n  const EXECUTABLES = r(0x00, 0x18);\n  EXECUTABLES.push(0x19);\n  EXECUTABLES.push.apply(EXECUTABLES, r(0x1c, 0x20));\n\n  const states: number[] = r(ParserState.GROUND, ParserState.DCS_PASSTHROUGH + 1);\n  let state: any;\n\n  // set default transition\n  table.setDefault(ParserAction.ERROR, ParserState.GROUND);\n  // printables\n  table.addMany(PRINTABLES, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  // global anywhere rules\n  for (state in states) {\n    table.addMany([0x18, 0x1a, 0x99, 0x9a], state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x80, 0x90), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.addMany(r(0x90, 0x98), state, ParserAction.EXECUTE, ParserState.GROUND);\n    table.add(0x9c, state, ParserAction.IGNORE, ParserState.GROUND); // ST as terminator\n    table.add(0x1b, state, ParserAction.CLEAR, ParserState.ESCAPE);  // ESC\n    table.add(0x9d, state, ParserAction.OSC_START, ParserState.OSC_STRING);  // OSC\n    table.addMany([0x98, 0x9e, 0x9f], state, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n    table.add(0x9b, state, ParserAction.CLEAR, ParserState.CSI_ENTRY);  // CSI\n    table.add(0x90, state, ParserAction.CLEAR, ParserState.DCS_ENTRY);  // DCS\n  }\n  // rules for executables and 7f\n  table.addMany(EXECUTABLES, ParserState.GROUND, ParserAction.EXECUTE, ParserState.GROUND);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE, ParserAction.EXECUTE, ParserState.ESCAPE);\n  table.add(0x7f, ParserState.ESCAPE, ParserAction.IGNORE, ParserState.ESCAPE);\n  table.addMany(EXECUTABLES, ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  table.addMany(EXECUTABLES, ParserState.CSI_ENTRY, ParserAction.EXECUTE, ParserState.CSI_ENTRY);\n  table.add(0x7f, ParserState.CSI_ENTRY, ParserAction.IGNORE, ParserState.CSI_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.CSI_PARAM, ParserAction.EXECUTE, ParserState.CSI_PARAM);\n  table.add(0x7f, ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_PARAM);\n  table.addMany(EXECUTABLES, ParserState.CSI_IGNORE, ParserAction.EXECUTE, ParserState.CSI_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.CSI_INTERMEDIATE, ParserAction.EXECUTE, ParserState.CSI_INTERMEDIATE);\n  table.add(0x7f, ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.ESCAPE_INTERMEDIATE, ParserAction.EXECUTE, ParserState.ESCAPE_INTERMEDIATE);\n  table.add(0x7f, ParserState.ESCAPE_INTERMEDIATE, ParserAction.IGNORE, ParserState.ESCAPE_INTERMEDIATE);\n  // osc\n  table.add(0x5d, ParserState.ESCAPE, ParserAction.OSC_START, ParserState.OSC_STRING);\n  table.addMany(PRINTABLES, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(0x7f, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.addMany([0x9c, 0x1b, 0x18, 0x1a, 0x07], ParserState.OSC_STRING, ParserAction.OSC_END, ParserState.GROUND);\n  table.addMany(r(0x1c, 0x20), ParserState.OSC_STRING, ParserAction.IGNORE, ParserState.OSC_STRING);\n  // sos/pm/apc does nothing\n  table.addMany([0x58, 0x5e, 0x5f], ParserState.ESCAPE, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(PRINTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.addMany(EXECUTABLES, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  table.add(0x9c, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.GROUND);\n  table.add(0x7f, ParserState.SOS_PM_APC_STRING, ParserAction.IGNORE, ParserState.SOS_PM_APC_STRING);\n  // csi entries\n  table.add(0x5b, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.CSI_ENTRY);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_ENTRY, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_ENTRY, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.CSI_PARAM, ParserAction.PARAM, ParserState.CSI_PARAM);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_PARAM, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.CSI_PARAM, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x20, 0x40), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(0x7f, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_ENTRY, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_INTERMEDIATE, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.CSI_INTERMEDIATE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.CSI_INTERMEDIATE, ParserAction.CSI_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x20, 0x30), ParserState.CSI_PARAM, ParserAction.COLLECT, ParserState.CSI_INTERMEDIATE);\n  // esc_intermediate\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.ESCAPE_INTERMEDIATE, ParserAction.COLLECT, ParserState.ESCAPE_INTERMEDIATE);\n  table.addMany(r(0x30, 0x7f), ParserState.ESCAPE_INTERMEDIATE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x30, 0x50), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x51, 0x58), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany([0x59, 0x5a, 0x5c], ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  table.addMany(r(0x60, 0x7f), ParserState.ESCAPE, ParserAction.ESC_DISPATCH, ParserState.GROUND);\n  // dcs entry\n  table.add(0x50, ParserState.ESCAPE, ParserAction.CLEAR, ParserState.DCS_ENTRY);\n  table.addMany(EXECUTABLES, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.add(0x7f, ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_ENTRY, ParserAction.IGNORE, ParserState.DCS_ENTRY);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_ENTRY, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_ENTRY, ParserAction.COLLECT, ParserState.DCS_PARAM);\n  table.addMany(EXECUTABLES, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x80), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(EXECUTABLES, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.add(0x7f, ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_PARAM);\n  table.addMany(r(0x30, 0x3c), ParserState.DCS_PARAM, ParserAction.PARAM, ParserState.DCS_PARAM);\n  table.addMany([0x3c, 0x3d, 0x3e, 0x3f], ParserState.DCS_PARAM, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_PARAM, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(EXECUTABLES, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.add(0x7f, ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x1c, 0x20), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x20, 0x30), ParserState.DCS_INTERMEDIATE, ParserAction.COLLECT, ParserState.DCS_INTERMEDIATE);\n  table.addMany(r(0x30, 0x40), ParserState.DCS_INTERMEDIATE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_INTERMEDIATE, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_PARAM, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(r(0x40, 0x7f), ParserState.DCS_ENTRY, ParserAction.DCS_HOOK, ParserState.DCS_PASSTHROUGH);\n  table.addMany(EXECUTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.addMany(PRINTABLES, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  table.add(0x7f, ParserState.DCS_PASSTHROUGH, ParserAction.IGNORE, ParserState.DCS_PASSTHROUGH);\n  table.addMany([0x1b, 0x9c, 0x18, 0x1a], ParserState.DCS_PASSTHROUGH, ParserAction.DCS_UNHOOK, ParserState.GROUND);\n  // special handling of unicode chars\n  table.add(NON_ASCII_PRINTABLE, ParserState.GROUND, ParserAction.PRINT, ParserState.GROUND);\n  table.add(NON_ASCII_PRINTABLE, ParserState.OSC_STRING, ParserAction.OSC_PUT, ParserState.OSC_STRING);\n  table.add(NON_ASCII_PRINTABLE, ParserState.CSI_IGNORE, ParserAction.IGNORE, ParserState.CSI_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_IGNORE, ParserAction.IGNORE, ParserState.DCS_IGNORE);\n  table.add(NON_ASCII_PRINTABLE, ParserState.DCS_PASSTHROUGH, ParserAction.DCS_PUT, ParserState.DCS_PASSTHROUGH);\n  return table;\n})();\n\n\n/**\n * EscapeSequenceParser.\n * This class implements the ANSI/DEC compatible parser described by\n * Paul Williams (https://vt100.net/emu/dec_ansi_parser).\n *\n * To implement custom ANSI compliant escape sequences it is not needed to\n * alter this parser, instead consider registering a custom handler.\n * For non ANSI compliant sequences change the transition table with\n * the optional `transitions` constructor argument and\n * reimplement the `parse` method.\n *\n * This parser is currently hardcoded to operate in ZDM (Zero Default Mode)\n * as suggested by the original parser, thus empty parameters are set to 0.\n * This this is not in line with the latest ECMA-48 specification\n * (ZDM was part of the early specs and got completely removed later on).\n *\n * Other than the original parser from vt100.net this parser supports\n * sub parameters in digital parameters separated by colons. Empty sub parameters\n * are set to -1 (no ZDM for sub parameters).\n *\n * About prefix and intermediate bytes:\n * This parser follows the assumptions of the vt100.net parser with these restrictions:\n * - only one prefix byte is allowed as first parameter byte, byte range 0x3c .. 0x3f\n * - max. two intermediates are respected, byte range 0x20 .. 0x2f\n * Note that this is not in line with ECMA-48 which does not limit either of those.\n * Furthermore ECMA-48 allows the prefix byte range at any param byte position. Currently\n * there are no known sequences that follow the broader definition of the specification.\n *\n * TODO: implement error recovery hook via error handler return values\n */\nexport class EscapeSequenceParser extends Disposable implements IEscapeSequenceParser {\n  public initialState: number;\n  public currentState: number;\n  public precedingCodepoint: number;\n\n  // buffers over several parse calls\n  protected _params: Params;\n  protected _collect: number;\n\n  // handler lookup containers\n  protected _printHandler: PrintHandlerType;\n  protected _executeHandlers: { [flag: number]: ExecuteHandlerType };\n  protected _csiHandlers: IHandlerCollection<CsiHandlerType>;\n  protected _escHandlers: IHandlerCollection<EscHandlerType>;\n  protected readonly _oscParser: IOscParser;\n  protected readonly _dcsParser: IDcsParser;\n  protected _errorHandler: (state: IParsingState) => IParsingState;\n\n  // fallback handlers\n  protected _printHandlerFb: PrintFallbackHandlerType;\n  protected _executeHandlerFb: ExecuteFallbackHandlerType;\n  protected _csiHandlerFb: CsiFallbackHandlerType;\n  protected _escHandlerFb: EscFallbackHandlerType;\n  protected _errorHandlerFb: (state: IParsingState) => IParsingState;\n\n  // parser stack save for async handler support\n  protected _parseStack: IParserStackState = {\n    state: ParserStackType.NONE,\n    handlers: [],\n    handlerPos: 0,\n    transition: 0,\n    chunkPos: 0\n  };\n\n  constructor(\n    protected readonly _transitions: TransitionTable = VT500_TRANSITION_TABLE\n  ) {\n    super();\n\n    this.initialState = ParserState.GROUND;\n    this.currentState = this.initialState;\n    this._params = new Params(); // defaults to 32 storable params/subparams\n    this._params.addParam(0);    // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n\n    // set default fallback handlers and handler lookup containers\n    this._printHandlerFb = (data, start, end): void => { };\n    this._executeHandlerFb = (code: number): void => { };\n    this._csiHandlerFb = (ident: number, params: IParams): void => { };\n    this._escHandlerFb = (ident: number): void => { };\n    this._errorHandlerFb = (state: IParsingState): IParsingState => state;\n    this._printHandler = this._printHandlerFb;\n    this._executeHandlers = Object.create(null);\n    this._csiHandlers = Object.create(null);\n    this._escHandlers = Object.create(null);\n    this.register(toDisposable(() => {\n      this._csiHandlers = Object.create(null);\n      this._executeHandlers = Object.create(null);\n      this._escHandlers = Object.create(null);\n    }));\n    this._oscParser = this.register(new OscParser());\n    this._dcsParser = this.register(new DcsParser());\n    this._errorHandler = this._errorHandlerFb;\n\n    // swallow 7bit ST (ESC+\\)\n    this.registerEscHandler({ final: '\\\\' }, () => true);\n  }\n\n  protected _identifier(id: IFunctionIdentifier, finalRange: number[] = [0x40, 0x7e]): number {\n    let res = 0;\n    if (id.prefix) {\n      if (id.prefix.length > 1) {\n        throw new Error('only one byte as prefix supported');\n      }\n      res = id.prefix.charCodeAt(0);\n      if (res && 0x3c > res || res > 0x3f) {\n        throw new Error('prefix must be in range 0x3c .. 0x3f');\n      }\n    }\n    if (id.intermediates) {\n      if (id.intermediates.length > 2) {\n        throw new Error('only two bytes as intermediates are supported');\n      }\n      for (let i = 0; i < id.intermediates.length; ++i) {\n        const intermediate = id.intermediates.charCodeAt(i);\n        if (0x20 > intermediate || intermediate > 0x2f) {\n          throw new Error('intermediate must be in range 0x20 .. 0x2f');\n        }\n        res <<= 8;\n        res |= intermediate;\n      }\n    }\n    if (id.final.length !== 1) {\n      throw new Error('final must be a single byte');\n    }\n    const finalCode = id.final.charCodeAt(0);\n    if (finalRange[0] > finalCode || finalCode > finalRange[1]) {\n      throw new Error(`final must be in range ${finalRange[0]} .. ${finalRange[1]}`);\n    }\n    res <<= 8;\n    res |= finalCode;\n\n    return res;\n  }\n\n  public identToString(ident: number): string {\n    const res: string[] = [];\n    while (ident) {\n      res.push(String.fromCharCode(ident & 0xFF));\n      ident >>= 8;\n    }\n    return res.reverse().join('');\n  }\n\n  public setPrintHandler(handler: PrintHandlerType): void {\n    this._printHandler = handler;\n  }\n  public clearPrintHandler(): void {\n    this._printHandler = this._printHandlerFb;\n  }\n\n  public registerEscHandler(id: IFunctionIdentifier, handler: EscHandlerType): IDisposable {\n    const ident = this._identifier(id, [0x30, 0x7e]);\n    if (this._escHandlers[ident] === undefined) {\n      this._escHandlers[ident] = [];\n    }\n    const handlerList = this._escHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearEscHandler(id: IFunctionIdentifier): void {\n    if (this._escHandlers[this._identifier(id, [0x30, 0x7e])]) delete this._escHandlers[this._identifier(id, [0x30, 0x7e])];\n  }\n  public setEscHandlerFallback(handler: EscFallbackHandlerType): void {\n    this._escHandlerFb = handler;\n  }\n\n  public setExecuteHandler(flag: string, handler: ExecuteHandlerType): void {\n    this._executeHandlers[flag.charCodeAt(0)] = handler;\n  }\n  public clearExecuteHandler(flag: string): void {\n    if (this._executeHandlers[flag.charCodeAt(0)]) delete this._executeHandlers[flag.charCodeAt(0)];\n  }\n  public setExecuteHandlerFallback(handler: ExecuteFallbackHandlerType): void {\n    this._executeHandlerFb = handler;\n  }\n\n  public registerCsiHandler(id: IFunctionIdentifier, handler: CsiHandlerType): IDisposable {\n    const ident = this._identifier(id);\n    if (this._csiHandlers[ident] === undefined) {\n      this._csiHandlers[ident] = [];\n    }\n    const handlerList = this._csiHandlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearCsiHandler(id: IFunctionIdentifier): void {\n    if (this._csiHandlers[this._identifier(id)]) delete this._csiHandlers[this._identifier(id)];\n  }\n  public setCsiHandlerFallback(callback: (ident: number, params: IParams) => void): void {\n    this._csiHandlerFb = callback;\n  }\n\n  public registerDcsHandler(id: IFunctionIdentifier, handler: IDcsHandler): IDisposable {\n    return this._dcsParser.registerHandler(this._identifier(id), handler);\n  }\n  public clearDcsHandler(id: IFunctionIdentifier): void {\n    this._dcsParser.clearHandler(this._identifier(id));\n  }\n  public setDcsHandlerFallback(handler: DcsFallbackHandlerType): void {\n    this._dcsParser.setHandlerFallback(handler);\n  }\n\n  public registerOscHandler(ident: number, handler: IOscHandler): IDisposable {\n    return this._oscParser.registerHandler(ident, handler);\n  }\n  public clearOscHandler(ident: number): void {\n    this._oscParser.clearHandler(ident);\n  }\n  public setOscHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._oscParser.setHandlerFallback(handler);\n  }\n\n  public setErrorHandler(callback: (state: IParsingState) => IParsingState): void {\n    this._errorHandler = callback;\n  }\n  public clearErrorHandler(): void {\n    this._errorHandler = this._errorHandlerFb;\n  }\n\n  /**\n   * Reset parser to initial values.\n   *\n   * This can also be used to lift the improper continuation error condition\n   * when dealing with async handlers. Use this only as a last resort to silence\n   * that error when the terminal has no pending data to be processed. Note that\n   * the interrupted async handler might continue its work in the future messing\n   * up the terminal state even further.\n   */\n  public reset(): void {\n    this.currentState = this.initialState;\n    this._oscParser.reset();\n    this._dcsParser.reset();\n    this._params.reset();\n    this._params.addParam(0); // ZDM\n    this._collect = 0;\n    this.precedingCodepoint = 0;\n    // abort pending continuation from async handler\n    // Here the RESET type indicates, that the next parse call will\n    // ignore any saved stack, instead continues sync with next codepoint from GROUND\n    if (this._parseStack.state !== ParserStackType.NONE) {\n      this._parseStack.state = ParserStackType.RESET;\n      this._parseStack.handlers = []; // also release handlers ref\n    }\n  }\n\n  /**\n   * Async parse support.\n   */\n  protected _preserveStack(\n    state: ParserStackType,\n    handlers: ResumableHandlersType,\n    handlerPos: number,\n    transition: number,\n    chunkPos: number\n  ): void {\n    this._parseStack.state = state;\n    this._parseStack.handlers = handlers;\n    this._parseStack.handlerPos = handlerPos;\n    this._parseStack.transition = transition;\n    this._parseStack.chunkPos = chunkPos;\n  }\n\n  /**\n   * Parse UTF32 codepoints in `data` up to `length`.\n   *\n   * Note: For several actions with high data load the parsing is optimized\n   * by using local read ahead loops with hardcoded conditions to\n   * avoid costly table lookups. Make sure that any change of table values\n   * will be reflected in the loop conditions as well and vice versa.\n   * Affected states/actions:\n   * - GROUND:PRINT\n   * - CSI_PARAM:PARAM\n   * - DCS_PARAM:PARAM\n   * - OSC_STRING:OSC_PUT\n   * - DCS_PASSTHROUGH:DCS_PUT\n   *\n   * Note on asynchronous handler support:\n   * Any handler returning a promise will be treated as asynchronous.\n   * To keep the in-band blocking working for async handlers, `parse` pauses execution,\n   * creates a stack save and returns the promise to the caller.\n   * For proper continuation of the paused state it is important\n   * to await the promise resolving. On resolve the parse must be repeated\n   * with the same chunk of data and the resolved value in `promiseResult`\n   * until no promise is returned.\n   *\n   * Important: With only sync handlers defined, parsing is completely synchronous as well.\n   * As soon as an async handler is involved, synchronous parsing is not possible anymore.\n   *\n   * Boilerplate for proper parsing of multiple chunks with async handlers:\n   *\n   * ```typescript\n   * async function parseMultipleChunks(chunks: Uint32Array[]): Promise<void> {\n   *   for (const chunk of chunks) {\n   *     let result: void | Promise<boolean>;\n   *     let prev: boolean | undefined;\n   *     while (result = parser.parse(chunk, chunk.length, prev)) {\n   *       prev = await result;\n   *     }\n   *   }\n   *   // finished parsing all chunks...\n   * }\n   * ```\n   */\n  public parse(data: Uint32Array, length: number, promiseResult?: boolean): void | Promise<boolean> {\n    let code = 0;\n    let transition = 0;\n    let start = 0;\n    let handlerResult: void | boolean | Promise<boolean>;\n\n    // resume from async handler\n    if (this._parseStack.state) {\n      // allow sync parser reset even in continuation mode\n      // Note: can be used to recover parser from improper continuation error below\n      if (this._parseStack.state === ParserStackType.RESET) {\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1; // continue with next codepoint in GROUND\n      } else {\n        if (promiseResult === undefined || this._parseStack.state === ParserStackType.FAIL) {\n          /**\n           * Reject further parsing on improper continuation after pausing. This is a really bad\n           * condition with screwed up execution order and prolly messed up terminal state,\n           * therefore we exit hard with an exception and reject any further parsing.\n           *\n           * Note: With `Terminal.write` usage this exception should never occur, as the top level\n           * calls are guaranteed to handle async conditions properly. If you ever encounter this\n           * exception in your terminal integration it indicates, that you injected data chunks to\n           * `InputHandler.parse` or `EscapeSequenceParser.parse` synchronously without waiting for\n           * continuation of a running async handler.\n           *\n           * It is possible to get rid of this error by calling `reset`. But dont rely on that, as\n           * the pending async handler still might mess up the terminal later. Instead fix the\n           * faulty async handling, so this error will not be thrown anymore.\n           */\n          this._parseStack.state = ParserStackType.FAIL;\n          throw new Error('improper continuation due to previous async handler, giving up parsing');\n        }\n\n        // we have to resume the old handler loop if:\n        // - return value of the promise was `false`\n        // - handlers are not exhausted yet\n        const handlers = this._parseStack.handlers;\n        let handlerPos = this._parseStack.handlerPos - 1;\n        switch (this._parseStack.state) {\n          case ParserStackType.CSI:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as CsiHandlerType[])[handlerPos](this._params);\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.ESC:\n            if (promiseResult === false && handlerPos > -1) {\n              for (; handlerPos >= 0; handlerPos--) {\n                handlerResult = (handlers as EscHandlerType[])[handlerPos]();\n                if (handlerResult === true) {\n                  break;\n                } else if (handlerResult instanceof Promise) {\n                  this._parseStack.handlerPos = handlerPos;\n                  return handlerResult;\n                }\n              }\n            }\n            this._parseStack.handlers = [];\n            break;\n          case ParserStackType.DCS:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n          case ParserStackType.OSC:\n            code = data[this._parseStack.chunkPos];\n            handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a, promiseResult);\n            if (handlerResult) {\n              return handlerResult;\n            }\n            if (code === 0x1b) this._parseStack.transition |= ParserState.ESCAPE;\n            this._params.reset();\n            this._params.addParam(0); // ZDM\n            this._collect = 0;\n            break;\n        }\n        // cleanup before continuing with the main sync loop\n        this._parseStack.state = ParserStackType.NONE;\n        start = this._parseStack.chunkPos + 1;\n        this.precedingCodepoint = 0;\n        this.currentState = this._parseStack.transition & TableAccess.TRANSITION_STATE_MASK;\n      }\n    }\n\n    // continue with main sync loop\n\n    // process input string\n    for (let i = start; i < length; ++i) {\n      code = data[i];\n\n      // normal transition & action lookup\n      transition = this._transitions.table[this.currentState << TableAccess.INDEX_STATE_SHIFT | (code < 0xa0 ? code : NON_ASCII_PRINTABLE)];\n      switch (transition >> TableAccess.TRANSITION_ACTION_SHIFT) {\n        case ParserAction.PRINT:\n          // read ahead with loop unrolling\n          // Note: 0x20 (SP) is included, 0x7F (DEL) is excluded\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n            if (++j >= length || (code = data[j]) < 0x20 || (code > 0x7e && code < NON_ASCII_PRINTABLE)) {\n              this._printHandler(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.EXECUTE:\n          if (this._executeHandlers[code]) this._executeHandlers[code]();\n          else this._executeHandlerFb(code);\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.IGNORE:\n          break;\n        case ParserAction.ERROR:\n          const inject: IParsingState = this._errorHandler(\n            {\n              position: i,\n              code,\n              currentState: this.currentState,\n              collect: this._collect,\n              params: this._params,\n              abort: false\n            });\n          if (inject.abort) return;\n          // inject values: currently not implemented\n          break;\n        case ParserAction.CSI_DISPATCH:\n          // Trigger CSI Handler\n          const handlers = this._csiHandlers[this._collect << 8 | code];\n          let j = handlers ? handlers.length - 1 : -1;\n          for (; j >= 0; j--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlers[j](this._params);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.CSI, handlers, j, transition, i);\n              return handlerResult;\n            }\n          }\n          if (j < 0) {\n            this._csiHandlerFb(this._collect << 8 | code, this._params);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.PARAM:\n          // inner loop: digits (0x30 - 0x39) and ; (0x3b) and : (0x3a)\n          do {\n            switch (code) {\n              case 0x3b:\n                this._params.addParam(0);  // ZDM\n                break;\n              case 0x3a:\n                this._params.addSubParam(-1);\n                break;\n              default:  // 0x30 - 0x39\n                this._params.addDigit(code - 48);\n            }\n          } while (++i < length && (code = data[i]) > 0x2f && code < 0x3c);\n          i--;\n          break;\n        case ParserAction.COLLECT:\n          this._collect <<= 8;\n          this._collect |= code;\n          break;\n        case ParserAction.ESC_DISPATCH:\n          const handlersEsc = this._escHandlers[this._collect << 8 | code];\n          let jj = handlersEsc ? handlersEsc.length - 1 : -1;\n          for (; jj >= 0; jj--) {\n            // true means success and to stop bubbling\n            // a promise indicates an async handler that needs to finish before progressing\n            handlerResult = handlersEsc[jj]();\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._preserveStack(ParserStackType.ESC, handlersEsc, jj, transition, i);\n              return handlerResult;\n            }\n          }\n          if (jj < 0) {\n            this._escHandlerFb(this._collect << 8 | code);\n          }\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.CLEAR:\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          break;\n        case ParserAction.DCS_HOOK:\n          this._dcsParser.hook(this._collect << 8 | code, this._params);\n          break;\n        case ParserAction.DCS_PUT:\n          // inner loop - exit DCS_PUT: 0x18, 0x1a, 0x1b, 0x7f, 0x80 - 0x9f\n          // unhook triggered by: 0x1b, 0x9c (success) and 0x18, 0x1a (abort)\n          for (let j = i + 1; ; ++j) {\n            if (j >= length || (code = data[j]) === 0x18 || code === 0x1a || code === 0x1b || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._dcsParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.DCS_UNHOOK:\n          handlerResult = this._dcsParser.unhook(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.DCS, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n        case ParserAction.OSC_START:\n          this._oscParser.start();\n          break;\n        case ParserAction.OSC_PUT:\n          // inner loop: 0x20 (SP) included, 0x7F (DEL) included\n          for (let j = i + 1; ; j++) {\n            if (j >= length || (code = data[j]) < 0x20 || (code > 0x7f && code < NON_ASCII_PRINTABLE)) {\n              this._oscParser.put(data, i, j);\n              i = j - 1;\n              break;\n            }\n          }\n          break;\n        case ParserAction.OSC_END:\n          handlerResult = this._oscParser.end(code !== 0x18 && code !== 0x1a);\n          if (handlerResult) {\n            this._preserveStack(ParserStackType.OSC, [], 0, transition, i);\n            return handlerResult;\n          }\n          if (code === 0x1b) transition |= ParserState.ESCAPE;\n          this._params.reset();\n          this._params.addParam(0); // ZDM\n          this._collect = 0;\n          this.precedingCodepoint = 0;\n          break;\n      }\n      this.currentState = transition & TableAccess.TRANSITION_STATE_MASK;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IOscHandler, IHandlerCollection, OscFallbackHandlerType, IOscParser, ISubParserStackState } from 'common/parser/Types';\nimport { OscState, PAYLOAD_LIMIT } from 'common/parser/Constants';\nimport { utf32ToString } from 'common/input/TextDecoder';\nimport { IDisposable } from 'common/Types';\n\nconst EMPTY_HANDLERS: IOscHandler[] = [];\n\nexport class OscParser implements IOscParser {\n  private _state = OscState.START;\n  private _active = EMPTY_HANDLERS;\n  private _id = -1;\n  private _handlers: IHandlerCollection<IOscHandler> = Object.create(null);\n  private _handlerFb: OscFallbackHandlerType = () => { };\n  private _stack: ISubParserStackState = {\n    paused: false,\n    loopPosition: 0,\n    fallThrough: false\n  };\n\n  public registerHandler(ident: number, handler: IOscHandler): IDisposable {\n    if (this._handlers[ident] === undefined) {\n      this._handlers[ident] = [];\n    }\n    const handlerList = this._handlers[ident];\n    handlerList.push(handler);\n    return {\n      dispose: () => {\n        const handlerIndex = handlerList.indexOf(handler);\n        if (handlerIndex !== -1) {\n          handlerList.splice(handlerIndex, 1);\n        }\n      }\n    };\n  }\n  public clearHandler(ident: number): void {\n    if (this._handlers[ident]) delete this._handlers[ident];\n  }\n  public setHandlerFallback(handler: OscFallbackHandlerType): void {\n    this._handlerFb = handler;\n  }\n\n  public dispose(): void {\n    this._handlers = Object.create(null);\n    this._handlerFb = () => { };\n    this._active = EMPTY_HANDLERS;\n  }\n\n  public reset(): void {\n    // force cleanup handlers if payload was already sent\n    if (this._state === OscState.PAYLOAD) {\n      for (let j = this._stack.paused ? this._stack.loopPosition - 1 : this._active.length - 1; j >= 0; --j) {\n        this._active[j].end(false);\n      }\n    }\n    this._stack.paused = false;\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n\n  private _start(): void {\n    this._active = this._handlers[this._id] || EMPTY_HANDLERS;\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'START');\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].start();\n      }\n    }\n  }\n\n  private _put(data: Uint32Array, start: number, end: number): void {\n    if (!this._active.length) {\n      this._handlerFb(this._id, 'PUT', utf32ToString(data, start, end));\n    } else {\n      for (let j = this._active.length - 1; j >= 0; j--) {\n        this._active[j].put(data, start, end);\n      }\n    }\n  }\n\n  public start(): void {\n    // always reset leftover handlers\n    this.reset();\n    this._state = OscState.ID;\n  }\n\n  /**\n   * Put data to current OSC command.\n   * Expects the identifier of the OSC command in the form\n   * OSC id ; payload ST/BEL\n   * Payload chunks are not further processed and get\n   * directly passed to the handlers.\n   */\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._state === OscState.ABORT) {\n      return;\n    }\n    if (this._state === OscState.ID) {\n      while (start < end) {\n        const code = data[start++];\n        if (code === 0x3b) {\n          this._state = OscState.PAYLOAD;\n          this._start();\n          break;\n        }\n        if (code < 0x30 || 0x39 < code) {\n          this._state = OscState.ABORT;\n          return;\n        }\n        if (this._id === -1) {\n          this._id = 0;\n        }\n        this._id = this._id * 10 + code - 48;\n      }\n    }\n    if (this._state === OscState.PAYLOAD && end - start > 0) {\n      this._put(data, start, end);\n    }\n  }\n\n  /**\n   * Indicates end of an OSC command.\n   * Whether the OSC got aborted or finished normally\n   * is indicated by `success`.\n   */\n  public end(success: boolean, promiseResult: boolean = true): void | Promise<boolean> {\n    if (this._state === OscState.START) {\n      return;\n    }\n    // do nothing if command was faulty\n    if (this._state !== OscState.ABORT) {\n      // if we are still in ID state and get an early end\n      // means that the command has no payload thus we still have\n      // to announce START and send END right after\n      if (this._state === OscState.ID) {\n        this._start();\n      }\n\n      if (!this._active.length) {\n        this._handlerFb(this._id, 'END', success);\n      } else {\n        let handlerResult: boolean | Promise<boolean> = false;\n        let j = this._active.length - 1;\n        let fallThrough = false;\n        if (this._stack.paused) {\n          j = this._stack.loopPosition - 1;\n          handlerResult = promiseResult;\n          fallThrough = this._stack.fallThrough;\n          this._stack.paused = false;\n        }\n        if (!fallThrough && handlerResult === false) {\n          for (; j >= 0; j--) {\n            handlerResult = this._active[j].end(success);\n            if (handlerResult === true) {\n              break;\n            } else if (handlerResult instanceof Promise) {\n              this._stack.paused = true;\n              this._stack.loopPosition = j;\n              this._stack.fallThrough = false;\n              return handlerResult;\n            }\n          }\n          j--;\n        }\n        // cleanup left over handlers\n        // we always have to call .end for proper cleanup,\n        // here we use `success` to indicate whether a handler should execute\n        for (; j >= 0; j--) {\n          handlerResult = this._active[j].end(false);\n          if (handlerResult instanceof Promise) {\n            this._stack.paused = true;\n            this._stack.loopPosition = j;\n            this._stack.fallThrough = true;\n            return handlerResult;\n          }\n        }\n      }\n\n    }\n    this._active = EMPTY_HANDLERS;\n    this._id = -1;\n    this._state = OscState.START;\n  }\n}\n\n/**\n * Convenient class to allow attaching string based handler functions\n * as OSC handlers.\n */\nexport class OscHandler implements IOscHandler {\n  private _data = '';\n  private _hitLimit: boolean = false;\n\n  constructor(private _handler: (data: string) => boolean | Promise<boolean>) { }\n\n  public start(): void {\n    this._data = '';\n    this._hitLimit = false;\n  }\n\n  public put(data: Uint32Array, start: number, end: number): void {\n    if (this._hitLimit) {\n      return;\n    }\n    this._data += utf32ToString(data, start, end);\n    if (this._data.length > PAYLOAD_LIMIT) {\n      this._data = '';\n      this._hitLimit = true;\n    }\n  }\n\n  public end(success: boolean): boolean | Promise<boolean> {\n    let ret: boolean | Promise<boolean> = false;\n    if (this._hitLimit) {\n      ret = false;\n    } else if (success) {\n      ret = this._handler(this._data);\n      if (ret instanceof Promise) {\n        // need to hold data until `ret` got resolved\n        // dont care for errors, data will be freed anyway on next start\n        return ret.then(res => {\n          this._data = '';\n          this._hitLimit = false;\n          return res;\n        });\n      }\n    }\n    this._data = '';\n    this._hitLimit = false;\n    return ret;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IParams, ParamsArray } from 'common/parser/Types';\n\n// max value supported for a single param/subparam (clamped to positive int32 range)\nconst MAX_VALUE = 0x7FFFFFFF;\n// max allowed subparams for a single sequence (hardcoded limitation)\nconst MAX_SUBPARAMS = 256;\n\n/**\n * Params storage class.\n * This type is used by the parser to accumulate sequence parameters and sub parameters\n * and transmit them to the input handler actions.\n *\n * NOTES:\n *  - params object for action handlers is borrowed, use `.toArray` or `.clone` to get a copy\n *  - never read beyond `params.length - 1` (likely to contain arbitrary data)\n *  - `.getSubParams` returns a borrowed typed array, use `.getSubParamsAll` for cloned sub params\n *  - hardcoded limitations:\n *    - max. value for a single (sub) param is 2^31 - 1 (greater values are clamped to that)\n *    - max. 256 sub params possible\n *    - negative values are not allowed beside -1 (placeholder for default value)\n *\n * About ZDM (Zero Default Mode):\n * ZDM is not orchestrated by this class. If the parser is in ZDM,\n * it should add 0 for empty params, otherwise -1. This does not apply\n * to subparams, empty subparams should always be added with -1.\n */\nexport class Params implements IParams {\n  // params store and length\n  public params: Int32Array;\n  public length: number;\n\n  // sub params store and length\n  protected _subParams: Int32Array;\n  protected _subParamsLength: number;\n\n  // sub params offsets from param: param idx --> [start, end] offset\n  private _subParamsIdx: Uint16Array;\n  private _rejectDigits: boolean;\n  private _rejectSubDigits: boolean;\n  private _digitIsSub: boolean;\n\n  /**\n   * Create a `Params` type from JS array representation.\n   */\n  public static fromArray(values: ParamsArray): Params {\n    const params = new Params();\n    if (!values.length) {\n      return params;\n    }\n    // skip leading sub params\n    for (let i = (Array.isArray(values[0])) ? 1 : 0; i < values.length; ++i) {\n      const value = values[i];\n      if (Array.isArray(value)) {\n        for (let k = 0; k < value.length; ++k) {\n          params.addSubParam(value[k]);\n        }\n      } else {\n        params.addParam(value);\n      }\n    }\n    return params;\n  }\n\n  /**\n   * @param maxLength max length of storable parameters\n   * @param maxSubParamsLength max length of storable sub parameters\n   */\n  constructor(public maxLength: number = 32, public maxSubParamsLength: number = 32) {\n    if (maxSubParamsLength > MAX_SUBPARAMS) {\n      throw new Error('maxSubParamsLength must not be greater than 256');\n    }\n    this.params = new Int32Array(maxLength);\n    this.length = 0;\n    this._subParams = new Int32Array(maxSubParamsLength);\n    this._subParamsLength = 0;\n    this._subParamsIdx = new Uint16Array(maxLength);\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Clone object.\n   */\n  public clone(): Params {\n    const newParams = new Params(this.maxLength, this.maxSubParamsLength);\n    newParams.params.set(this.params);\n    newParams.length = this.length;\n    newParams._subParams.set(this._subParams);\n    newParams._subParamsLength = this._subParamsLength;\n    newParams._subParamsIdx.set(this._subParamsIdx);\n    newParams._rejectDigits = this._rejectDigits;\n    newParams._rejectSubDigits = this._rejectSubDigits;\n    newParams._digitIsSub = this._digitIsSub;\n    return newParams;\n  }\n\n  /**\n   * Get a JS array representation of the current parameters and sub parameters.\n   * The array is structured as follows:\n   *    sequence: \"1;2:3:4;5::6\"\n   *    array   : [1, 2, [3, 4], 5, [-1, 6]]\n   */\n  public toArray(): ParamsArray {\n    const res: ParamsArray = [];\n    for (let i = 0; i < this.length; ++i) {\n      res.push(this.params[i]);\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        res.push(Array.prototype.slice.call(this._subParams, start, end));\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Reset to initial empty state.\n   */\n  public reset(): void {\n    this.length = 0;\n    this._subParamsLength = 0;\n    this._rejectDigits = false;\n    this._rejectSubDigits = false;\n    this._digitIsSub = false;\n  }\n\n  /**\n   * Add a parameter value.\n   * `Params` only stores up to `maxLength` parameters, any later\n   * parameter will be ignored.\n   * Note: VT devices only stored up to 16 values, xterm seems to\n   * store up to 30.\n   */\n  public addParam(value: number): void {\n    this._digitIsSub = false;\n    if (this.length >= this.maxLength) {\n      this._rejectDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParamsIdx[this.length] = this._subParamsLength << 8 | this._subParamsLength;\n    this.params[this.length++] = value > MAX_VALUE ? MAX_VALUE : value;\n  }\n\n  /**\n   * Add a sub parameter value.\n   * The sub parameter is automatically associated with the last parameter value.\n   * Thus it is not possible to add a subparameter without any parameter added yet.\n   * `Params` only stores up to `subParamsLength` sub parameters, any later\n   * sub parameter will be ignored.\n   */\n  public addSubParam(value: number): void {\n    this._digitIsSub = true;\n    if (!this.length) {\n      return;\n    }\n    if (this._rejectDigits || this._subParamsLength >= this.maxSubParamsLength) {\n      this._rejectSubDigits = true;\n      return;\n    }\n    if (value < -1) {\n      throw new Error('values lesser than -1 are not allowed');\n    }\n    this._subParams[this._subParamsLength++] = value > MAX_VALUE ? MAX_VALUE : value;\n    this._subParamsIdx[this.length - 1]++;\n  }\n\n  /**\n   * Whether parameter at index `idx` has sub parameters.\n   */\n  public hasSubParams(idx: number): boolean {\n    return ((this._subParamsIdx[idx] & 0xFF) - (this._subParamsIdx[idx] >> 8) > 0);\n  }\n\n  /**\n   * Return sub parameters for parameter at index `idx`.\n   * Note: The values are borrowed, thus you need to copy\n   * the values if you need to hold them in nonlocal scope.\n   */\n  public getSubParams(idx: number): Int32Array | null {\n    const start = this._subParamsIdx[idx] >> 8;\n    const end = this._subParamsIdx[idx] & 0xFF;\n    if (end - start > 0) {\n      return this._subParams.subarray(start, end);\n    }\n    return null;\n  }\n\n  /**\n   * Return all sub parameters as {idx: subparams} mapping.\n   * Note: The values are not borrowed.\n   */\n  public getSubParamsAll(): {[idx: number]: Int32Array} {\n    const result: {[idx: number]: Int32Array} = {};\n    for (let i = 0; i < this.length; ++i) {\n      const start = this._subParamsIdx[i] >> 8;\n      const end = this._subParamsIdx[i] & 0xFF;\n      if (end - start > 0) {\n        result[i] = this._subParams.slice(start, end);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Add a single digit value to current parameter.\n   * This is used by the parser to account digits on a char by char basis.\n   */\n  public addDigit(value: number): void {\n    let length;\n    if (this._rejectDigits\n      || !(length = this._digitIsSub ? this._subParamsLength : this.length)\n      || (this._digitIsSub && this._rejectSubDigits)\n    ) {\n      return;\n    }\n\n    const store = this._digitIsSub ? this._subParams : this.params;\n    const cur = store[length - 1];\n    store[length - 1] = ~cur ? Math.min(cur * 10 + value, MAX_VALUE) : value;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ITerminalAddon, IDisposable, Terminal } from 'xterm';\n\nexport interface ILoadedAddon {\n  instance: ITerminalAddon;\n  dispose: () => void;\n  isDisposed: boolean;\n}\n\nexport class AddonManager implements IDisposable {\n  protected _addons: ILoadedAddon[] = [];\n\n  public dispose(): void {\n    for (let i = this._addons.length - 1; i >= 0; i--) {\n      this._addons[i].instance.dispose();\n    }\n  }\n\n  public loadAddon(terminal: Terminal, instance: ITerminalAddon): void {\n    const loadedAddon: ILoadedAddon = {\n      instance,\n      dispose: instance.dispose,\n      isDisposed: false\n    };\n    this._addons.push(loadedAddon);\n    instance.dispose = () => this._wrappedAddonDispose(loadedAddon);\n    instance.activate(terminal as any);\n  }\n\n  private _wrappedAddonDispose(loadedAddon: ILoadedAddon): void {\n    if (loadedAddon.isDisposed) {\n      // Do nothing if already disposed\n      return;\n    }\n    let index = -1;\n    for (let i = 0; i < this._addons.length; i++) {\n      if (this._addons[i] === loadedAddon) {\n        index = i;\n        break;\n      }\n    }\n    if (index === -1) {\n      throw new Error('Could not dispose an addon that has not been loaded');\n    }\n    loadedAddon.isDisposed = true;\n    loadedAddon.dispose.apply(loadedAddon.instance);\n    this._addons.splice(index, 1);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferLine as IBufferLineApi, IBufferCell as IBufferCellApi } from 'xterm';\nimport { IBuffer } from 'common/buffer/Types';\nimport { BufferLineApiView } from 'common/public/BufferLineApiView';\nimport { CellData } from 'common/buffer/CellData';\n\nexport class BufferApiView implements IBufferApi {\n  constructor(\n    private _buffer: IBuffer,\n    public readonly type: 'normal' | 'alternate'\n  ) { }\n\n  public init(buffer: IBuffer): BufferApiView {\n    this._buffer = buffer;\n    return this;\n  }\n\n  public get cursorY(): number { return this._buffer.y; }\n  public get cursorX(): number { return this._buffer.x; }\n  public get viewportY(): number { return this._buffer.ydisp; }\n  public get baseY(): number { return this._buffer.ybase; }\n  public get length(): number { return this._buffer.lines.length; }\n  public getLine(y: number): IBufferLineApi | undefined {\n    const line = this._buffer.lines.get(y);\n    if (!line) {\n      return undefined;\n    }\n    return new BufferLineApiView(line);\n  }\n  public getNullCell(): IBufferCellApi { return new CellData(); }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { CellData } from 'common/buffer/CellData';\nimport { IBufferLine, ICellData } from 'common/Types';\nimport { IBufferCell as IBufferCellApi, IBufferLine as IBufferLineApi } from 'xterm';\n\nexport class BufferLineApiView implements IBufferLineApi {\n  constructor(private _line: IBufferLine) { }\n\n  public get isWrapped(): boolean { return this._line.isWrapped; }\n  public get length(): number { return this._line.length; }\n  public getCell(x: number, cell?: IBufferCellApi): IBufferCellApi | undefined {\n    if (x < 0 || x >= this._line.length) {\n      return undefined;\n    }\n\n    if (cell) {\n      this._line.loadCell(x, cell as ICellData);\n      return cell;\n    }\n    return this._line.loadCell(x, new CellData());\n  }\n  public translateToString(trimRight?: boolean, startColumn?: number, endColumn?: number): string {\n    return this._line.translateToString(trimRight, startColumn, endColumn);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IBuffer as IBufferApi, IBufferNamespace as IBufferNamespaceApi } from 'xterm';\nimport { BufferApiView } from 'common/public/BufferApiView';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreTerminal } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\nexport class BufferNamespaceApi extends Disposable implements IBufferNamespaceApi {\n  private _normal: BufferApiView;\n  private _alternate: BufferApiView;\n\n  private readonly _onBufferChange = this.register(new EventEmitter<IBufferApi>());\n  public readonly onBufferChange = this._onBufferChange.event;\n\n  constructor(private _core: ICoreTerminal) {\n    super();\n    this._normal = new BufferApiView(this._core.buffers.normal, 'normal');\n    this._alternate = new BufferApiView(this._core.buffers.alt, 'alternate');\n    this._core.buffers.onBufferActivate(() => this._onBufferChange.fire(this.active));\n  }\n  public get active(): IBufferApi {\n    if (this._core.buffers.active === this._core.buffers.normal) { return this.normal; }\n    if (this._core.buffers.active === this._core.buffers.alt) { return this.alternate; }\n    throw new Error('Active buffer is neither normal nor alternate');\n  }\n  public get normal(): IBufferApi {\n    return this._normal.init(this._core.buffers.normal);\n  }\n  public get alternate(): IBufferApi {\n    return this._alternate.init(this._core.buffers.alt);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IParams } from 'common/parser/Types';\nimport { IDisposable, IFunctionIdentifier, IParser } from 'xterm';\nimport { ICoreTerminal } from 'common/Types';\n\nexport class ParserApi implements IParser {\n  constructor(private _core: ICoreTerminal) { }\n\n  public registerCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerCsiHandler(id, (params: IParams) => callback(params.toArray()));\n  }\n  public addCsiHandler(id: IFunctionIdentifier, callback: (params: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerCsiHandler(id, callback);\n  }\n  public registerDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerDcsHandler(id, (data: string, params: IParams) => callback(data, params.toArray()));\n  }\n  public addDcsHandler(id: IFunctionIdentifier, callback: (data: string, param: (number | number[])[]) => boolean | Promise<boolean>): IDisposable {\n    return this.registerDcsHandler(id, callback);\n  }\n  public registerEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerEscHandler(id, handler);\n  }\n  public addEscHandler(id: IFunctionIdentifier, handler: () => boolean | Promise<boolean>): IDisposable {\n    return this.registerEscHandler(id, handler);\n  }\n  public registerOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this._core.registerOscHandler(ident, callback);\n  }\n  public addOscHandler(ident: number, callback: (data: string) => boolean | Promise<boolean>): IDisposable {\n    return this.registerOscHandler(ident, callback);\n  }\n}\n", "/**\n * Copyright (c) 2021 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICoreTerminal } from 'common/Types';\nimport { IUnicodeHandling, IUnicodeVersionProvider } from 'xterm';\n\nexport class UnicodeApi implements IUnicodeHandling {\n  constructor(private _core: ICoreTerminal) { }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._core.unicodeService.register(provider);\n  }\n\n  public get versions(): string[] {\n    return this._core.unicodeService.versions;\n  }\n\n  public get activeVersion(): string {\n    return this._core.unicodeService.activeVersion;\n  }\n\n  public set activeVersion(version: string) {\n    this._core.unicodeService.activeVersion = version;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IAttributeData, IBufferLine, ScrollSource } from 'common/Types';\nimport { BufferSet } from 'common/buffer/BufferSet';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IBufferService, IOptionsService } from 'common/services/Services';\n\nexport const MINIMUM_COLS = 2; // Less than 2 can mess with wide chars\nexport const MINIMUM_ROWS = 1;\n\nexport class BufferService extends Disposable implements IBufferService {\n  public serviceBrand: any;\n\n  public cols: number;\n  public rows: number;\n  public buffers: IBufferSet;\n  /** Whether the user is scrolling (locks the scroll position) */\n  public isUserScrolling: boolean = false;\n\n  private readonly _onResize = this.register(new EventEmitter<{ cols: number, rows: number }>());\n  public readonly onResize = this._onResize.event;\n  private readonly _onScroll = this.register(new EventEmitter<number>());\n  public readonly onScroll = this._onScroll.event;\n\n  public get buffer(): IBuffer { return this.buffers.active; }\n\n  /** An IBufferline to clone/copy from for new blank lines */\n  private _cachedBlankLine: IBufferLine | undefined;\n\n  constructor(@IOptionsService optionsService: IOptionsService) {\n    super();\n    this.cols = Math.max(optionsService.rawOptions.cols || 0, MINIMUM_COLS);\n    this.rows = Math.max(optionsService.rawOptions.rows || 0, MINIMUM_ROWS);\n    this.buffers = this.register(new BufferSet(optionsService, this));\n  }\n\n  public resize(cols: number, rows: number): void {\n    this.cols = cols;\n    this.rows = rows;\n    this.buffers.resize(cols, rows);\n    // TODO: This doesn't fire when scrollback changes - add a resize event to BufferSet and forward\n    //       event\n    this._onResize.fire({ cols, rows });\n  }\n\n  public reset(): void {\n    this.buffers.reset();\n    this.isUserScrolling = false;\n  }\n\n  /**\n   * Scroll the terminal down 1 row, creating a blank line.\n   * @param eraseAttr The attribute data to use the for blank line.\n   * @param isWrapped Whether the new line is wrapped from the previous line.\n   */\n  public scroll(eraseAttr: IAttributeData, isWrapped: boolean = false): void {\n    const buffer = this.buffer;\n\n    let newLine: IBufferLine | undefined;\n    newLine = this._cachedBlankLine;\n    if (!newLine || newLine.length !== this.cols || newLine.getFg(0) !== eraseAttr.fg || newLine.getBg(0) !== eraseAttr.bg) {\n      newLine = buffer.getBlankLine(eraseAttr, isWrapped);\n      this._cachedBlankLine = newLine;\n    }\n    newLine.isWrapped = isWrapped;\n\n    const topRow = buffer.ybase + buffer.scrollTop;\n    const bottomRow = buffer.ybase + buffer.scrollBottom;\n\n    if (buffer.scrollTop === 0) {\n      // Determine whether the buffer is going to be trimmed after insertion.\n      const willBufferBeTrimmed = buffer.lines.isFull;\n\n      // Insert the line using the fastest method\n      if (bottomRow === buffer.lines.length - 1) {\n        if (willBufferBeTrimmed) {\n          buffer.lines.recycle().copyFrom(newLine);\n        } else {\n          buffer.lines.push(newLine.clone());\n        }\n      } else {\n        buffer.lines.splice(bottomRow + 1, 0, newLine.clone());\n      }\n\n      // Only adjust ybase and ydisp when the buffer is not trimmed\n      if (!willBufferBeTrimmed) {\n        buffer.ybase++;\n        // Only scroll the ydisp with ybase if the user has not scrolled up\n        if (!this.isUserScrolling) {\n          buffer.ydisp++;\n        }\n      } else {\n        // When the buffer is full and the user has scrolled up, keep the text\n        // stable unless ydisp is right at the top\n        if (this.isUserScrolling) {\n          buffer.ydisp = Math.max(buffer.ydisp - 1, 0);\n        }\n      }\n    } else {\n      // scrollTop is non-zero which means no line will be going to the\n      // scrollback, instead we can just shift them in-place.\n      const scrollRegionHeight = bottomRow - topRow + 1 /* as it's zero-based */;\n      buffer.lines.shiftElements(topRow + 1, scrollRegionHeight - 1, -1);\n      buffer.lines.set(bottomRow, newLine.clone());\n    }\n\n    // Move the viewport to the bottom of the buffer unless the user is\n    // scrolling.\n    if (!this.isUserScrolling) {\n      buffer.ydisp = buffer.ybase;\n    }\n\n    this._onScroll.fire(buffer.ydisp);\n  }\n\n  /**\n   * Scroll the display of the terminal\n   * @param disp The number of lines to scroll down (negative scroll up).\n   * @param suppressScrollEvent Don't emit the scroll event as scrollLines. This is used\n   * to avoid unwanted events being handled by the viewport when the event was triggered from the\n   * viewport originally.\n   */\n  public scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void {\n    const buffer = this.buffer;\n    if (disp < 0) {\n      if (buffer.ydisp === 0) {\n        return;\n      }\n      this.isUserScrolling = true;\n    } else if (disp + buffer.ydisp >= buffer.ybase) {\n      this.isUserScrolling = false;\n    }\n\n    const oldYdisp = buffer.ydisp;\n    buffer.ydisp = Math.max(Math.min(buffer.ydisp + disp, buffer.ybase), 0);\n\n    // No change occurred, don't trigger scroll/refresh\n    if (oldYdisp === buffer.ydisp) {\n      return;\n    }\n\n    if (!suppressScrollEvent) {\n      this._onScroll.fire(buffer.ydisp);\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ICharsetService } from 'common/services/Services';\nimport { ICharset } from 'common/Types';\n\nexport class CharsetService implements ICharsetService {\n  public serviceBrand: any;\n\n  public charset: ICharset | undefined;\n  public glevel: number = 0;\n\n  private _charsets: (ICharset | undefined)[] = [];\n\n  public reset(): void {\n    this.charset = undefined;\n    this._charsets = [];\n    this.glevel = 0;\n  }\n\n  public setgLevel(g: number): void {\n    this.glevel = g;\n    this.charset = this._charsets[g];\n  }\n\n  public setgCharset(g: number, charset: ICharset | undefined): void {\n    this._charsets[g] = charset;\n    if (this.glevel === g) {\n      this.charset = charset;\n    }\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, ICoreService, ICoreMouseService } from 'common/services/Services';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { ICoreMouseProtocol, ICoreMouseEvent, CoreMouseEncoding, CoreMouseEventType, CoreMouseButton, CoreMouseAction } from 'common/Types';\nimport { Disposable } from 'common/Lifecycle';\n\n/**\n * Supported default protocols.\n */\nconst DEFAULT_PROTOCOLS: { [key: string]: ICoreMouseProtocol } = {\n  /**\n   * NONE\n   * Events: none\n   * Modifiers: none\n   */\n  NONE: {\n    events: CoreMouseEventType.NONE,\n    restrict: () => false\n  },\n  /**\n   * X10\n   * Events: mousedown\n   * Modifiers: none\n   */\n  X10: {\n    events: CoreMouseEventType.DOWN,\n    restrict: (e: ICoreMouseEvent) => {\n      // no wheel, no move, no up\n      if (e.button === CoreMouseButton.WHEEL || e.action !== CoreMouseAction.DOWN) {\n        return false;\n      }\n      // no modifiers\n      e.ctrl = false;\n      e.alt = false;\n      e.shift = false;\n      return true;\n    }\n  },\n  /**\n   * VT200\n   * Events: mousedown / mouseup / wheel\n   * Modifiers: all\n   */\n  VT200: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move\n      if (e.action === CoreMouseAction.MOVE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * DRAG\n   * Events: mousedown / mouseup / wheel / mousedrag\n   * Modifiers: all\n   */\n  DRAG: {\n    events: CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL | CoreMouseEventType.DRAG,\n    restrict: (e: ICoreMouseEvent) => {\n      // no move without button\n      if (e.action === CoreMouseAction.MOVE && e.button === CoreMouseButton.NONE) {\n        return false;\n      }\n      return true;\n    }\n  },\n  /**\n   * ANY\n   * Events: all mouse related events\n   * Modifiers: all\n   */\n  ANY: {\n    events:\n      CoreMouseEventType.DOWN | CoreMouseEventType.UP | CoreMouseEventType.WHEEL\n      | CoreMouseEventType.DRAG | CoreMouseEventType.MOVE,\n    restrict: (e: ICoreMouseEvent) => true\n  }\n};\n\nconst enum Modifiers {\n  SHIFT = 4,\n  ALT = 8,\n  CTRL = 16\n}\n\n// helper for default encoders to generate the event code.\nfunction eventCode(e: ICoreMouseEvent, isSGR: boolean): number {\n  let code = (e.ctrl ? Modifiers.CTRL : 0) | (e.shift ? Modifiers.SHIFT : 0) | (e.alt ? Modifiers.ALT : 0);\n  if (e.button === CoreMouseButton.WHEEL) {\n    code |= 64;\n    code |= e.action;\n  } else {\n    code |= e.button & 3;\n    if (e.button & 4) {\n      code |= 64;\n    }\n    if (e.button & 8) {\n      code |= 128;\n    }\n    if (e.action === CoreMouseAction.MOVE) {\n      code |= CoreMouseAction.MOVE;\n    } else if (e.action === CoreMouseAction.UP && !isSGR) {\n      // special case - only SGR can report button on release\n      // all others have to go with NONE\n      code |= CoreMouseButton.NONE;\n    }\n  }\n  return code;\n}\n\nconst S = String.fromCharCode;\n\n/**\n * Supported default encodings.\n */\nconst DEFAULT_ENCODINGS: { [key: string]: CoreMouseEncoding } = {\n  /**\n   * DEFAULT - CSI M Pb Px Py\n   * Single byte encoding for coords and event code.\n   * Can encode values up to 223 (1-based).\n   */\n  DEFAULT: (e: ICoreMouseEvent) => {\n    const params = [eventCode(e, false) + 32, e.col + 32, e.row + 32];\n    // supress mouse report if we exceed addressible range\n    // Note this is handled differently by emulators\n    // - xterm:         sends 0;0 coords instead\n    // - vte, konsole:  no report\n    if (params[0] > 255 || params[1] > 255 || params[2] > 255) {\n      return '';\n    }\n    return `\\x1b[M${S(params[0])}${S(params[1])}${S(params[2])}`;\n  },\n  /**\n   * SGR - CSI < Pb ; Px ; Py M|m\n   * No encoding limitation.\n   * Can report button on release and works with a well formed sequence.\n   */\n  SGR: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.col};${e.row}${final}`;\n  },\n  SGR_PIXELS: (e: ICoreMouseEvent) => {\n    const final = (e.action === CoreMouseAction.UP && e.button !== CoreMouseButton.WHEEL) ? 'm' : 'M';\n    return `\\x1b[<${eventCode(e, true)};${e.x};${e.y}${final}`;\n  }\n};\n\n/**\n * CoreMouseService\n *\n * Provides mouse tracking reports with different protocols and encodings.\n *  - protocols: NONE (default), X10, VT200, DRAG, ANY\n *  - encodings: DEFAULT, SGR (UTF8, URXVT removed in #2507)\n *\n * Custom protocols/encodings can be added by `addProtocol` / `addEncoding`.\n * To activate a protocol/encoding, set `activeProtocol` / `activeEncoding`.\n * Switching a protocol will send a notification event `onProtocolChange`\n * with a list of needed events to track.\n *\n * The service handles the mouse tracking state and decides whether to send\n * a tracking report to the backend based on protocol and encoding limitations.\n * To send a mouse event call `triggerMouseEvent`.\n */\nexport class CoreMouseService extends Disposable implements ICoreMouseService {\n  private _protocols: { [name: string]: ICoreMouseProtocol } = {};\n  private _encodings: { [name: string]: CoreMouseEncoding } = {};\n  private _activeProtocol: string = '';\n  private _activeEncoding: string = '';\n  private _lastEvent: ICoreMouseEvent | null = null;\n\n  private readonly _onProtocolChange = this.register(new EventEmitter<CoreMouseEventType>());\n  public readonly onProtocolChange =  this._onProtocolChange.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ICoreService private readonly _coreService: ICoreService\n  ) {\n    super();\n    // register default protocols and encodings\n    for (const name of Object.keys(DEFAULT_PROTOCOLS)) this.addProtocol(name, DEFAULT_PROTOCOLS[name]);\n    for (const name of Object.keys(DEFAULT_ENCODINGS)) this.addEncoding(name, DEFAULT_ENCODINGS[name]);\n    // call reset to set defaults\n    this.reset();\n  }\n\n  public addProtocol(name: string, protocol: ICoreMouseProtocol): void {\n    this._protocols[name] = protocol;\n  }\n\n  public addEncoding(name: string, encoding: CoreMouseEncoding): void {\n    this._encodings[name] = encoding;\n  }\n\n  public get activeProtocol(): string {\n    return this._activeProtocol;\n  }\n\n  public get areMouseEventsActive(): boolean {\n    return this._protocols[this._activeProtocol].events !== 0;\n  }\n\n  public set activeProtocol(name: string) {\n    if (!this._protocols[name]) {\n      throw new Error(`unknown protocol \"${name}\"`);\n    }\n    this._activeProtocol = name;\n    this._onProtocolChange.fire(this._protocols[name].events);\n  }\n\n  public get activeEncoding(): string {\n    return this._activeEncoding;\n  }\n\n  public set activeEncoding(name: string) {\n    if (!this._encodings[name]) {\n      throw new Error(`unknown encoding \"${name}\"`);\n    }\n    this._activeEncoding = name;\n  }\n\n  public reset(): void {\n    this.activeProtocol = 'NONE';\n    this.activeEncoding = 'DEFAULT';\n    this._lastEvent = null;\n  }\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  public triggerMouseEvent(e: ICoreMouseEvent): boolean {\n    // range check for col/row\n    if (e.col < 0 || e.col >= this._bufferService.cols\n      || e.row < 0 || e.row >= this._bufferService.rows) {\n      return false;\n    }\n\n    // filter nonsense combinations of button + action\n    if (e.button === CoreMouseButton.WHEEL && e.action === CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button === CoreMouseButton.NONE && e.action !== CoreMouseAction.MOVE) {\n      return false;\n    }\n    if (e.button !== CoreMouseButton.WHEEL && (e.action === CoreMouseAction.LEFT || e.action === CoreMouseAction.RIGHT)) {\n      return false;\n    }\n\n    // report 1-based coords\n    e.col++;\n    e.row++;\n\n    // debounce move events at grid or pixel level\n    if (e.action === CoreMouseAction.MOVE\n      && this._lastEvent\n      && this._equalEvents(this._lastEvent, e, this._activeEncoding === 'SGR_PIXELS')\n    ) {\n      return false;\n    }\n\n    // apply protocol restrictions\n    if (!this._protocols[this._activeProtocol].restrict(e)) {\n      return false;\n    }\n\n    // encode report and send\n    const report = this._encodings[this._activeEncoding](e);\n    if (report) {\n      // always send DEFAULT as binary data\n      if (this._activeEncoding === 'DEFAULT') {\n        this._coreService.triggerBinaryEvent(report);\n      } else {\n        this._coreService.triggerDataEvent(report, true);\n      }\n    }\n\n    this._lastEvent = e;\n\n    return true;\n  }\n\n  public explainEvents(events: CoreMouseEventType): { [event: string]: boolean } {\n    return {\n      down: !!(events & CoreMouseEventType.DOWN),\n      up: !!(events & CoreMouseEventType.UP),\n      drag: !!(events & CoreMouseEventType.DRAG),\n      move: !!(events & CoreMouseEventType.MOVE),\n      wheel: !!(events & CoreMouseEventType.WHEEL)\n    };\n  }\n\n  private _equalEvents(e1: ICoreMouseEvent, e2: ICoreMouseEvent, pixels: boolean): boolean {\n    if (pixels) {\n      if (e1.x !== e2.x) return false;\n      if (e1.y !== e2.y) return false;\n    } else {\n      if (e1.col !== e2.col) return false;\n      if (e1.row !== e2.row) return false;\n    }\n    if (e1.button !== e2.button) return false;\n    if (e1.action !== e2.action) return false;\n    if (e1.ctrl !== e2.ctrl) return false;\n    if (e1.alt !== e2.alt) return false;\n    if (e1.shift !== e2.shift) return false;\n    return true;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { clone } from 'common/Clone';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { IDecPrivateModes, IModes } from 'common/Types';\nimport { IBufferService, ICoreService, ILogService, IOptionsService } from 'common/services/Services';\n\nconst DEFAULT_MODES: IModes = Object.freeze({\n  insertMode: false\n});\n\nconst DEFAULT_DEC_PRIVATE_MODES: IDecPrivateModes = Object.freeze({\n  applicationCursorKeys: false,\n  applicationKeypad: false,\n  bracketedPasteMode: false,\n  origin: false,\n  reverseWraparound: false,\n  sendFocus: false,\n  wraparound: true // defaults: xterm - true, vt100 - false\n});\n\nexport class CoreService extends Disposable implements ICoreService {\n  public serviceBrand: any;\n\n  public isCursorInitialized: boolean = false;\n  public isCursorHidden: boolean = false;\n  public modes: IModes;\n  public decPrivateModes: IDecPrivateModes;\n\n  private readonly _onData = this.register(new EventEmitter<string>());\n  public readonly onData = this._onData.event;\n  private readonly _onUserInput = this.register(new EventEmitter<void>());\n  public readonly onUserInput = this._onUserInput.event;\n  private readonly _onBinary = this.register(new EventEmitter<string>());\n  public readonly onBinary = this._onBinary.event;\n  private readonly _onRequestScrollToBottom = this.register(new EventEmitter<void>());\n  public readonly onRequestScrollToBottom = this._onRequestScrollToBottom.event;\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService,\n    @ILogService private readonly _logService: ILogService,\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public reset(): void {\n    this.modes = clone(DEFAULT_MODES);\n    this.decPrivateModes = clone(DEFAULT_DEC_PRIVATE_MODES);\n  }\n\n  public triggerDataEvent(data: string, wasUserInput: boolean = false): void {\n    // Prevents all events to pty process if stdin is disabled\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n\n    // Input is being sent to the terminal, the terminal should focus the prompt.\n    const buffer = this._bufferService.buffer;\n    if (wasUserInput && this._optionsService.rawOptions.scrollOnUserInput && buffer.ybase !== buffer.ydisp) {\n      this._onRequestScrollToBottom.fire();\n    }\n\n    // Fire onUserInput so listeners can react as well (eg. clear selection)\n    if (wasUserInput) {\n      this._onUserInput.fire();\n    }\n\n    // Fire onData API\n    this._logService.debug(`sending data \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onData.fire(data);\n  }\n\n  public triggerBinaryEvent(data: string): void {\n    if (this._optionsService.rawOptions.disableStdin) {\n      return;\n    }\n    this._logService.debug(`sending binary \"${data}\"`, () => data.split('').map(e => e.charCodeAt(0)));\n    this._onBinary.fire(data);\n  }\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { css } from 'common/Color';\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable, toDisposable } from 'common/Lifecycle';\nimport { IDecorationService, IInternalDecoration } from 'common/services/Services';\nimport { SortedList } from 'common/SortedList';\nimport { IColor } from 'common/Types';\nimport { IDecoration, IDecorationOptions, IMarker } from 'xterm';\n\n// Work variables to avoid garbage collection\nlet $xmin = 0;\nlet $xmax = 0;\n\nexport class DecorationService extends Disposable implements IDecorationService {\n  public serviceBrand: any;\n\n  /**\n   * A list of all decorations, sorted by the marker's line value. This relies on the fact that\n   * while marker line values do change, they should all change by the same amount so this should\n   * never become out of order.\n   */\n  private readonly _decorations: SortedList<IInternalDecoration> = new SortedList(e => e?.marker.line);\n\n  private readonly _onDecorationRegistered = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRegistered = this._onDecorationRegistered.event;\n  private readonly _onDecorationRemoved = this.register(new EventEmitter<IInternalDecoration>());\n  public readonly onDecorationRemoved = this._onDecorationRemoved.event;\n\n  public get decorations(): IterableIterator<IInternalDecoration> { return this._decorations.values(); }\n\n  constructor() {\n    super();\n\n    this.register(toDisposable(() => this.reset()));\n  }\n\n  public registerDecoration(options: IDecorationOptions): IDecoration | undefined {\n    if (options.marker.isDisposed) {\n      return undefined;\n    }\n    const decoration = new Decoration(options);\n    if (decoration) {\n      const markerDispose = decoration.marker.onDispose(() => decoration.dispose());\n      decoration.onDispose(() => {\n        if (decoration) {\n          if (this._decorations.delete(decoration)) {\n            this._onDecorationRemoved.fire(decoration);\n          }\n          markerDispose.dispose();\n        }\n      });\n      this._decorations.insert(decoration);\n      this._onDecorationRegistered.fire(decoration);\n    }\n    return decoration;\n  }\n\n  public reset(): void {\n    for (const d of this._decorations.values()) {\n      d.dispose();\n    }\n    this._decorations.clear();\n  }\n\n  public *getDecorationsAtCell(x: number, line: number, layer?: 'bottom' | 'top'): IterableIterator<IInternalDecoration> {\n    let xmin = 0;\n    let xmax = 0;\n    for (const d of this._decorations.getKeyIterator(line)) {\n      xmin = d.options.x ?? 0;\n      xmax = xmin + (d.options.width ?? 1);\n      if (x >= xmin && x < xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        yield d;\n      }\n    }\n  }\n\n  public forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void {\n    this._decorations.forEachByKey(line, d => {\n      $xmin = d.options.x ?? 0;\n      $xmax = $xmin + (d.options.width ?? 1);\n      if (x >= $xmin && x < $xmax && (!layer || (d.options.layer ?? 'bottom') === layer)) {\n        callback(d);\n      }\n    });\n  }\n}\n\nclass Decoration extends Disposable implements IInternalDecoration {\n  public readonly marker: IMarker;\n  public element: HTMLElement | undefined;\n  public get isDisposed(): boolean { return this._isDisposed; }\n\n  public readonly onRenderEmitter = this.register(new EventEmitter<HTMLElement>());\n  public readonly onRender = this.onRenderEmitter.event;\n  private readonly _onDispose = this.register(new EventEmitter<void>());\n  public readonly onDispose = this._onDispose.event;\n\n  private _cachedBg: IColor | undefined | null = null;\n  public get backgroundColorRGB(): IColor | undefined {\n    if (this._cachedBg === null) {\n      if (this.options.backgroundColor) {\n        this._cachedBg = css.toColor(this.options.backgroundColor);\n      } else {\n        this._cachedBg = undefined;\n      }\n    }\n    return this._cachedBg;\n  }\n\n  private _cachedFg: IColor | undefined | null = null;\n  public get foregroundColorRGB(): IColor | undefined {\n    if (this._cachedFg === null) {\n      if (this.options.foregroundColor) {\n        this._cachedFg = css.toColor(this.options.foregroundColor);\n      } else {\n        this._cachedFg = undefined;\n      }\n    }\n    return this._cachedFg;\n  }\n\n  constructor(\n    public readonly options: IDecorationOptions\n  ) {\n    super();\n    this.marker = options.marker;\n    if (this.options.overviewRulerOptions && !this.options.overviewRulerOptions.position) {\n      this.options.overviewRulerOptions.position = 'full';\n    }\n  }\n\n  public override dispose(): void {\n    this._onDispose.fire();\n    super.dispose();\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService, IServiceIdentifier } from 'common/services/Services';\nimport { getServiceDependencies } from 'common/services/ServiceRegistry';\n\nexport class ServiceCollection {\n\n  private _entries = new Map<IServiceIdentifier<any>, any>();\n\n  constructor(...entries: [IServiceIdentifier<any>, any][]) {\n    for (const [id, service] of entries) {\n      this.set(id, service);\n    }\n  }\n\n  public set<T>(id: IServiceIdentifier<T>, instance: T): T {\n    const result = this._entries.get(id);\n    this._entries.set(id, instance);\n    return result;\n  }\n\n  public forEach(callback: (id: IServiceIdentifier<any>, instance: any) => any): void {\n    for (const [key, value] of this._entries.entries()) {\n      callback(key, value);\n    }\n  }\n\n  public has(id: IServiceIdentifier<any>): boolean {\n    return this._entries.has(id);\n  }\n\n  public get<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._entries.get(id);\n  }\n}\n\nexport class InstantiationService implements IInstantiationService {\n  public serviceBrand: undefined;\n\n  private readonly _services: ServiceCollection = new ServiceCollection();\n\n  constructor() {\n    this._services.set(IInstantiationService, this);\n  }\n\n  public setService<T>(id: IServiceIdentifier<T>, instance: T): void {\n    this._services.set(id, instance);\n  }\n\n  public getService<T>(id: IServiceIdentifier<T>): T | undefined {\n    return this._services.get(id);\n  }\n\n  public createInstance<T>(ctor: any, ...args: any[]): T {\n    const serviceDependencies = getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\n    const serviceArgs: any[] = [];\n    for (const dependency of serviceDependencies) {\n      const service = this._services.get(dependency.id);\n      if (!service) {\n        throw new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n      }\n      serviceArgs.push(service);\n    }\n\n    const firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n    // check for argument mismatches, adjust static args if needed\n    if (args.length !== firstServiceArgPos) {\n      throw new Error(`[createInstance] First service dependency of ${ctor.name} at position ${firstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n    }\n\n    // now create the instance\n    return new ctor(...[...args, ...serviceArgs]);\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Disposable } from 'common/Lifecycle';\nimport { ILogService, IOptionsService, LogLevelEnum } from 'common/services/Services';\n\ntype LogType = (message?: any, ...optionalParams: any[]) => void;\n\ninterface IConsole {\n  log: LogType;\n  error: LogType;\n  info: LogType;\n  trace: LogType;\n  warn: LogType;\n}\n\n// console is available on both node.js and browser contexts but the common\n// module doesn't depend on them so we need to explicitly declare it.\ndeclare const console: IConsole;\n\nconst optionsKeyToLogLevel: { [key: string]: LogLevelEnum } = {\n  trace: LogLevelEnum.TRACE,\n  debug: LogLevelEnum.DEBUG,\n  info: LogLevelEnum.INFO,\n  warn: LogLevelEnum.WARN,\n  error: LogLevelEnum.ERROR,\n  off: LogLevelEnum.OFF\n};\n\nconst LOG_PREFIX = 'xterm.js: ';\n\nexport class LogService extends Disposable implements ILogService {\n  public serviceBrand: any;\n\n  private _logLevel: LogLevelEnum = LogLevelEnum.OFF;\n  public get logLevel(): LogLevelEnum { return this._logLevel; }\n\n  constructor(\n    @IOptionsService private readonly _optionsService: IOptionsService\n  ) {\n    super();\n    this._updateLogLevel();\n    this.register(this._optionsService.onSpecificOptionChange('logLevel', () => this._updateLogLevel()));\n\n    // For trace logging, assume the latest created log service is valid\n    traceLogger = this;\n  }\n\n  private _updateLogLevel(): void {\n    this._logLevel = optionsKeyToLogLevel[this._optionsService.rawOptions.logLevel];\n  }\n\n  private _evalLazyOptionalParams(optionalParams: any[]): void {\n    for (let i = 0; i < optionalParams.length; i++) {\n      if (typeof optionalParams[i] === 'function') {\n        optionalParams[i] = optionalParams[i]();\n      }\n    }\n  }\n\n  private _log(type: LogType, message: string, optionalParams: any[]): void {\n    this._evalLazyOptionalParams(optionalParams);\n    type.call(console, (this._optionsService.options.logger ? '' : LOG_PREFIX) + message, ...optionalParams);\n  }\n\n  public trace(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.TRACE) {\n      this._log(this._optionsService.options.logger?.trace.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public debug(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.DEBUG) {\n      this._log(this._optionsService.options.logger?.debug.bind(this._optionsService.options.logger) ?? console.log, message, optionalParams);\n    }\n  }\n\n  public info(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.INFO) {\n      this._log(this._optionsService.options.logger?.info.bind(this._optionsService.options.logger) ?? console.info, message, optionalParams);\n    }\n  }\n\n  public warn(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.WARN) {\n      this._log(this._optionsService.options.logger?.warn.bind(this._optionsService.options.logger) ?? console.warn, message, optionalParams);\n    }\n  }\n\n  public error(message: string, ...optionalParams: any[]): void {\n    if (this._logLevel <= LogLevelEnum.ERROR) {\n      this._log(this._optionsService.options.logger?.error.bind(this._optionsService.options.logger) ?? console.error, message, optionalParams);\n    }\n  }\n}\n\nlet traceLogger: ILogService;\nexport function setTraceLogger(logger: ILogService): void {\n  traceLogger = logger;\n}\n\n/**\n * A decorator that can be used to automatically log trace calls to the decorated function.\n */\nexport function traceCall(_target: any, key: string, descriptor: any): any {\n  if (typeof descriptor.value !== 'function') {\n    throw new Error('not supported');\n  }\n  const fnKey = 'value';\n  const fn = descriptor.value;\n  descriptor[fnKey] = function (...args: any[]) {\n    // Early exit\n    if (traceLogger.logLevel !== LogLevelEnum.TRACE) {\n      return fn.apply(this, args);\n    }\n\n    traceLogger.trace(`GlyphRenderer#${fn.name}(${args.map(e => JSON.stringify(e)).join(', ')})`);\n    const result = fn.apply(this, args);\n    traceLogger.trace(`GlyphRenderer#${fn.name} return`, result);\n    return result;\n  };\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { EventEmitter } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { isMac } from 'common/Platform';\nimport { CursorStyle, IDisposable } from 'common/Types';\nimport { FontWeight, IOptionsService, ITerminalOptions } from 'common/services/Services';\n\nexport const DEFAULT_OPTIONS: Readonly<Required<ITerminalOptions>> = {\n  cols: 80,\n  rows: 24,\n  cursorBlink: false,\n  cursorStyle: 'block',\n  cursorWidth: 1,\n  cursorInactiveStyle: 'outline',\n  customGlyphs: true,\n  drawBoldTextInBrightColors: true,\n  fastScrollModifier: 'alt',\n  fastScrollSensitivity: 5,\n  fontFamily: 'courier-new, courier, monospace',\n  fontSize: 15,\n  fontWeight: 'normal',\n  fontWeightBold: 'bold',\n  ignoreBracketedPasteMode: false,\n  lineHeight: 1.0,\n  letterSpacing: 0,\n  linkHandler: null,\n  logLevel: 'info',\n  logger: null,\n  scrollback: 1000,\n  scrollOnUserInput: true,\n  scrollSensitivity: 1,\n  screenReaderMode: false,\n  smoothScrollDuration: 0,\n  macOptionIsMeta: false,\n  macOptionClickForcesSelection: false,\n  minimumContrastRatio: 1,\n  disableStdin: false,\n  allowProposedApi: false,\n  allowTransparency: false,\n  tabStopWidth: 8,\n  theme: {},\n  rightClickSelectsWord: isMac,\n  windowOptions: {},\n  windowsMode: false,\n  windowsPty: {},\n  wordSeparator: ' ()[]{}\\',\"`',\n  altClickMovesCursor: true,\n  convertEol: false,\n  termName: 'xterm',\n  cancelEvents: false,\n  overviewRulerWidth: 0\n};\n\nconst FONT_WEIGHT_OPTIONS: Extract<FontWeight, string>[] = ['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900'];\n\nexport class OptionsService extends Disposable implements IOptionsService {\n  public serviceBrand: any;\n\n  public readonly rawOptions: Required<ITerminalOptions>;\n  public options: Required<ITerminalOptions>;\n\n  private readonly _onOptionChange = this.register(new EventEmitter<keyof ITerminalOptions>());\n  public readonly onOptionChange = this._onOptionChange.event;\n\n  constructor(options: Partial<ITerminalOptions>) {\n    super();\n    // set the default value of each option\n    const defaultOptions = { ...DEFAULT_OPTIONS };\n    for (const key in options) {\n      if (key in defaultOptions) {\n        try {\n          const newValue = options[key];\n          defaultOptions[key] = this._sanitizeAndValidateOption(key, newValue);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n    }\n\n    // set up getters and setters for each option\n    this.rawOptions = defaultOptions;\n    this.options = { ... defaultOptions };\n    this._setupOptions();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (value: ITerminalOptions[T]) => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (eventKey === key) {\n        listener(this.rawOptions[key]);\n      }\n    });\n  }\n\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  public onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable {\n    return this.onOptionChange(eventKey => {\n      if (keys.indexOf(eventKey) !== -1) {\n        listener();\n      }\n    });\n  }\n\n  private _setupOptions(): void {\n    const getter = (propName: string): any => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n      return this.rawOptions[propName];\n    };\n\n    const setter = (propName: string, value: any): void => {\n      if (!(propName in DEFAULT_OPTIONS)) {\n        throw new Error(`No option with key \"${propName}\"`);\n      }\n\n      value = this._sanitizeAndValidateOption(propName, value);\n      // Don't fire an option change event if they didn't change\n      if (this.rawOptions[propName] !== value) {\n        this.rawOptions[propName] = value;\n        this._onOptionChange.fire(propName);\n      }\n    };\n\n    for (const propName in this.rawOptions) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this.options, propName, desc);\n    }\n  }\n\n  private _sanitizeAndValidateOption(key: string, value: any): any {\n    switch (key) {\n      case 'cursorStyle':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        if (!isCursorStyle(value)) {\n          throw new Error(`\"${value}\" is not a valid value for ${key}`);\n        }\n        break;\n      case 'wordSeparator':\n        if (!value) {\n          value = DEFAULT_OPTIONS[key];\n        }\n        break;\n      case 'fontWeight':\n      case 'fontWeightBold':\n        if (typeof value === 'number' && 1 <= value && value <= 1000) {\n          // already valid numeric value\n          break;\n        }\n        value = FONT_WEIGHT_OPTIONS.includes(value) ? value : DEFAULT_OPTIONS[key];\n        break;\n      case 'cursorWidth':\n        value = Math.floor(value);\n        // Fall through for bounds check\n      case 'lineHeight':\n      case 'tabStopWidth':\n        if (value < 1) {\n          throw new Error(`${key} cannot be less than 1, value: ${value}`);\n        }\n        break;\n      case 'minimumContrastRatio':\n        value = Math.max(1, Math.min(21, Math.round(value * 10) / 10));\n        break;\n      case 'scrollback':\n        value = Math.min(value, 4294967295);\n        if (value < 0) {\n          throw new Error(`${key} cannot be less than 0, value: ${value}`);\n        }\n        break;\n      case 'fastScrollSensitivity':\n      case 'scrollSensitivity':\n        if (value <= 0) {\n          throw new Error(`${key} cannot be less than or equal to 0, value: ${value}`);\n        }\n        break;\n      case 'rows':\n      case 'cols':\n        if (!value && value !== 0) {\n          throw new Error(`${key} must be numeric, value: ${value}`);\n        }\n        break;\n      case 'windowsPty':\n        value = value ?? {};\n        break;\n    }\n    return value;\n  }\n}\n\nfunction isCursorStyle(value: unknown): value is CursorStyle {\n  return value === 'block' || value === 'underline' || value === 'bar';\n}\n", "/**\n * Copyright (c) 2022 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { IBufferService, IOscLinkService } from 'common/services/Services';\nimport { IMarker, IOscLinkData } from 'common/Types';\n\nexport class OscLinkService implements IOscLinkService {\n  public serviceBrand: any;\n\n  private _nextId = 1;\n\n  /**\n   * A map of the link key to link entry. This is used to add additional lines to links with ids.\n   */\n  private _entriesWithId: Map<string, IOscLinkEntryWithId> = new Map();\n\n  /**\n   * A map of the link id to the link entry. The \"link id\" (number) which is the numberic\n   * representation of a unique link should not be confused with \"id\" (string) which comes in with\n   * `id=` in the OSC link's properties.\n   */\n  private _dataByLinkId: Map<number, IOscLinkEntryNoId | IOscLinkEntryWithId> = new Map();\n\n  constructor(\n    @IBufferService private readonly _bufferService: IBufferService\n  ) {\n  }\n\n  public registerLink(data: IOscLinkData): number {\n    const buffer = this._bufferService.buffer;\n\n    // Links with no id will only ever be registered a single time\n    if (data.id === undefined) {\n      const marker = buffer.addMarker(buffer.ybase + buffer.y);\n      const entry: IOscLinkEntryNoId = {\n        data,\n        id: this._nextId++,\n        lines: [marker]\n      };\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n      this._dataByLinkId.set(entry.id, entry);\n      return entry.id;\n    }\n\n    // Add the line to the link if it already exists\n    const castData = data as Required<IOscLinkData>;\n    const key = this._getEntryIdKey(castData);\n    const match = this._entriesWithId.get(key);\n    if (match) {\n      this.addLineToLink(match.id, buffer.ybase + buffer.y);\n      return match.id;\n    }\n\n    // Create the link\n    const marker = buffer.addMarker(buffer.ybase + buffer.y);\n    const entry: IOscLinkEntryWithId = {\n      id: this._nextId++,\n      key: this._getEntryIdKey(castData),\n      data: castData,\n      lines: [marker]\n    };\n    marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    this._entriesWithId.set(entry.key, entry);\n    this._dataByLinkId.set(entry.id, entry);\n    return entry.id;\n  }\n\n  public addLineToLink(linkId: number, y: number): void {\n    const entry = this._dataByLinkId.get(linkId);\n    if (!entry) {\n      return;\n    }\n    if (entry.lines.every(e => e.line !== y)) {\n      const marker = this._bufferService.buffer.addMarker(y);\n      entry.lines.push(marker);\n      marker.onDispose(() => this._removeMarkerFromLink(entry, marker));\n    }\n  }\n\n  public getLinkData(linkId: number): IOscLinkData | undefined {\n    return this._dataByLinkId.get(linkId)?.data;\n  }\n\n  private _getEntryIdKey(linkData: Required<IOscLinkData>): string {\n    return `${linkData.id};;${linkData.uri}`;\n  }\n\n  private _removeMarkerFromLink(entry: IOscLinkEntryNoId | IOscLinkEntryWithId, marker: IMarker): void {\n    const index = entry.lines.indexOf(marker);\n    if (index === -1) {\n      return;\n    }\n    entry.lines.splice(index, 1);\n    if (entry.lines.length === 0) {\n      if (entry.data.id !== undefined) {\n        this._entriesWithId.delete((entry as IOscLinkEntryWithId).key);\n      }\n      this._dataByLinkId.delete(entry.id);\n    }\n  }\n}\n\ninterface IOscLinkEntry<T extends IOscLinkData> {\n  data: T;\n  id: number;\n  lines: IMarker[];\n}\n\ninterface IOscLinkEntryNoId extends IOscLinkEntry<IOscLinkData> {\n}\n\ninterface IOscLinkEntryWithId extends IOscLinkEntry<Required<IOscLinkData>> {\n  key: string;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n *\n * This was heavily inspired from microsoft/vscode's dependency injection system (MIT).\n */\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IServiceIdentifier } from 'common/services/Services';\n\nconst DI_TARGET = 'di$target';\nconst DI_DEPENDENCIES = 'di$dependencies';\n\nexport const serviceRegistry: Map<string, IServiceIdentifier<any>> = new Map();\n\nexport function getServiceDependencies(ctor: any): { id: IServiceIdentifier<any>, index: number, optional: boolean }[] {\n  return ctor[DI_DEPENDENCIES] || [];\n}\n\nexport function createDecorator<T>(id: string): IServiceIdentifier<T> {\n  if (serviceRegistry.has(id)) {\n    return serviceRegistry.get(id)!;\n  }\n\n  const decorator: any = function (target: Function, key: string, index: number): any {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(decorator, target, index);\n  };\n\n  decorator.toString = () => id;\n\n  serviceRegistry.set(id, decorator);\n  return decorator;\n}\n\nfunction storeServiceDependency(id: Function, target: Function, index: number): void {\n  if ((target as any)[DI_TARGET] === target) {\n    (target as any)[DI_DEPENDENCIES].push({ id, index });\n  } else {\n    (target as any)[DI_DEPENDENCIES] = [{ id, index }];\n    (target as any)[DI_TARGET] = target;\n  }\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { IEvent, IEventEmitter } from 'common/EventEmitter';\nimport { IBuffer, IBufferSet } from 'common/buffer/Types';\nimport { IDecPrivateModes, ICoreMouseEvent, CoreMouseEncoding, ICoreMouseProtocol, CoreMouseEventType, ICharset, IWindowOptions, IModes, IAttributeData, ScrollSource, IDisposable, IColor, CursorStyle, CursorInactiveStyle, IOscLinkData } from 'common/Types';\nimport { createDecorator } from 'common/services/ServiceRegistry';\nimport { IDecorationOptions, IDecoration, ILinkHandler, IWindowsPty, ILogger } from 'xterm';\n\nexport const IBufferService = createDecorator<IBufferService>('BufferService');\nexport interface IBufferService {\n  serviceBrand: undefined;\n\n  readonly cols: number;\n  readonly rows: number;\n  readonly buffer: IBuffer;\n  readonly buffers: IBufferSet;\n  isUserScrolling: boolean;\n  onResize: IEvent<{ cols: number, rows: number }>;\n  onScroll: IEvent<number>;\n  scroll(eraseAttr: IAttributeData, isWrapped?: boolean): void;\n  scrollLines(disp: number, suppressScrollEvent?: boolean, source?: ScrollSource): void;\n  resize(cols: number, rows: number): void;\n  reset(): void;\n}\n\nexport const ICoreMouseService = createDecorator<ICoreMouseService>('CoreMouseService');\nexport interface ICoreMouseService {\n  activeProtocol: string;\n  activeEncoding: string;\n  areMouseEventsActive: boolean;\n  addProtocol(name: string, protocol: ICoreMouseProtocol): void;\n  addEncoding(name: string, encoding: CoreMouseEncoding): void;\n  reset(): void;\n\n  /**\n   * Triggers a mouse event to be sent.\n   *\n   * Returns true if the event passed all protocol restrictions and a report\n   * was sent, otherwise false. The return value may be used to decide whether\n   * the default event action in the bowser component should be omitted.\n   *\n   * Note: The method will change values of the given event object\n   * to fullfill protocol and encoding restrictions.\n   */\n  triggerMouseEvent(event: ICoreMouseEvent): boolean;\n\n  /**\n   * Event to announce changes in mouse tracking.\n   */\n  onProtocolChange: IEvent<CoreMouseEventType>;\n\n  /**\n   * Human readable version of mouse events.\n   */\n  explainEvents(events: CoreMouseEventType): { [event: string]: boolean };\n}\n\nexport const ICoreService = createDecorator<ICoreService>('CoreService');\nexport interface ICoreService {\n  serviceBrand: undefined;\n\n  /**\n   * Initially the cursor will not be visible until the first time the terminal\n   * is focused.\n   */\n  isCursorInitialized: boolean;\n  isCursorHidden: boolean;\n\n  readonly modes: IModes;\n  readonly decPrivateModes: IDecPrivateModes;\n\n  readonly onData: IEvent<string>;\n  readonly onUserInput: IEvent<void>;\n  readonly onBinary: IEvent<string>;\n  readonly onRequestScrollToBottom: IEvent<void>;\n\n  reset(): void;\n\n  /**\n   * Triggers the onData event in the public API.\n   * @param data The data that is being emitted.\n   * @param wasUserInput Whether the data originated from the user (as opposed to\n   * resulting from parsing incoming data). When true this will also:\n   * - Scroll to the bottom of the buffer if option scrollOnUserInput is true.\n   * - Fire the `onUserInput` event (so selection can be cleared).\n   */\n  triggerDataEvent(data: string, wasUserInput?: boolean): void;\n\n  /**\n   * Triggers the onBinary event in the public API.\n   * @param data The data that is being emitted.\n   */\n  triggerBinaryEvent(data: string): void;\n}\n\nexport const ICharsetService = createDecorator<ICharsetService>('CharsetService');\nexport interface ICharsetService {\n  serviceBrand: undefined;\n\n  charset: ICharset | undefined;\n  readonly glevel: number;\n\n  reset(): void;\n\n  /**\n   * Set the G level of the terminal.\n   * @param g\n   */\n  setgLevel(g: number): void;\n\n  /**\n   * Set the charset for the given G level of the terminal.\n   * @param g\n   * @param charset\n   */\n  setgCharset(g: number, charset: ICharset | undefined): void;\n}\n\nexport interface IServiceIdentifier<T> {\n  (...args: any[]): void;\n  type: T;\n}\n\nexport interface IBrandedService {\n  serviceBrand: undefined;\n}\n\ntype GetLeadingNonServiceArgs<TArgs extends any[]> = TArgs extends [] ? []\n  : TArgs extends [...infer TFirst, infer TLast] ? TLast extends IBrandedService ? GetLeadingNonServiceArgs<TFirst> : TArgs\n    : never;\n\nexport const IInstantiationService = createDecorator<IInstantiationService>('InstantiationService');\nexport interface IInstantiationService {\n  serviceBrand: undefined;\n\n  setService<T>(id: IServiceIdentifier<T>, instance: T): void;\n  getService<T>(id: IServiceIdentifier<T>): T | undefined;\n  createInstance<Ctor extends new (...args: any[]) => any, R extends InstanceType<Ctor>>(t: Ctor, ...args: GetLeadingNonServiceArgs<ConstructorParameters<Ctor>>): R;\n}\n\nexport enum LogLevelEnum {\n  TRACE = 0,\n  DEBUG = 1,\n  INFO = 2,\n  WARN = 3,\n  ERROR = 4,\n  OFF = 5\n}\n\nexport const ILogService = createDecorator<ILogService>('LogService');\nexport interface ILogService {\n  serviceBrand: undefined;\n\n  readonly logLevel: LogLevelEnum;\n\n  trace(message: any, ...optionalParams: any[]): void;\n  debug(message: any, ...optionalParams: any[]): void;\n  info(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n}\n\nexport const IOptionsService = createDecorator<IOptionsService>('OptionsService');\nexport interface IOptionsService {\n  serviceBrand: undefined;\n\n  /**\n   * Read only access to the raw options object, this is an internal-only fast path for accessing\n   * single options without any validation as we trust TypeScript to enforce correct usage\n   * internally.\n   */\n  readonly rawOptions: Required<ITerminalOptions>;\n\n  /**\n   * Options as exposed through the public API, this property uses getters and setters with\n   * validation which makes it safer but slower. {@link rawOptions} should be used for pretty much\n   * all internal usage for performance reasons.\n   */\n  readonly options: Required<ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when any option changes.\n   */\n  readonly onOptionChange: IEvent<keyof ITerminalOptions>;\n\n  /**\n   * Adds an event listener for when a specific option changes, this is a convenience method that is\n   * preferred over {@link onOptionChange} when only a single option is being listened to.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onSpecificOptionChange<T extends keyof ITerminalOptions>(key: T, listener: (arg1: Required<ITerminalOptions>[T]) => any): IDisposable;\n\n  /**\n   * Adds an event listener for when a set of specific options change, this is a convenience method\n   * that is preferred over {@link onOptionChange} when multiple options are being listened to and\n   * handled the same way.\n   */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  onMultipleOptionChange(keys: (keyof ITerminalOptions)[], listener: () => any): IDisposable;\n}\n\nexport type FontWeight = 'normal' | 'bold' | '100' | '200' | '300' | '400' | '500' | '600' | '700' | '800' | '900' | number;\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'off';\n\nexport interface ITerminalOptions {\n  allowProposedApi?: boolean;\n  allowTransparency?: boolean;\n  altClickMovesCursor?: boolean;\n  cols?: number;\n  convertEol?: boolean;\n  cursorBlink?: boolean;\n  cursorStyle?: CursorStyle;\n  cursorWidth?: number;\n  cursorInactiveStyle?: CursorInactiveStyle;\n  customGlyphs?: boolean;\n  disableStdin?: boolean;\n  drawBoldTextInBrightColors?: boolean;\n  fastScrollModifier?: 'none' | 'alt' | 'ctrl' | 'shift';\n  fastScrollSensitivity?: number;\n  fontSize?: number;\n  fontFamily?: string;\n  fontWeight?: FontWeight;\n  fontWeightBold?: FontWeight;\n  ignoreBracketedPasteMode?: boolean;\n  letterSpacing?: number;\n  lineHeight?: number;\n  linkHandler?: ILinkHandler | null;\n  logLevel?: LogLevel;\n  logger?: ILogger | null;\n  macOptionIsMeta?: boolean;\n  macOptionClickForcesSelection?: boolean;\n  minimumContrastRatio?: number;\n  rightClickSelectsWord?: boolean;\n  rows?: number;\n  screenReaderMode?: boolean;\n  scrollback?: number;\n  scrollOnUserInput?: boolean;\n  scrollSensitivity?: number;\n  smoothScrollDuration?: number;\n  tabStopWidth?: number;\n  theme?: ITheme;\n  windowsMode?: boolean;\n  windowsPty?: IWindowsPty;\n  windowOptions?: IWindowOptions;\n  wordSeparator?: string;\n  overviewRulerWidth?: number;\n\n  [key: string]: any;\n  cancelEvents: boolean;\n  termName: string;\n}\n\nexport interface ITheme {\n  foreground?: string;\n  background?: string;\n  cursor?: string;\n  cursorAccent?: string;\n  selectionForeground?: string;\n  selectionBackground?: string;\n  selectionInactiveBackground?: string;\n  black?: string;\n  red?: string;\n  green?: string;\n  yellow?: string;\n  blue?: string;\n  magenta?: string;\n  cyan?: string;\n  white?: string;\n  brightBlack?: string;\n  brightRed?: string;\n  brightGreen?: string;\n  brightYellow?: string;\n  brightBlue?: string;\n  brightMagenta?: string;\n  brightCyan?: string;\n  brightWhite?: string;\n  extendedAnsi?: string[];\n}\n\nexport const IOscLinkService = createDecorator<IOscLinkService>('OscLinkService');\nexport interface IOscLinkService {\n  serviceBrand: undefined;\n  /**\n   * Registers a link to the service, returning the link ID. The link data is managed by this\n   * service and will be freed when this current cursor position is trimmed off the buffer.\n   */\n  registerLink(linkData: IOscLinkData): number;\n  /**\n   * Adds a line to a link if needed.\n   */\n  addLineToLink(linkId: number, y: number): void;\n  /** Get the link data associated with a link ID. */\n  getLinkData(linkId: number): IOscLinkData | undefined;\n}\n\nexport const IUnicodeService = createDecorator<IUnicodeService>('UnicodeService');\nexport interface IUnicodeService {\n  serviceBrand: undefined;\n  /** Register an Unicode version provider. */\n  register(provider: IUnicodeVersionProvider): void;\n  /** Registered Unicode versions. */\n  readonly versions: string[];\n  /** Currently active version. */\n  activeVersion: string;\n  /** Event triggered, when activate version changed. */\n  readonly onChange: IEvent<string>;\n\n  /**\n   * Unicode version dependent\n   */\n  wcwidth(codepoint: number): number;\n  getStringCellWidth(s: string): number;\n}\n\nexport interface IUnicodeVersionProvider {\n  readonly version: string;\n  wcwidth(ucs: number): 0 | 1 | 2;\n}\n\nexport const IDecorationService = createDecorator<IDecorationService>('DecorationService');\nexport interface IDecorationService extends IDisposable {\n  serviceBrand: undefined;\n  readonly decorations: IterableIterator<IInternalDecoration>;\n  readonly onDecorationRegistered: IEvent<IInternalDecoration>;\n  readonly onDecorationRemoved: IEvent<IInternalDecoration>;\n  registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined;\n  reset(): void;\n  /**\n   * Trigger a callback over the decoration at a cell (in no particular order). This uses a callback\n   * instead of an iterator as it's typically used in hot code paths.\n   */\n  forEachDecorationAtCell(x: number, line: number, layer: 'bottom' | 'top' | undefined, callback: (decoration: IInternalDecoration) => void): void;\n}\nexport interface IInternalDecoration extends IDecoration {\n  readonly options: IDecorationOptions;\n  readonly backgroundColorRGB: IColor | undefined;\n  readonly foregroundColorRGB: IColor | undefined;\n  readonly onRenderEmitter: IEventEmitter<HTMLElement>;\n}\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\nimport { EventEmitter } from 'common/EventEmitter';\nimport { UnicodeV6 } from 'common/input/UnicodeV6';\nimport { IUnicodeService, IUnicodeVersionProvider } from 'common/services/Services';\n\nexport class UnicodeService implements IUnicodeService {\n  public serviceBrand: any;\n\n  private _providers: {[key: string]: IUnicodeVersionProvider} = Object.create(null);\n  private _active: string = '';\n  private _activeProvider: IUnicodeVersionProvider;\n\n  private readonly _onChange = new EventEmitter<string>();\n  public readonly onChange = this._onChange.event;\n\n  constructor() {\n    const defaultProvider = new UnicodeV6();\n    this.register(defaultProvider);\n    this._active = defaultProvider.version;\n    this._activeProvider = defaultProvider;\n  }\n\n  public dispose(): void {\n    this._onChange.dispose();\n  }\n\n  public get versions(): string[] {\n    return Object.keys(this._providers);\n  }\n\n  public get activeVersion(): string {\n    return this._active;\n  }\n\n  public set activeVersion(version: string) {\n    if (!this._providers[version]) {\n      throw new Error(`unknown Unicode version \"${version}\"`);\n    }\n    this._active = version;\n    this._activeProvider = this._providers[version];\n    this._onChange.fire(version);\n  }\n\n  public register(provider: IUnicodeVersionProvider): void {\n    this._providers[provider.version] = provider;\n  }\n\n  /**\n   * Unicode version dependent interface.\n   */\n  public wcwidth(num: number): number {\n    return this._activeProvider.wcwidth(num);\n  }\n\n  public getStringCellWidth(s: string): number {\n    let result = 0;\n    const length = s.length;\n    for (let i = 0; i < length; ++i) {\n      let code = s.charCodeAt(i);\n      // surrogate pair first\n      if (0xD800 <= code && code <= 0xDBFF) {\n        if (++i >= length) {\n          // this should not happen with strings retrieved from\n          // Buffer.translateToString as it converts from UTF-32\n          // and therefore always should contain the second part\n          // for any other string we still have to handle it somehow:\n          // simply treat the lonely surrogate first as a single char (UCS-2 behavior)\n          return result + this.wcwidth(code);\n        }\n        const second = s.charCodeAt(i);\n        // convert surrogate pair to high codepoint only for valid second part (UTF-16)\n        // otherwise treat them independently (UCS-2 behavior)\n        if (0xDC00 <= second && second <= 0xDFFF) {\n          code = (code - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\n        } else {\n          result += this.wcwidth(second);\n        }\n      }\n      result += this.wcwidth(code);\n    }\n    return result;\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/**\n * Copyright (c) 2018 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport * as Strings from 'browser/LocalizableStrings';\nimport { Terminal as TerminalCore } from 'browser/Terminal';\nimport { IBufferRange, ITerminal } from 'browser/Types';\nimport { IEvent } from 'common/EventEmitter';\nimport { Disposable } from 'common/Lifecycle';\nimport { ITerminalOptions } from 'common/Types';\nimport { AddonManager } from 'common/public/AddonManager';\nimport { BufferNamespaceApi } from 'common/public/BufferNamespaceApi';\nimport { ParserApi } from 'common/public/ParserApi';\nimport { UnicodeApi } from 'common/public/UnicodeApi';\nimport { IBufferNamespace as IBufferNamespaceApi, IDecoration, IDecorationOptions, IDisposable, ILinkProvider, ILocalizableStrings, IMarker, IModes, IParser, ITerminalAddon, Terminal as ITerminalApi, ITerminalInitOnlyOptions, IUnicodeHandling } from 'xterm';\n\n/**\n * The set of options that only have an effect when set in the Terminal constructor.\n */\nconst CONSTRUCTOR_ONLY_OPTIONS = ['cols', 'rows'];\n\nexport class Terminal extends Disposable implements ITerminalApi {\n  private _core: ITerminal;\n  private _addonManager: AddonManager;\n  private _parser: IParser | undefined;\n  private _buffer: BufferNamespaceApi | undefined;\n  private _publicOptions: Required<ITerminalOptions>;\n\n  constructor(options?: ITerminalOptions & ITerminalInitOnlyOptions) {\n    super();\n\n    this._core = this.register(new TerminalCore(options));\n    this._addonManager = this.register(new AddonManager());\n\n    this._publicOptions = { ... this._core.options };\n    const getter = (propName: string): any => {\n      return this._core.options[propName];\n    };\n    const setter = (propName: string, value: any): void => {\n      this._checkReadonlyOptions(propName);\n      this._core.options[propName] = value;\n    };\n\n    for (const propName in this._core.options) {\n      const desc = {\n        get: getter.bind(this, propName),\n        set: setter.bind(this, propName)\n      };\n      Object.defineProperty(this._publicOptions, propName, desc);\n    }\n  }\n\n  private _checkReadonlyOptions(propName: string): void {\n    // Throw an error if any constructor only option is modified\n    // from terminal.options\n    // Modifications from anywhere else are allowed\n    if (CONSTRUCTOR_ONLY_OPTIONS.includes(propName)) {\n      throw new Error(`Option \"${propName}\" can only be set in the constructor`);\n    }\n  }\n\n  private _checkProposedApi(): void {\n    if (!this._core.optionsService.rawOptions.allowProposedApi) {\n      throw new Error('You must set the allowProposedApi option to true to use proposed API');\n    }\n  }\n\n  public get onBell(): IEvent<void> { return this._core.onBell; }\n  public get onBinary(): IEvent<string> { return this._core.onBinary; }\n  public get onCursorMove(): IEvent<void> { return this._core.onCursorMove; }\n  public get onData(): IEvent<string> { return this._core.onData; }\n  public get onKey(): IEvent<{ key: string, domEvent: KeyboardEvent }> { return this._core.onKey; }\n  public get onLineFeed(): IEvent<void> { return this._core.onLineFeed; }\n  public get onRender(): IEvent<{ start: number, end: number }> { return this._core.onRender; }\n  public get onResize(): IEvent<{ cols: number, rows: number }> { return this._core.onResize; }\n  public get onScroll(): IEvent<number> { return this._core.onScroll; }\n  public get onSelectionChange(): IEvent<void> { return this._core.onSelectionChange; }\n  public get onTitleChange(): IEvent<string> { return this._core.onTitleChange; }\n  public get onWriteParsed(): IEvent<void> { return this._core.onWriteParsed; }\n\n  public get element(): HTMLElement | undefined { return this._core.element; }\n  public get parser(): IParser {\n    if (!this._parser) {\n      this._parser = new ParserApi(this._core);\n    }\n    return this._parser;\n  }\n  public get unicode(): IUnicodeHandling {\n    this._checkProposedApi();\n    return new UnicodeApi(this._core);\n  }\n  public get textarea(): HTMLTextAreaElement | undefined { return this._core.textarea; }\n  public get rows(): number { return this._core.rows; }\n  public get cols(): number { return this._core.cols; }\n  public get buffer(): IBufferNamespaceApi {\n    if (!this._buffer) {\n      this._buffer = this.register(new BufferNamespaceApi(this._core));\n    }\n    return this._buffer;\n  }\n  public get markers(): ReadonlyArray<IMarker> {\n    this._checkProposedApi();\n    return this._core.markers;\n  }\n  public get modes(): IModes {\n    const m = this._core.coreService.decPrivateModes;\n    let mouseTrackingMode: 'none' | 'x10' | 'vt200' | 'drag' | 'any' = 'none';\n    switch (this._core.coreMouseService.activeProtocol) {\n      case 'X10': mouseTrackingMode = 'x10'; break;\n      case 'VT200': mouseTrackingMode = 'vt200'; break;\n      case 'DRAG': mouseTrackingMode = 'drag'; break;\n      case 'ANY': mouseTrackingMode = 'any'; break;\n    }\n    return {\n      applicationCursorKeysMode: m.applicationCursorKeys,\n      applicationKeypadMode: m.applicationKeypad,\n      bracketedPasteMode: m.bracketedPasteMode,\n      insertMode: this._core.coreService.modes.insertMode,\n      mouseTrackingMode: mouseTrackingMode,\n      originMode: m.origin,\n      reverseWraparoundMode: m.reverseWraparound,\n      sendFocusMode: m.sendFocus,\n      wraparoundMode: m.wraparound\n    };\n  }\n  public get options(): Required<ITerminalOptions> {\n    return this._publicOptions;\n  }\n  public set options(options: ITerminalOptions) {\n    for (const propName in options) {\n      this._publicOptions[propName] = options[propName];\n    }\n  }\n  public blur(): void {\n    this._core.blur();\n  }\n  public focus(): void {\n    this._core.focus();\n  }\n  public resize(columns: number, rows: number): void {\n    this._verifyIntegers(columns, rows);\n    this._core.resize(columns, rows);\n  }\n  public open(parent: HTMLElement): void {\n    this._core.open(parent);\n  }\n  public attachCustomKeyEventHandler(customKeyEventHandler: (event: KeyboardEvent) => boolean): void {\n    this._core.attachCustomKeyEventHandler(customKeyEventHandler);\n  }\n  public registerLinkProvider(linkProvider: ILinkProvider): IDisposable {\n    return this._core.registerLinkProvider(linkProvider);\n  }\n  public registerCharacterJoiner(handler: (text: string) => [number, number][]): number {\n    this._checkProposedApi();\n    return this._core.registerCharacterJoiner(handler);\n  }\n  public deregisterCharacterJoiner(joinerId: number): void {\n    this._checkProposedApi();\n    this._core.deregisterCharacterJoiner(joinerId);\n  }\n  public registerMarker(cursorYOffset: number = 0): IMarker {\n    this._verifyIntegers(cursorYOffset);\n    return this._core.registerMarker(cursorYOffset);\n  }\n  public registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n    this._checkProposedApi();\n    this._verifyPositiveIntegers(decorationOptions.x ?? 0, decorationOptions.width ?? 0, decorationOptions.height ?? 0);\n    return this._core.registerDecoration(decorationOptions);\n  }\n  public hasSelection(): boolean {\n    return this._core.hasSelection();\n  }\n  public select(column: number, row: number, length: number): void {\n    this._verifyIntegers(column, row, length);\n    this._core.select(column, row, length);\n  }\n  public getSelection(): string {\n    return this._core.getSelection();\n  }\n  public getSelectionPosition(): IBufferRange | undefined {\n    return this._core.getSelectionPosition();\n  }\n  public clearSelection(): void {\n    this._core.clearSelection();\n  }\n  public selectAll(): void {\n    this._core.selectAll();\n  }\n  public selectLines(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.selectLines(start, end);\n  }\n  public dispose(): void {\n    super.dispose();\n  }\n  public scrollLines(amount: number): void {\n    this._verifyIntegers(amount);\n    this._core.scrollLines(amount);\n  }\n  public scrollPages(pageCount: number): void {\n    this._verifyIntegers(pageCount);\n    this._core.scrollPages(pageCount);\n  }\n  public scrollToTop(): void {\n    this._core.scrollToTop();\n  }\n  public scrollToBottom(): void {\n    this._core.scrollToBottom();\n  }\n  public scrollToLine(line: number): void {\n    this._verifyIntegers(line);\n    this._core.scrollToLine(line);\n  }\n  public clear(): void {\n    this._core.clear();\n  }\n  public write(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data, callback);\n  }\n  public writeln(data: string | Uint8Array, callback?: () => void): void {\n    this._core.write(data);\n    this._core.write('\\r\\n', callback);\n  }\n  public paste(data: string): void {\n    this._core.paste(data);\n  }\n  public refresh(start: number, end: number): void {\n    this._verifyIntegers(start, end);\n    this._core.refresh(start, end);\n  }\n  public reset(): void {\n    this._core.reset();\n  }\n  public clearTextureAtlas(): void {\n    this._core.clearTextureAtlas();\n  }\n  public loadAddon(addon: ITerminalAddon): void {\n    this._addonManager.loadAddon(this, addon);\n  }\n  public static get strings(): ILocalizableStrings {\n    return Strings;\n  }\n\n  private _verifyIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value === Infinity || isNaN(value) || value % 1 !== 0) {\n        throw new Error('This API only accepts integers');\n      }\n    }\n  }\n\n  private _verifyPositiveIntegers(...values: number[]): void {\n    for (const value of values) {\n      if (value && (value === Infinity || isNaN(value) || value % 1 !== 0 || value < 0)) {\n        throw new Error('This API only accepts positive integers');\n      }\n    }\n  }\n}\n", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"FitAddon\"] = factory();\n\telse\n\t\troot[\"FitAddon\"] = factory();\n})(self, () => {\nreturn ", "/**\n * Copyright (c) 2017 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon } from 'xterm';\nimport { IRenderDimensions } from 'browser/renderer/shared/Types';\n\ninterface ITerminalDimensions {\n  /**\n   * The number of rows in the terminal.\n   */\n  rows: number;\n\n  /**\n   * The number of columns in the terminal.\n   */\n  cols: number;\n}\n\nconst MINIMUM_COLS = 2;\nconst MINIMUM_ROWS = 1;\n\nexport class FitAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n  }\n\n  public dispose(): void {}\n\n  public fit(): void {\n    const dims = this.proposeDimensions();\n    if (!dims || !this._terminal || isNaN(dims.cols) || isNaN(dims.rows)) {\n      return;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n\n    // Force a full render\n    if (this._terminal.rows !== dims.rows || this._terminal.cols !== dims.cols) {\n      core._renderService.clear();\n      this._terminal.resize(dims.cols, dims.rows);\n    }\n  }\n\n  public proposeDimensions(): ITerminalDimensions | undefined {\n    if (!this._terminal) {\n      return undefined;\n    }\n\n    if (!this._terminal.element || !this._terminal.element.parentElement) {\n      return undefined;\n    }\n\n    // TODO: Remove reliance on private API\n    const core = (this._terminal as any)._core;\n    const dims: IRenderDimensions = core._renderService.dimensions;\n\n    if (dims.css.cell.width === 0 || dims.css.cell.height === 0) {\n      return undefined;\n    }\n\n    const scrollbarWidth = this._terminal.options.scrollback === 0 ?\n      0 : core.viewport.scrollBarWidth;\n\n    const parentElementStyle = window.getComputedStyle(this._terminal.element.parentElement);\n    const parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));\n    const parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));\n    const elementStyle = window.getComputedStyle(this._terminal.element);\n    const elementPadding = {\n      top: parseInt(elementStyle.getPropertyValue('padding-top')),\n      bottom: parseInt(elementStyle.getPropertyValue('padding-bottom')),\n      right: parseInt(elementStyle.getPropertyValue('padding-right')),\n      left: parseInt(elementStyle.getPropertyValue('padding-left'))\n    };\n    const elementPaddingVer = elementPadding.top + elementPadding.bottom;\n    const elementPaddingHor = elementPadding.right + elementPadding.left;\n    const availableHeight = parentElementHeight - elementPaddingVer;\n    const availableWidth = parentElementWidth - elementPaddingHor - scrollbarWidth;\n    const geometry = {\n      cols: Math.max(MINIMUM_COLS, Math.floor(availableWidth / dims.css.cell.width)),\n      rows: Math.max(MINIMUM_ROWS, Math.floor(availableHeight / dims.css.cell.height))\n    };\n    return geometry;\n  }\n}\n", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WebLinksAddon\"] = factory();\n\telse\n\t\troot[\"WebLinksAddon\"] = factory();\n})(self, () => {\nreturn ", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { ILinkProvider, ILink, Terminal, IViewportRange, IBufferLine } from 'xterm';\n\nexport interface ILinkProviderOptions {\n  hover?(event: MouseEvent, text: string, location: IViewportRange): void;\n  leave?(event: MouseEvent, text: string): void;\n  urlRegex?: RegExp;\n}\n\nexport class WebLinkProvider implements ILinkProvider {\n\n  constructor(\n    private readonly _terminal: Terminal,\n    private readonly _regex: RegExp,\n    private readonly _handler: (event: MouseEvent, uri: string) => void,\n    private readonly _options: ILinkProviderOptions = {}\n  ) {\n\n  }\n\n  public provideLinks(y: number, callback: (links: ILink[] | undefined) => void): void {\n    const links = LinkComputer.computeLink(y, this._regex, this._terminal, this._handler);\n    callback(this._addCallbacks(links));\n  }\n\n  private _addCallbacks(links: ILink[]): ILink[] {\n    return links.map(link => {\n      link.leave = this._options.leave;\n      link.hover = (event: MouseEvent, uri: string): void => {\n        if (this._options.hover) {\n          const { range } = link;\n          this._options.hover(event, uri, range);\n        }\n      };\n      return link;\n    });\n  }\n}\n\nexport class LinkComputer {\n  public static computeLink(y: number, regex: RegExp, terminal: Terminal, activate: (event: MouseEvent, uri: string) => void): ILink[] {\n    const rex = new RegExp(regex.source, (regex.flags || '') + 'g');\n\n    const [lines, startLineIndex] = LinkComputer._getWindowedLineStrings(y - 1, terminal);\n    const line = lines.join('');\n\n    let match;\n    const result: ILink[] = [];\n\n    while (match = rex.exec(line)) {\n      const text = match[0];\n\n      // check via URL if the matched text would form a proper url\n      // NOTE: This outsources the ugly url parsing to the browser.\n      // To avoid surprising auto expansion from URL we additionally\n      // check afterwards if the provided string resembles the parsed\n      // one close enough:\n      // - decodeURI  decode path segement back to byte repr\n      //              to detect unicode auto conversion correctly\n      // - append /   also match domain urls w'o any path notion\n      try {\n        const url = new URL(text);\n        const urlText = decodeURI(url.toString());\n        if (text !== urlText && text + '/' !== urlText) {\n          continue;\n        }\n      } catch (e) {\n        continue;\n      }\n\n      // map string positions back to buffer positions\n      // values are 0-based right side excluding\n      const [startY, startX] = LinkComputer._mapStrIdx(terminal, startLineIndex, 0, match.index);\n      const [endY, endX] = LinkComputer._mapStrIdx(terminal, startY, startX, text.length);\n\n      if (startY === -1 || startX === -1 || endY === -1 || endX === -1) {\n        continue;\n      }\n\n      // range expects values 1-based right side including, thus +1 except for endX\n      const range = {\n        start: {\n          x: startX + 1,\n          y: startY + 1\n        },\n        end: {\n          x: endX,\n          y: endY + 1\n        }\n      };\n\n      result.push({ range, text, activate });\n    }\n\n    return result;\n  }\n\n  /**\n   * Get wrapped content lines for the current line index.\n   * The top/bottom line expansion stops at whitespaces or length > 2048.\n   * Returns an array with line strings and the top line index.\n   *\n   * NOTE: We pull line strings with trimRight=true on purpose to make sure\n   * to correctly match urls with early wrapped wide chars. This corrupts the string index\n   * for 1:1 backmapping to buffer positions, thus needs an additional correction in _mapStrIdx.\n   */\n  private static _getWindowedLineStrings(lineIndex: number, terminal: Terminal): [string[], number] {\n    let line: IBufferLine | undefined;\n    let topIdx = lineIndex;\n    let bottomIdx = lineIndex;\n    let length = 0;\n    let content = '';\n    const lines: string[] = [];\n\n    if ((line = terminal.buffer.active.getLine(lineIndex))) {\n      const currentContent = line.translateToString(true);\n\n      // expand top, stop on whitespaces or length > 2048\n      if (line.isWrapped && currentContent[0] !== ' ') {\n        length = 0;\n        while ((line = terminal.buffer.active.getLine(--topIdx)) && length < 2048) {\n          content = line.translateToString(true);\n          length += content.length;\n          lines.push(content);\n          if (!line.isWrapped || content.indexOf(' ') !== -1) {\n            break;\n          }\n        }\n        lines.reverse();\n      }\n\n      // append current line\n      lines.push(currentContent);\n\n      // expand bottom, stop on whitespaces or length > 2048\n      length = 0;\n      while ((line = terminal.buffer.active.getLine(++bottomIdx)) && line.isWrapped && length < 2048) {\n        content = line.translateToString(true);\n        length += content.length;\n        lines.push(content);\n        if (content.indexOf(' ') !== -1) {\n          break;\n        }\n      }\n    }\n    return [lines, topIdx];\n  }\n\n  /**\n   * Map a string index back to buffer positions.\n   * Returns buffer position as [lineIndex, columnIndex] 0-based,\n   * or [-1, -1] in case the lookup ran into a non-existing line.\n   */\n  private static _mapStrIdx(terminal: Terminal, lineIndex: number, rowIndex: number, stringIndex: number): [number, number] {\n    const buf = terminal.buffer.active;\n    const cell = buf.getNullCell();\n    let start = rowIndex;\n    while (stringIndex) {\n      const line = buf.getLine(lineIndex);\n      if (!line) {\n        return [-1, -1];\n      }\n      for (let i = start; i < line.length; ++i) {\n        line.getCell(i, cell);\n        const chars = cell.getChars();\n        const width = cell.getWidth();\n        if (width) {\n          stringIndex -= chars.length || 1;\n\n          // correct stringIndex for early wrapped wide chars:\n          // - currently only happens at last cell\n          // - cells to the right are reset with chars='' and width=1 in InputHandler.print\n          // - follow-up line must be wrapped and contain wide char at first cell\n          // --> if all these conditions are met, correct stringIndex by +1\n          if (i === line.length - 1 && chars === '') {\n            const line = buf.getLine(lineIndex + 1);\n            if (line && line.isWrapped) {\n              line.getCell(0, cell);\n              if (cell.getWidth() === 2) {\n                stringIndex += 1;\n              }\n            }\n          }\n        }\n        if (stringIndex < 0) {\n          return [lineIndex, i];\n        }\n      }\n      lineIndex++;\n      start = 0;\n    }\n    return [lineIndex, start];\n  }\n}\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/**\n * Copyright (c) 2019 The xterm.js authors. All rights reserved.\n * @license MIT\n */\n\nimport { Terminal, ITerminalAddon, IDisposable } from 'xterm';\nimport { ILinkProviderOptions, WebLinkProvider } from './WebLinkProvider';\n\n// consider everthing starting with http:// or https://\n// up to first whitespace, `\"` or `'` as url\n// NOTE: The repeated end clause is needed to not match a dangling `:`\n// resembling the old (...)*([^:\"\\'\\\\s]) final path clause\n// additionally exclude early + final:\n// - unsafe from rfc3986: !*'()\n// - unsafe chars from rfc1738: {}|\\^~[]` (minus [] as we need them for ipv6 adresses, also allow ~)\n// also exclude as finals:\n// - final interpunction like ,.!?\n// - any sort of brackets <>()[]{} (not spec conform, but often used to enclose urls)\n// - unsafe chars from rfc1738: {}|\\^~[]`\nconst strictUrlRegex = /https?:[/]{2}[^\\s\"'!*(){}|\\\\\\^<>`]*[^\\s\"':,.!?{}|\\\\\\^~\\[\\]`()<>]/;\n\n\nfunction handleLink(event: MouseEvent, uri: string): void {\n  const newWindow = window.open();\n  if (newWindow) {\n    try {\n      newWindow.opener = null;\n    } catch {\n      // no-op, Electron can throw\n    }\n    newWindow.location.href = uri;\n  } else {\n    console.warn('Opening link blocked as opener could not be cleared');\n  }\n}\n\nexport class WebLinksAddon implements ITerminalAddon {\n  private _terminal: Terminal | undefined;\n  private _linkProvider: IDisposable | undefined;\n\n  constructor(\n    private _handler: (event: MouseEvent, uri: string) => void = handleLink,\n    private _options: ILinkProviderOptions = {}\n  ) {\n  }\n\n  public activate(terminal: Terminal): void {\n    this._terminal = terminal;\n    const options = this._options as ILinkProviderOptions;\n    const regex = options.urlRegex || strictUrlRegex;\n    this._linkProvider = this._terminal.registerLinkProvider(new WebLinkProvider(this._terminal, regex, this._handler, options));\n  }\n\n  public dispose(): void {\n    this._linkProvider?.dispose();\n  }\n}\n", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/terminal.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/terminal.tsx\");\n  import.meta.hot.lastModified = \"1760694711122.6702\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useActionData, useLoaderData } from \"@remix-run/react\";\nimport { useEffect, useState } from \"react\";\nimport { getFileSystemService } from \"~/services/fileSystem.server\";\nimport { getScriptRunnerService } from \"~/services/scriptRunner.server\";\nimport { getPythonRunnerService } from \"~/services/pythonRunner.server\";\nimport TerminalComponent from \"~/components/TerminalComponent\";\nexport async function loader() {\n  return json({\n    title: \"Terminal\",\n    description: \"Interactive command-line interface with script execution and file system simulation\"\n  });\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const command = formData.get(\"command\");\n  if (!command) {\n    return json({\n      error: \"Command is required\"\n    });\n  }\n  try {\n    const fs = getFileSystemService();\n    const scriptRunner = getScriptRunnerService();\n    const pythonRunner = getPythonRunnerService();\n\n    // Parse command and arguments\n    const args = command.split(' ');\n    const cmd = args[0].toLowerCase();\n    let output = '';\n    switch (cmd) {\n      case 'help':\n        output = `\nAvailable commands:\n  help                 Show this help message\n  clear               Clear the terminal\n  echo [text]         Display text\n  ls [path]           List files\n  pwd                 Print working directory\n  cd [dir]            Change directory\n  node [file]         Run Node.js script\n  python [file]       Run Python script\n  npm [command]       Run npm command\n  version             Show version info\n`;\n        break;\n      case 'version':\n        const pythonVersion = await pythonRunner.getVersion();\n        output = `Deep Tree Echo Terminal v1.0.0\\nNode.js ${process.version}\\n${pythonVersion}`;\n        break;\n      case 'echo':\n        output = args.slice(1).join(' ');\n        break;\n      case 'pwd':\n        output = fs.getCurrentDirectory();\n        break;\n      case 'ls':\n        const path = args[1] || fs.getCurrentDirectory();\n        const long = args.includes('-l');\n        output = fs.listDirectory(path, {\n          long\n        }).join('\\n');\n        break;\n      case 'cd':\n        const newPath = args[1] || '/home/project';\n        output = fs.changeDirectory(newPath);\n        break;\n      case 'node':\n        if (args[1]) {\n          const script = fs.readFile(args[1]);\n          if (script) {\n            output = await scriptRunner.runNodeScript(script);\n          } else {\n            output = `Error: File not found: ${args[1]}`;\n          }\n        } else {\n          output = 'Error: Please specify a JavaScript file to run';\n        }\n        break;\n      case 'python':\n        if (args[1]) {\n          const script = fs.readFile(args[1]);\n          if (script) {\n            output = await pythonRunner.runScript(script);\n          } else {\n            output = `Error: File not found: ${args[1]}`;\n          }\n        } else {\n          output = 'Error: Please specify a Python file to run';\n        }\n        break;\n      case 'npm':\n        if (args.length > 1) {\n          output = await scriptRunner.runNpmCommand(args[1], args.slice(2));\n        } else {\n          output = 'Error: Please specify an npm command';\n        }\n        break;\n      default:\n        output = `Command not found: ${cmd}\\nType 'help' for available commands`;\n    }\n    return json({\n      output\n    });\n  } catch (error) {\n    return json({\n      error: `Error executing command: ${error instanceof Error ? error.message : 'Unknown error'}`\n    });\n  }\n}\nexport default function TerminalPage() {\n  _s();\n  const {\n    title,\n    description\n  } = useLoaderData();\n  const actionData = useActionData();\n  const [output, setOutput] = useState([]);\n  const [commandHistory, setCommandHistory] = useState([]);\n  const [isBusy, setIsBusy] = useState(false);\n\n  // Initialize with welcome message\n  useEffect(() => {\n    setOutput([\"Welcome to Deep Tree Echo Terminal\", \"Type 'help' for available commands\", \"Use Tab for command completion and Up/Down arrows for history\", \"\"]);\n  }, []);\n\n  // Update output when action data changes\n  useEffect(() => {\n    if (actionData?.output) {\n      setOutput(prev => [...prev, actionData.output]);\n    }\n    if (actionData?.error) {\n      setOutput(prev => [...prev, `Error: ${actionData.error}`]);\n    }\n  }, [actionData]);\n  const handleCommand = async command => {\n    // Add command to history\n    setCommandHistory(prev => [...prev, command]);\n\n    // Add command to output\n    setOutput(prev => [...prev, `$ ${command}`]);\n\n    // Process the command\n    try {\n      setIsBusy(true);\n      const form = new FormData();\n      form.append('command', command);\n      const response = await fetch('/terminal', {\n        method: 'POST',\n        body: form\n      });\n      const data = await response.json();\n      if (data.output) {\n        setOutput(prev => [...prev, data.output]);\n      }\n      if (data.error) {\n        setOutput(prev => [...prev, `Error: ${data.error}`]);\n      }\n    } catch (error) {\n      setOutput(prev => [...prev, `Error: ${error instanceof Error ? error.message : 'Unknown error'}`]);\n    } finally {\n      setIsBusy(false);\n    }\n  };\n  return <div className=\"h-screen flex flex-col\">\n      <header className=\"bg-card text-card-foreground px-6 py-4 border-b border-border\">\n        <h1 className=\"text-2xl font-bold\">{title}</h1>\n        <p className=\"text-sm opacity-70\">{description}</p>\n      </header>\n      \n      <main className=\"flex-1 overflow-hidden\">\n        <TerminalComponent onCommand={handleCommand} initialOutput={output} commandHistory={commandHistory} isBusy={isBusy} />\n      </main>\n      \n      <footer className=\"bg-card text-card-foreground px-6 py-2 border-t border-border\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"text-xs opacity-70\">\n            {isBusy ? 'Processing command...' : 'Ready'}\n          </div>\n          <div className=\"text-xs opacity-70\">\n            <span className=\"font-mono\">Tab</span>: completion \u2022 \n            <span className=\"font-mono ml-1\">\u2191/\u2193</span>: history \u2022\n            <span className=\"font-mono ml-1\">Ctrl+C</span>: cancel \u2022\n            <span className=\"font-mono ml-1\">Ctrl+L</span>: clear\n          </div>\n        </div>\n      </footer>\n    </div>;\n}\n_s(TerminalPage, \"QI612v8BMpb0GLoeFxmQlJXTOrw=\", false, function () {\n  return [useLoaderData, useActionData];\n});\n_c = TerminalPage;\nvar _c;\n$RefreshReg$(_c, \"TerminalPage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/TerminalComponent.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/TerminalComponent.tsx\");\n  import.meta.hot.lastModified = \"1760694711121.6702\";\n}\n// REMIX HMR END\n\nimport { useEffect, useRef, useState } from 'react';\nimport { Terminal } from 'xterm';\nimport { FitAddon } from 'xterm-addon-fit';\nimport { WebLinksAddon } from 'xterm-addon-web-links';\nconst TerminalComponent = ({\n  onCommand,\n  initialOutput = [],\n  commandHistory = [],\n  isBusy = false\n}) => {\n  _s();\n  const terminalRef = useRef(null);\n  const xtermRef = useRef(null);\n  const fitAddonRef = useRef(null);\n  const [isTerminalReady, setIsTerminalReady] = useState(false);\n  const [inputBuffer, setInputBuffer] = useState('');\n  const [historyIndex, setHistoryIndex] = useState(-1);\n\n  // Initialize terminal\n  useEffect(() => {\n    if (!terminalRef.current) return;\n    try {\n      // Create terminal instance\n      const term = new Terminal({\n        fontFamily: 'JetBrains Mono, Menlo, Monaco, Courier New, monospace',\n        fontSize: 14,\n        cursorBlink: true,\n        cursorStyle: 'block',\n        theme: {\n          background: '#1e1e2e',\n          foreground: '#cdd6f4',\n          cursor: '#f5e0dc',\n          black: '#45475a',\n          red: '#f38ba8',\n          green: '#a6e3a1',\n          yellow: '#f9e2af',\n          blue: '#89b4fa',\n          magenta: '#cba6f7',\n          cyan: '#94e2d5',\n          white: '#bac2de'\n        }\n      });\n\n      // Load addons\n      const fitAddon = new FitAddon();\n      term.loadAddon(fitAddon);\n      const webLinksAddon = new WebLinksAddon();\n      term.loadAddon(webLinksAddon);\n\n      // Open terminal in the container\n      term.open(terminalRef.current);\n\n      // Store references\n      xtermRef.current = term;\n      fitAddonRef.current = fitAddon;\n\n      // Set up input handling\n      term.onKey(({\n        key,\n        domEvent\n      }) => {\n        if (isBusy) {\n          // Only allow Ctrl+C during busy state\n          if (domEvent.ctrlKey && domEvent.key === 'c') {\n            term.write('^C\\r\\n');\n            writePrompt();\n          }\n          return;\n        }\n        switch (domEvent.keyCode) {\n          case 13:\n            // Enter\n            handleEnterKey();\n            break;\n          case 8:\n            // Backspace\n            handleBackspace();\n            break;\n          case 9:\n            // Tab\n            handleTab();\n            break;\n          case 38:\n            // Arrow Up\n            handleArrowUp();\n            break;\n          case 40:\n            // Arrow Down\n            handleArrowDown();\n            break;\n          case 67:\n            // 'c' key\n            if (domEvent.ctrlKey) {\n              term.write('^C\\r\\n');\n              setInputBuffer('');\n              writePrompt();\n            } else {\n              term.write(key);\n              setInputBuffer(prev => prev + key);\n            }\n            break;\n          case 76:\n            // 'l' key\n            if (domEvent.ctrlKey) {\n              term.clear();\n              writePrompt();\n            } else {\n              term.write(key);\n              setInputBuffer(prev => prev + key);\n            }\n            break;\n          default:\n            // Handle regular input\n            if (!domEvent.ctrlKey && !domEvent.altKey) {\n              term.write(key);\n              setInputBuffer(prev => prev + key);\n            }\n        }\n      });\n\n      // Initial setup\n      setTimeout(() => {\n        if (fitAddonRef.current) {\n          fitAddonRef.current.fit();\n          setIsTerminalReady(true);\n\n          // Write initial output\n          initialOutput.forEach(line => {\n            term.write(line + '\\r\\n');\n          });\n          writePrompt();\n        }\n      }, 100);\n    } catch (error) {\n      console.error('Error initializing terminal:', error);\n    }\n  }, []);\n  const writePrompt = () => {\n    if (!xtermRef.current) return;\n    xtermRef.current.write('\\r\\n$ ');\n  };\n  const handleEnterKey = () => {\n    if (!xtermRef.current) return;\n    const command = inputBuffer.trim();\n    if (command && onCommand) {\n      onCommand(command);\n    }\n    setInputBuffer('');\n    setHistoryIndex(-1);\n  };\n  const handleBackspace = () => {\n    if (!xtermRef.current || inputBuffer.length === 0) return;\n    xtermRef.current.write('\\b \\b');\n    setInputBuffer(prev => prev.slice(0, -1));\n  };\n  const handleTab = () => {\n    // Simple command completion\n    if (!xtermRef.current || !inputBuffer) return;\n    const commands = ['help', 'clear', 'echo', 'ls', 'pwd', 'cd', 'node', 'python', 'npm', 'version'];\n    const matches = commands.filter(cmd => cmd.startsWith(inputBuffer));\n    if (matches.length === 1) {\n      // Complete the command\n      const completion = matches[0].slice(inputBuffer.length);\n      xtermRef.current.write(completion);\n      setInputBuffer(matches[0]);\n    } else if (matches.length > 1) {\n      // Show available completions\n      xtermRef.current.write('\\r\\n');\n      xtermRef.current.write(matches.join('  ') + '\\r\\n');\n      writePrompt();\n      xtermRef.current.write(inputBuffer);\n    }\n  };\n  const handleArrowUp = () => {\n    if (!xtermRef.current || commandHistory.length === 0) return;\n    const newIndex = historyIndex === -1 ? commandHistory.length - 1 : Math.max(0, historyIndex - 1);\n\n    // Clear current input\n    while (inputBuffer.length > 0) {\n      xtermRef.current.write('\\b \\b');\n      setInputBuffer(prev => prev.slice(0, -1));\n    }\n\n    // Write history item\n    const historyItem = commandHistory[newIndex];\n    xtermRef.current.write(historyItem);\n    setInputBuffer(historyItem);\n    setHistoryIndex(newIndex);\n  };\n  const handleArrowDown = () => {\n    if (!xtermRef.current || historyIndex === -1) return;\n    const newIndex = historyIndex === commandHistory.length - 1 ? -1 : historyIndex + 1;\n\n    // Clear current input\n    while (inputBuffer.length > 0) {\n      xtermRef.current.write('\\b \\b');\n      setInputBuffer(prev => prev.slice(0, -1));\n    }\n    if (newIndex === -1) {\n      setHistoryIndex(-1);\n    } else {\n      const historyItem = commandHistory[newIndex];\n      xtermRef.current.write(historyItem);\n      setInputBuffer(historyItem);\n      setHistoryIndex(newIndex);\n    }\n  };\n\n  // Handle terminal resize\n  useEffect(() => {\n    if (!isTerminalReady) return;\n    const handleResize = () => {\n      if (fitAddonRef.current) {\n        fitAddonRef.current.fit();\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, [isTerminalReady]);\n  return <div className=\"h-full w-full\" ref={terminalRef} />;\n};\n_s(TerminalComponent, \"Ss9I3YZNO8B32lZYon/hTpM7ato=\");\n_c = TerminalComponent;\nexport default TerminalComponent;\nvar _c;\n$RefreshReg$(_c, \"TerminalComponent\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["root", "factory", "exports", "module", "define", "amd", "i", "a", "e", "t", "s", "r", "n", "o", "Disposable", "super", "_terminal", "_renderService", "_liveRegionLineCount", "_charsToConsume", "_charsToAnnounce", "_accessibilityContainer", "document", "createElement", "this", "_rowContainer", "setAttribute", "classList", "add", "_rowElements", "_createAccessibilityTreeNode", "appendChild", "_topBoundaryFocusListener", "_handleBoundaryFocus", "_bottomBoundaryFocusListener", "addEventListener", "length", "_refreshRowsDimensions", "_liveRegion", "_liveRegionDebouncer", "register", "TimeBasedDebouncer", "_renderRows", "bind", "element", "Error", "insertAdjacentElement", "_handleResize", "rows", "onRender", "onScroll", "_refreshRows", "onA11yChar", "char", "_handleChar", "onLineFeed", "onA11yTab", "spaceCount", "_handleTab", "onKey", "_handleKey", "key", "onBlur", "_clearLiveRegion", "onDimensionsChange", "_screenDprMonitor", "ScreenDprMonitor", "window", "setListener", "addDisposableDomListener", "toDisposable", "MAX_ROWS_TO_READ", "shift", "textContent", "Strings", "tooMuchOutput", "parentNode", "setTimeout", "remove", "keyChar", "test", "end", "buffer", "lines", "translateBufferLineToString", "posInSet", "toString", "lineData", "innerText", "_announceCharacters", "target", "getAttribute", "relatedTarget", "position", "topBoundaryElement", "boundaryElement", "bottomBoundaryElement", "pop", "removeChild", "removeEventListener", "unshift", "newElement", "push", "focus", "preventDefault", "stopImmediatePropagation", "children", "tabIndex", "_refreshRowDimensions", "dimensions", "css", "width", "canvas", "style", "height", "IRenderService", "AccessibilityManager", "replace", "bracketedPasteMode", "text", "prepareTextForTerminal", "ignoreBracketedPasteMode", "triggerDataEvent", "textarea", "screenElement", "getBoundingClientRect", "clientX", "ev", "clientY", "top", "left", "zIndex", "selectionService", "clipboardData", "setData", "selectionText", "coreService", "optionsService", "stopPropagation", "getData", "moveTextAreaUnderMouseCursor", "shouldSelectWord", "rightClickSelect", "select", "value", "_css", "set", "bg", "get", "_color", "node", "type", "handler", "options", "dispose", "_currentLink", "_bufferService", "_linkProviders", "_linkCacheDisposables", "_isMouseOut", "_wasResized", "_onShowLinkUnderline", "EventEmitter", "onShowLinkUnderline", "event", "_onHideLinkUnderline", "onHideLinkUnderline", "getDisposeArrayDisposable", "_lastMouseEvent", "onResize", "_clearCurrentLink", "linkProvider", "providerIndex", "splice", "_element", "_mouseService", "mouseService", "renderService", "_handleMouseMove", "_handleMouseDown", "_handleMouseUp", "_positionFromMouseEvent", "composedPath", "contains", "_lastBufferCell", "_handleHover", "_activeLine", "y", "_linkAtPosition", "link", "_askForLink", "_activeProviderReplies", "forEach", "linkWithState", "useLineCache", "_checkLinkProviderResult", "linkProvided", "provideLinks", "links", "size", "_removeIntersectingLinks", "providerReply", "range", "start", "endX", "cols", "x", "has", "j", "hasLinkBefore", "linkAtPosition", "_handleNewLink", "find", "currentLink", "_mouseDownLink", "activate", "endRow", "startRow", "_linkLeave", "undefined", "disposeArray", "state", "decorations", "underline", "pointerCursor", "isHovered", "_linkHover", "Object", "defineProperties", "v", "toggle", "_fireUnderlineEvent", "onRenderedViewportChange", "ydisp", "hover", "_createLinkUnderlineEvent", "showEvent", "leave", "getCoords", "x2", "x1", "y1", "y2", "IBufferService", "Linkifier2", "promptLabel", "_oscLinkService", "_optionsService", "callback", "result", "rawOptions", "linkHandler", "CellData", "getTrimmedLength", "currentLinkId", "currentStart", "hasContent", "loadCell", "cell", "hasExtendedAttrs", "urlId", "finishLink", "extended", "getLinkData", "uri", "ignoreLink", "allowNonHttpProtocols", "parsed", "URL", "includes", "protocol", "confirm", "open", "opener", "location", "href", "console", "IOptionsService", "IOscLinkService", "OscLinkProvider", "constructor", "_parentWindow", "_renderCallback", "_refreshCallbacks", "_animationFrame", "cancelAnimationFrame", "requestAnimationFrame", "_innerRefresh", "rowEnd", "_rowCount", "rowCount", "rowStart", "_rowStart", "Math", "min", "_rowEnd", "max", "_runRefreshCallbacks", "_currentDevicePixelRatio", "devicePixelRatio", "clearListener", "_listener", "listener", "_outerListener", "_updateDpr", "_resolutionMediaMatchList", "removeListener", "matchMedia", "addListener", "Terminal", "CoreTerminal", "_onFocus", "_onA11yCharEmitter", "_onA11yTabEmitter", "onWillOpen", "_onWillOpen", "browser", "Browser", "_keyDownHandled", "_keyDownSeen", "_keyPressHandled", "_unprocessedDeadKey", "_accessibilityManager", "MutableDisposable", "_onCursorMove", "onCursorMove", "_onKey", "_onRender", "_onSelectionChange", "onSelectionChange", "_onTitleChange", "onTitleChange", "_onBell", "_setup", "_instantiationService", "createInstance", "linkifier2", "registerLinkProvider", "_decorationService", "DecorationService", "IDecorationService", "_inputHandler", "onRequestBell", "fire", "onRequestRefreshRows", "refresh", "onRequestSendFocus", "_reportFocus", "onRequestReset", "onRequestWindowsOptionsReport", "_reportWindowsOptions", "onColor", "_handleColorEvent", "forwardEvent", "_afterResize", "_customKeyEventHandler", "_themeService", "req", "acc", "index", "ident", "toColorRGB", "colors", "ansi", "C0", "ESC", "toRgbString", "C1_ESCAPED", "ST", "modifyColors", "toColor", "color", "rgba", "restoreColor", "buffers", "active", "preventScroll", "clear", "decPrivateModes", "sendFocus", "updateCursorStyle", "_showCursor", "blur", "isCursorInViewport", "_compositionHelper", "isComposing", "bufferLine", "getWidth", "cursorLeft", "lineHeight", "_bindKeys", "hasSelection", "copyHandler", "_selectionService", "handlePasteEvent", "pasteHandlerWrapper", "isFirefox", "rightClickHandler", "rightClickSelectsWord", "button", "_keyDown", "_keyPress", "compositionstart", "compositionend", "_inputEvent", "updateCompositionElements", "parent", "isConnected", "debug", "_document", "ownerDocument", "dir", "createDocumentFragment", "_viewportElement", "fragment", "_viewportScrollArea", "_helperContainer", "isChromeOS", "_coreBrowserService", "defaultView", "setService", "ICoreBrowserService", "_handleTextAreaFocus", "_handleTextAreaBlur", "_charSizeService", "CharSizeService", "ICharSizeService", "ThemeService", "IThemeService", "_characterJoinerService", "CharacterJoinerService", "ICharacterJoinerService", "RenderService", "resize", "_compositionView", "CompositionHelper", "hasRenderer", "MouseService", "IMouseService", "viewport", "Viewport", "onRequestScrollLines", "scrollLines", "amount", "suppressScrollEvent", "onRequestSyncScrollBar", "syncScrollArea", "handleCursorMove", "_syncTextArea", "handleResize", "handleBlur", "onFocus", "handleFocus", "SelectionService", "ISelectionService", "onRequestRedraw", "handleSelectionChanged", "columnSelectMode", "onLinuxMouseSelection", "_onScroll", "BufferDecorationRenderer", "handleMouseDown", "coreMouseService", "areMouseEventsActive", "disable", "screenReaderMode", "onSpecificOptionChange", "_handleScreenReaderModeOptionChange", "overviewRulerWidth", "_overviewRulerRenderer", "OverviewRulerRenderer", "measure", "bindMouse", "DomRenderer", "el", "pos", "getMouseReportCoords", "overrideType", "buttons", "but", "action", "getLinesScrolled", "deltaY", "triggerMouseEvent", "col", "ctrlKey", "altKey", "shiftKey", "requestedEvents", "mouseup", "mousedrag", "mousemove", "eventListeners", "wheel", "cancel", "sendEvent", "onProtocolChange", "events", "logLevel", "_logService", "explainEvents", "passive", "activeProtocol", "shouldForceSelection", "applicationCursorKeys", "data", "handleWheel", "handleTouchStart", "handleTouchMove", "refreshRows", "shouldColumnSelect", "isCursorInitialized", "source", "paste", "customKeyEventHandler", "deregister", "joinerId", "markers", "addMarker", "ybase", "registerDecoration", "column", "setSelection", "selectionStart", "selectionEnd", "clearSelection", "selectAll", "selectLines", "isMac", "macOptionIsMeta", "keydown", "scrollOnUserInput", "scrollToBottom", "evaluateKeyboardEvent", "scrollCount", "_isThirdLevelShift", "metaKey", "charCodeAt", "CR", "domEvent", "thirdLevelKey", "isWindows", "getModifierState", "keyCode", "charCode", "which", "String", "fromCharCode", "inputType", "hasValidSize", "clearAllMarkers", "getBlankLine", "DEFAULT_ATTR_DATA", "reset", "clearTextureAtlas", "WindowsOptionsReportType", "GET_WIN_SIZE_PIXELS", "canvasWidth", "toFixed", "cellHeight", "cellWidth", "force", "cancelEvents", "_debounceThresholdMS", "_lastRefreshMs", "_additionalRefreshRequested", "_refreshTimeoutID", "now", "refreshRequestTime", "Date", "waitPeriodBeforeTrailingRefresh", "_scrollArea", "scrollBarWidth", "_currentRowHeight", "_currentDeviceCellHeight", "_lastRecordedBufferLength", "_lastRecordedViewportHeight", "_lastRecordedBufferHeight", "_lastTouchY", "_lastScrollTop", "_wheelPartialScroll", "_refreshAnimationFrame", "_ignoreNextScrollEvent", "_smoothScrollState", "startTime", "origin", "_onRequestScrollLines", "offsetWidth", "_handleScroll", "_activeBuffer", "onBufferActivate", "activeBuffer", "_renderDimensions", "_handleThemeChange", "themeService", "onChangeColors", "backgroundColor", "background", "immediate", "dpr", "device", "offsetHeight", "round", "newBufferHeight", "scrollTop", "_refresh", "offsetParent", "_isDisposed", "_smoothScrollPercent", "percent", "_clearSmoothScrollState", "smoothScrollDuration", "_bubbleScroll", "scrollPosFromTop", "cancelable", "_getPixelsScrolled", "_smoothScroll", "scrollHeight", "c", "_applyScrollModifier", "WheelEvent", "DOM_DELTA_LINE", "DOM_DELTA_PAGE", "endLine", "currentLine", "line", "isWrapped", "translateToString", "div", "bufferElements", "cursorElement", "abs", "deltaMode", "fastScrollModifier", "fastScrollSensitivity", "scrollSensitivity", "pageY", "_screenElement", "_decorationElements", "_altBufferIsActive", "_dimensionsChanged", "_container", "_doRefreshDecorations", "_queueRefresh", "alt", "onDecorationRegistered", "onDecorationRemoved", "decoration", "_removeDecoration", "addRefreshCallback", "_renderDecoration", "_refreshStyle", "_refreshXPosition", "_createElement", "layer", "display", "marker", "onRenderEmitter", "onDispose", "delete", "right", "_zones", "_zonePool", "_zonePoolIndex", "_linePadding", "center", "overviewRulerOptions", "z", "_lineIntersectsZone", "_lineAdjacentToZone", "_addLineToZone", "startBufferLine", "endBufferLine", "setPadding", "padding", "zone", "drawHeight", "full", "_coreBrowseService", "_colorZoneStore", "ColorZoneStore", "_shouldUpdateDimensions", "_shouldUpdateAnchor", "_lastKnownBufferLength", "_canvas", "_refreshCanvasDimensions", "parentElement", "insertBefore", "getContext", "ctx", "_ctx", "_registerDecorationListeners", "_registerBufferChangeListeners", "_registerDimensionChangeListeners", "normal", "_refreshDrawHeightConstants", "_refreshColorZonePadding", "_containerHeight", "clientHeight", "outerWidth", "floor", "innerWidth", "ceil", "drawWidth", "_width", "_refreshDrawConstants", "_refreshDecorations", "clearRect", "lineWidth", "zones", "_renderColorZone", "fillRect", "drawX", "updateAnchor", "_isComposing", "_textarea", "_coreService", "_isSendingComposition", "_compositionPosition", "_dataAlreadySent", "_finalizeComposition", "_handleAnyTextareaChanges", "currentCompositionPosition", "input", "substring", "newValue", "DEL", "fontFamily", "fontSize", "cursorTop", "compositionViewBounds", "dontRecurse", "ICoreService", "getComputedStyle", "parseInt", "getPropertyValue", "rect", "hasValidCharSize", "isSelection", "getCoordsRelativeToElement", "coords", "cssCellHeight", "bufferService", "wrappedRowsForRow", "targetY", "startY", "wrappedRowsCount", "repeat", "applicationCursor", "currentRow", "endCol", "currentCol", "forward", "bufferStr", "startCol", "mod", "str", "rpt", "hasScrollback", "startX", "sequence", "resetStartingRow", "targetX", "moveToRequestedRow", "direction", "currX", "FOCUS_CLASS", "_linkifier2", "_terminalClass", "nextTerminalId", "ROW_CONTAINER_CLASS", "_refreshRowElements", "_selectionContainer", "SELECTION_CLASS", "createRenderDimensions", "_updateDimensions", "onOptionChange", "_handleOptionsChanged", "_injectCss", "DomRendererRowFactory", "TERMINAL_CLASS_PREFIX", "_handleLinkHover", "_handleLinkLeave", "_widthCache", "_themeStyleElement", "_dimensionsStyleElement", "WidthCache", "setFont", "fontWeight", "fontWeightBold", "_setDefaultSpacing", "letterSpacing", "overflow", "_terminalSelector", "styles", "foreground", "multiplyOpacity", "cursor", "cursorAccent", "h", "selectionBackgroundOpaque", "selectionInactiveBackgroundOpaque", "_", "entries", "FG_CLASS_PREFIX", "BG_CLASS_PREFIX", "INVERTED_DEFAULT_COLOR", "opaque", "spacing", "_rowFactory", "defaultSpacing", "handleDevicePixelRatioChange", "row", "handleCharSizeChanged", "renderRows", "replaceChildren", "viewportEndRow", "documentFragment", "_createSelectionElement", "viewportCappedEndRow", "viewportCappedStartRow", "middleRowsCount", "colStart", "cursorAbsoluteY", "cursorBlink", "cursorStyle", "cursorInactiveStyle", "rowElement", "_setCellUnderline", "enabled", "maxY", "bufferline", "createRow", "IInstantiationService", "_workCell", "_columnSelectMode", "_selectionStart", "_selectionEnd", "linkStart", "elements", "getJoinedCharacters", "getNoBgTrimmedLength", "lineLength", "oldIsInSelection", "isJoined", "JoinedCellData", "_isCellInSelection", "getChars", "WHITESPACE_CELL_CHAR", "isUnderline", "isOverline", "oldBg", "selectionForeground", "ext", "oldExt", "fg", "isFocused", "classes", "isItalic", "isDim", "isUnderlineColorDefault", "AttributeData", "getUnderlineColor", "drawBoldTextInBrightColors", "isBold", "isStrikethrough", "textDecoration", "getFgColor", "getFgColorMode", "getBgColorMode", "isInverse", "temp2", "fgOverride", "isTop", "d", "backgroundColorRGB", "bgColorMode", "bgOverride", "foregroundColorRGB", "_addStyle", "charElement", "padStart", "resolvedBg", "fgColorMode", "_applyMinimumContrast", "className", "join", "isCursorCell", "cellAmount", "lastCharX", "minimumContrastRatio", "excludeFromContrastRatioDemands", "getCode", "cache", "_getContrastCache", "adjustedColor", "getColor", "ratio", "ensureContrastRatio", "setColor", "halfContrastCache", "contrastCache", "Float32Array", "_font", "_fontSize", "_weight", "_measureElements", "whiteSpace", "fontKerning", "bold", "italic", "fontStyle", "boldItalic", "body", "_holey", "_flat", "fill", "Map", "font", "weight", "weightBold", "_weightBold", "f", "u", "cp", "_measure", "variant", "DIM_OPACITY", "TEXT_BASELINE", "isLegacyEdge", "isPowerlineGlyph", "codepoint", "isSelectAllActive", "selectionStartLength", "areSelectionValuesReversed", "finalSelectionEnd", "startPlusLength", "b", "l", "_onCharSizeChange", "onCharSizeChange", "_measureStrategy", "onMultipleOptionChange", "_parentElement", "_result", "_measureElement", "Number", "geometry", "firstCell", "chars", "content", "combinedData", "_characterJoiners", "_nextCharacterJoinerId", "joiner", "rangeStartColumn", "getFg", "rangeAttrFG", "rangeAttrBG", "joinedRanges", "_getJoinedRanges", "rangeStartStringIndex", "ranges", "currentStringIndex", "lineStr", "startIndex", "endIndex", "joinerRanges", "_mergeRanges", "error", "_stringRangesToCellRanges", "currentRangeIndex", "currentRange", "getString", "inRange", "newRange", "_isFocused", "_cachedIsFocused", "hasFocus", "queueMicrotask", "_renderer", "_pausedResizeTask", "DebouncedIdleTask", "_isPaused", "_needsFullRefresh", "_isNextRenderRedrawOnly", "_needsSelectionRefresh", "_canvasWidth", "_canvasHeight", "_selectionState", "_onDimensionsChange", "_onRenderedViewportChange", "_onRefreshRequest", "onRefreshRequest", "_renderDebouncer", "RenderDebouncer", "coreBrowserService", "_fullRefresh", "decorationService", "observer", "IntersectionObserver", "_handleIntersectionChange", "threshold", "observe", "disconnect", "entry", "isIntersecting", "intersectionRatio", "flush", "isRedrawOnly", "_fireOnCanvasResize", "renderer", "NON_BREAKING_SPACE_CHAR", "ALL_NON_BREAKING_SPACE_REGEX", "RegExp", "_linkifier", "_dragScrollAmount", "_enabled", "_mouseDownTimeStamp", "_oldHasSelection", "_oldSelectionStart", "_oldSelectionEnd", "_onLinuxMouseSelection", "_onRedrawRequest", "_mouseMoveListener", "_mouseUpListener", "onUserInput", "_trimListener", "onTrim", "_handleTrim", "_handleBufferActivate", "enable", "_model", "SelectionModel", "_activeSelectionMode", "_removeMouseDownListeners", "finalSelectionStart", "lineText", "isLinux", "isLinuxMouseSelection", "_getMouseBufferCoords", "_areCoordsInSelection", "allowWhitespaceOnlySelection", "getRangeLength", "_selectWordAt", "handleTrim", "_getMouseEventScrollAmount", "offset", "terminalHeight", "macOptionClickForcesSelection", "timeStamp", "_handleIncrementalClick", "_handleSingleClick", "detail", "_handleTripleClick", "_addMouseDownListeners", "_dragScrollIntervalTimer", "setInterval", "_dragScroll", "_selectWordAtCursor", "_selectLineAt", "previousSelectionEnd", "_selectToWordAt", "hasWidth", "timeElapsed", "altClickMovesCursor", "coordinates", "moveToCellSequence", "_fireEventIfSelectionChanged", "_fireOnSelectionChange", "_isClickInSelection", "followWrappedLinesAbove", "_convertViewportColToCharacterIndex", "charAt", "leftWideCharCount", "rightWideCharCount", "_isCharWordSeparator", "rightLongCharOffset", "leftLongCharOffset", "slice", "trim", "getCodePoint", "previousBufferLine", "previousLineWordPosition", "_getWordAt", "followWrappedLinesBelow", "nextBufferLine", "nextLineWordPosition", "wordPosition", "wordSeparator", "indexOf", "getWrappedRangeForLine", "first", "last", "createDecorator", "DEFAULT_FOREGROUND", "DEFAULT_ANSI_COLORS", "freeze", "toCss", "channels", "toRgba", "_colors", "_contrastCache", "ColorContrastCache", "_halfContrastCache", "_onChangeColors", "selectionBackgroundTransparent", "selectionInactiveBackgroundTransparent", "blend", "DEFAULT_SELECTION", "_updateRestoreColors", "theme", "_setTheme", "parseColor", "DEFAULT_BACKGROUND", "DEFAULT_CURSOR_ACCENT", "selectionBackground", "selectionInactiveBackground", "NULL_COLOR", "opacity", "black", "red", "green", "yellow", "blue", "cyan", "white", "brightGreen", "brightYellow", "brightBlue", "brightMagenta", "brightCyan", "extendedAnsi", "colorCount", "_restoreColor", "slot", "_restoreColors", "CircularList", "onDeleteEmitter", "onDelete", "onInsert", "onInsertEmitter", "onTrimEmitter", "_maxLength", "_startIndex", "Array", "newMaxLength", "_array", "_getCyclicIndex", "newLength", "_length", "isFull", "deleteCount", "items", "countToTrim", "count", "expandListBy", "clone", "depth", "isArray", "val", "$r", "$g", "$b", "$a", "l2", "l1", "g", "toPaddedHex", "toChannels", "bgR", "fgR", "bgG", "fgB", "bgB", "isOpaque", "rgbaColor", "$litmusColor", "isNode", "willReadFrequently", "globalCompositeOperation", "$ctx", "createLinearGradient", "match", "rgbaMatch", "parseFloat", "fillStyle", "getImageData", "gs", "rs", "pow", "bs", "relativeLuminance", "relativeLuminance2", "rgb", "fgRgba", "bgRgba", "cr", "contrastRatio", "fgG", "resultA", "resultARatio", "bgL", "resultB", "increaseLuminance", "reduceLuminance", "_onScrollApi", "_windowsWrappingHeuristics", "_onBinary", "onBinary", "_onData", "onData", "_onLineFeed", "_onResize", "_onWriteParsed", "onWriteParsed", "InstantiationService", "OptionsService", "BufferService", "LogService", "CoreService", "CoreMouseService", "ICoreMouseService", "UnicodeService", "IUnicodeService", "_charsetService", "CharsetService", "ICharsetService", "OscLinkService", "InputHandler", "unicodeService", "onRequestScrollToBottom", "_writeBuffer", "handleUserInput", "_handleWindowsPtyOptionChange", "markRangeDirty", "scrollBottom", "WriteBuffer", "promiseResult", "write", "LogLevelEnum", "hasWriteSyncWarnHappened", "warn", "writeSync", "maxSubsequentCalls", "isNaN", "MINIMUM_COLS", "MINIMUM_ROWS", "scroll", "eraseAttr", "pageCount", "scrollToTop", "scrollAmount", "id", "registerEscHandler", "registerDcsHandler", "registerCsiHandler", "registerOscHandler", "windowsPty", "buildNumber", "backend", "windowsMode", "_enableWindowsWrappingHeuristics", "disposables", "updateWindowsModeWrappedState", "_listeners", "_disposed", "_event", "arg1", "queue", "call", "arg2", "clearListeners", "from", "to", "GLEVEL", "MAX_PARSEBUFFER_LENGTH", "paramToWindowOption", "setWinLines", "restoreWin", "minimizeWin", "opts", "setWinPosition", "setWinSizePixels", "raiseWin", "lowerWin", "refreshWin", "setWinSizeChars", "maximizeWin", "fullscreenWin", "getWinPosition", "getWinSizePixels", "getScreenSizePixels", "getCellSizePixels", "getWinSizeChars", "getScreenSizeChars", "getIconTitle", "getWinTitle", "pushTitle", "getAttrData", "_curAttrData", "_unicodeService", "EscapeSequenceParser", "_coreMouseService", "_parser", "_parseBuffer", "Uint32Array", "_stringDecoder", "StringToUtf32", "_utf8Decoder", "Utf8ToUtf32", "_windowTitle", "_iconName", "_windowTitleStack", "_iconNameStack", "_eraseAttrDataInternal", "_onRequestBell", "_onRequestRefreshRows", "_onRequestReset", "_onRequestSendFocus", "_onRequestSyncScrollBar", "_onRequestWindowsOptionsReport", "_onA11yChar", "_onA11yTab", "_onColor", "_parseStack", "paused", "cursorStartX", "cursorStartY", "decodedLength", "_specialColors", "_dirtyRowTracker", "setCsiHandlerFallback", "params", "identifier", "identToString", "toArray", "setEscHandlerFallback", "setExecuteHandlerFallback", "code", "setOscHandlerFallback", "setDcsHandlerFallback", "payload", "setPrintHandler", "print", "final", "insertChars", "intermediates", "scrollLeft", "cursorUp", "scrollRight", "cursorDown", "cursorForward", "cursorNextLine", "cursorPrecedingLine", "cursorCharAbsolute", "cursorPosition", "cursorForwardTab", "eraseInDisplay", "prefix", "eraseInLine", "insertLines", "deleteLines", "deleteChars", "scrollUp", "scrollDown", "eraseChars", "cursorBackwardTab", "charPosAbsolute", "hPositionRelative", "repeatPrecedingCharacter", "sendDeviceAttributesPrimary", "sendDeviceAttributesSecondary", "linePosAbsolute", "vPositionRelative", "hVPosition", "tabClear", "setMode", "setModePrivate", "resetMode", "resetModePrivate", "charAttributes", "deviceStatus", "deviceStatusPrivate", "softReset", "setCursorStyle", "setScrollRegion", "saveCursor", "windowOptions", "restoreCursor", "insertColumns", "deleteColumns", "selectProtected", "requestMode", "setExecuteHandler", "bell", "LF", "lineFeed", "carriageReturn", "backspace", "HT", "SO", "shiftOut", "IND", "C1", "NEL", "nextLine", "tabSet", "OscHandler", "setTitle", "setIconName", "setOrReportIndexedColor", "setHyperlink", "setOrReportFgColor", "setOrReportBgColor", "setOrReportCursorColor", "restoreIndexedColor", "restoreFgColor", "restoreCursorColor", "reverseIndex", "keypadApplicationMode", "keypadNumericMode", "fullReset", "setgLevel", "selectDefaultCharset", "flag", "selectCharset", "screenAlignmentPattern", "setErrorHandler", "DcsHandler", "requestStatusString", "WARN", "Promise", "race", "p", "res", "rej", "catch", "err", "parse", "_logSlowResolvingAsync", "prototype", "split", "map", "clearRange", "decode", "subarray", "len", "_preserveStack", "chWidth", "charset", "wraparound", "modes", "insertMode", "markDirty", "setCellFromCodePoint", "wcwidth", "ch", "stringFromCodePoint", "_getCurrentLinkId", "addLineToLink", "wraparoundMode", "bufferRow", "curAttr", "_eraseAttrData", "insertCells", "getNullCell", "NULL_CELL_CODE", "NULL_CELL_WIDTH", "addCodepointToCell", "precedingCodepoint", "isCombined", "convertEol", "reverseWraparound", "_restrictCursor", "nextStop", "originalX", "_setCursor", "_moveCursor", "param", "tabs", "prevStop", "_eraseInBufferLine", "replaceCells", "clearWrap", "respectProtect", "clearMarkers", "_resetBufferLine", "scrollBackSize", "scrollBottomAbsolute", "deleteCells", "_is", "term", "termName", "setgCharset", "DEFAULT_CHARSET", "applicationKeypad", "activeEncoding", "isCursorHidden", "activateAltBuffer", "activateNormalBuffer", "dm", "mouseProtocol", "mouseEncoding", "cs", "b2v", "m", "c1", "c3", "fromColorRGB", "attr", "cSpace", "accu", "hasSubParams", "getSubParams", "advance", "_updateAttrColor", "underlineColor", "_processUnderline", "underlineStyle", "updateExtended", "_processSGR0", "_extractColor", "savedX", "savedY", "savedCurAttrData", "savedCharset", "bottom", "GET_CELL_SIZE_PIXELS", "second", "_savedCharset", "slots", "idx", "exec", "args", "_createHyperlink", "_finishHyperlink", "startsWith", "idParamIndex", "registerLink", "_setOrReportSpecialColor", "collectAndFlag", "shiftElements", "level", "yOffset", "markAllDirty", "isProtected", "DirtyRowTracker", "_disposables", "_value", "_data", "third", "fourth", "navigator", "userAgent", "platform", "isSafari", "majorVersion", "isIpad", "isIphone", "_getKey", "_search", "values", "mid", "midKey", "_tasks", "_i", "enqueue", "task", "_idleCallback", "_cancelCallback", "_requestCallback", "_process", "timeRemaining", "taskDuration", "deadlineRemaining", "lastDeadlineRemaining", "_start", "PriorityTaskQueue", "_createDeadline", "clearTimeout", "duration", "IdleTaskQueue", "requestIdleCallback", "cancelIdleCallback", "_queue", "lastChar", "CHAR_DATA_CODE_INDEX", "WHITESPACE_CELL_CODE", "newObj", "isInvisible", "isFgRGB", "isBgPalette", "isBgDefault", "isAttributeDefault", "getBgColor", "isEmpty", "getUnderlineColorMode", "isUnderlineColorRGB", "isFgPalette", "isFgDefault", "getUnderlineStyle", "_urlId", "_ext", "MAX_BUFFER_SIZE", "_hasScrollback", "_nullCell", "fromCharData", "NULL_CELL_CHAR", "_whitespaceCell", "WHITESPACE_CELL_WIDTH", "_isClearing", "_memoryCleanupQueue", "_memoryCleanupPosition", "_cols", "_rows", "_getCorrectBufferLength", "setupTabStops", "ExtendedAttrs", "BufferLine", "maxLength", "relativeY", "scrollback", "correctBufferLength", "fillAttr", "nullCell", "newCols", "newRows", "addToY", "trimStart", "amountToTrim", "_isReflowEnabled", "_reflow", "_batchedMemoryCleanup", "normalRun", "counted", "cleanupMemory", "_reflowLarger", "_reflowSmaller", "reflowLargerGetLinesToRemove", "newLayoutResult", "reflowLargerCreateNewLayout", "reflowLargerApplyNewLayout", "layout", "_reflowLargerAdjustViewport", "countRemoved", "viewportAdjustments", "toInsert", "wrappedLines", "absoluteY", "lastLineLength", "destLineLengths", "reflowSmallerGetNewLineLengths", "trimmedLines", "linesToAdd", "newLine", "newLines", "countToInsert", "destCol", "srcLineIndex", "destLineIndex", "copyCellsFrom", "cellsToCopy", "srcCol", "getWrappedLineTrimmedLength", "setCell", "originalLines", "originalLinesLength", "nextToInsertIndex", "nextToInsert", "countInsertedSoFar", "originalLineIndex", "insertCountEmitted", "trimRight", "lineIndex", "tabStopWidth", "_removeMarker", "_combined", "_extendedAttrs", "CHAR_DATA_ATTR_INDEX", "CHAR_DATA_CHAR_INDEX", "CHAR_DATA_WIDTH_INDEX", "$startIndex", "eAttrs", "fillCellData", "byteLength", "uint32Cells", "keys", "src", "srcData", "endsInNull", "followingLineStartsWithWide", "bufferAbsoluteY", "oldCols", "destRemainingCells", "srcRemainingCells", "srcTrimmedTineLength", "countToRemove", "toRemove", "countRemovedSoFar", "nextToRemoveIndex", "newLayout", "cellsNeeded", "srcLine", "cellsAvailable", "oldTrimmedLength", "endsWithWide", "newLineLengths", "BufferSet", "_onBufferActivate", "_normal", "Buffer", "fillViewportRows", "_alt", "inactiveBuffer", "setFromCharData", "combined", "getAsCharData", "DEFAULT_COLOR", "DEFAULT_ATTR", "DEFAULT_EXT", "_id", "isDisposed", "_nextId", "_onDispose", "disposable", "CHARSETS", "NUL", "SOH", "STX", "ENQ", "BEL", "BS", "VT", "FF", "DLE", "DC3", "DC4", "SYN", "CAN", "SUB", "GS", "RS", "US", "PAD", "NBH", "SSA", "ESA", "VTS", "PLD", "PLU", "RI", "SS2", "SS3", "PU1", "PU2", "CCH", "MW", "SPA", "EPA", "SOS", "SCI", "CSI", "APC", "KEYCODE_KEY_MAPPINGS", "applicationCursorMode", "modifiers", "keyMapping", "keyString", "toUpperCase", "toLowerCase", "codePoint", "_interim", "startPos", "interim", "Uint8Array", "byte1", "byte3", "byte4", "tmp", "fourStop", "byte2", "BMP_COMBINING", "HIGH_COMBINING", "version", "table", "num", "ucs", "_action", "_callbacks", "_pendingData", "_bufferOffset", "_isSyncWriting", "_syncCalls", "_didUserInput", "chunk", "cb", "_innerWrite", "lastTime", "resolve", "then", "bits", "s2", "low", "RGB_REX", "base", "HASH_REX", "adv", "pad", "PAYLOAD_LIMIT", "_handlers", "create", "_active", "_ident", "_handlerFb", "_stack", "loopPosition", "fallThrough", "handlerList", "handlerIndex", "unhook", "put", "utf32ToString", "success", "handlerResult", "EMPTY_HANDLERS", "Params", "_handler", "_params", "_hitLimit", "hook", "ret", "EMPTY_PARAMS", "next", "addMany", "NON_ASCII_PRINTABLE", "VT500_TRANSITION_TABLE", "unused", "EXECUTABLES", "PRINTABLES", "_transitions", "handlerPos", "initialState", "_printHandlerFb", "_executeHandlerFb", "_csiHandlerFb", "_escHandlerFb", "_errorHandlerFb", "_printHandler", "_executeHandlers", "_csiHandlers", "_escHandlers", "_oscParser", "OscParser", "_dcsParser", "DcsParser", "_errorHandler", "intermediate", "finalCode", "reverse", "clearPrintHandler", "_identifier", "clearExecuteHandler", "clearCsiHandler", "registerHandler", "clearHandler", "setHandlerFallback", "currentState", "_collect", "handlers", "chunkPos", "transition", "addParam", "collect", "abort", "addDigit", "handlersEsc", "jj", "_state", "MAX_VALUE", "k", "addSubParam", "maxSubParamsLength", "Int32Array", "_subParams", "_subParamsLength", "_subParamsIdx", "Uint16Array", "_rejectDigits", "_rejectSubDigits", "_digitIsSub", "newParams", "getSubParamsAll", "cur", "store", "_addons", "instance", "_wrappedAddonDispose", "loadedAddon", "apply", "_buffer", "cursorY", "BufferLineApiView", "_line", "endColumn", "startColumn", "BufferNamespaceApi", "_core", "_onBufferChange", "onBufferChange", "BufferApiView", "_alternate", "alternate", "init", "addCsiHandler", "provider", "versions", "activeVersion", "isUserScrolling", "_cachedBlankLine", "getBg", "topRow", "willBufferBeTrimmed", "bottomRow", "recycle", "copyFrom", "scrollRegionHeight", "disp", "oldYdisp", "glevel", "_charsets", "restrict", "X10", "ctrl", "VT200", "DRAG", "ANY", "eventCode", "isSGR", "S", "SGR", "SGR_PIXELS", "_protocols", "_encodings", "_activeProtocol", "_activeEncoding", "_lastEvent", "_onProtocolChange", "name", "addProtocol", "DEFAULT_ENCODINGS", "addEncoding", "_equalEvents", "report", "triggerBinaryEvent", "down", "drag", "move", "e1", "e2", "DEFAULT_MODES", "DEFAULT_DEC_PRIVATE_MODES", "_onUserInput", "_onRequestScrollToBottom", "wasUserInput", "disableStdin", "ILogService", "_decorations", "SortedList", "_onDecorationRegistered", "_onDecorationRemoved", "Decoration", "markerDispose", "insert", "getKeyIterator", "xmin", "xmax", "forEachByKey", "$xmax", "$xmin", "_cachedBg", "_cachedFg", "foregroundColor", "_entries", "service", "_services", "getService", "ctor", "serviceDependencies", "getServiceDependencies", "sort", "serviceArgs", "dependency", "firstServiceArgPos", "optionsKeyToLogLevel", "trace", "TRACE", "info", "ERROR", "OFF", "_logLevel", "_updateLogLevel", "traceLogger", "optionalParams", "message", "_evalLazyOptionalParams", "logger", "_log", "DEBUG", "log", "INFO", "_target", "descriptor", "fn", "JSON", "stringify", "DEFAULT_OPTIONS", "cursorWidth", "customGlyphs", "allowProposedApi", "allowTransparency", "FONT_WEIGHT_OPTIONS", "_onOptionChange", "defaultOptions", "_sanitizeAndValidateOption", "_setupOptions", "eventKey", "propName", "setter", "desc", "getter", "defineProperty", "_entriesWithId", "_dataByLinkId", "_removeMarkerFromLink", "castData", "_getEntryIdKey", "linkId", "linkData", "DI_TARGET", "DI_DEPENDENCIES", "serviceRegistry", "arguments", "decorator", "_providers", "_onChange", "onChange", "UnicodeV6", "defaultProvider", "_activeProvider", "getStringCellWidth", "cachedModule", "moduleId", "__webpack_modules__", "__webpack_require__", "_addonManager", "AddonManager", "_publicOptions", "_checkReadonlyOptions", "_checkProposedApi", "onBell", "parser", "ParserApi", "unicode", "UnicodeApi", "mouseTrackingMode", "applicationCursorKeysMode", "applicationKeypadMode", "originMode", "reverseWraparoundMode", "sendFocusMode", "columns", "_verifyIntegers", "attachCustomKeyEventHandler", "registerCharacterJoiner", "deregisterCharacterJoiner", "cursorYOffset", "registerMarker", "decorationOptions", "_verifyPositiveIntegers", "getSelection", "getSelectionPosition", "scrollPages", "scrollToLine", "loadAddon", "strings", "Infinity", "root", "factory", "exports", "module", "define", "amd", "terminal", "this", "_terminal", "dispose", "proposeDimensions", "isNaN", "dims", "cols", "core", "rows", "_renderService", "clear", "resize", "e", "t", "element", "parentElement", "_core", "dimensions", "cell", "height", "scrollbarWidth", "options", "scrollback", "viewport", "scrollBarWidth", "parentElementStyle", "window", "getComputedStyle", "parseInt", "getPropertyValue", "max", "elementStyle", "parentElementWidth", "Math", "floor", "availableWidth", "css", "width", "availableHeight", "root", "factory", "exports", "module", "define", "amd", "self", "e", "t", "_terminal", "_regex", "_handler", "_options", "y", "callback", "links", "LinkComputer", "computeLink", "this", "_addCallbacks", "map", "link", "leave", "hover", "event", "uri", "range", "regex", "terminal", "activate", "rex", "RegExp", "source", "flags", "lines", "startLineIndex", "_getWindowedLineStrings", "line", "join", "match", "result", "exec", "text", "url", "URL", "urlText", "decodeURI", "toString", "startY", "startX", "_mapStrIdx", "index", "endY", "endX", "length", "start", "x", "end", "push", "lineIndex", "topIdx", "bottomIdx", "content", "buffer", "active", "getLine", "currentContent", "translateToString", "isWrapped", "indexOf", "reverse", "rowIndex", "stringIndex", "buf", "cell", "getNullCell", "i", "getCell", "chars", "getChars", "getWidth", "n", "__webpack_module_cache__", "__webpack_require__", "moduleId", "cachedModule", "__webpack_modules__", "strictUrlRegex", "handleLink", "newWindow", "window", "open", "opener", "location", "href", "console", "warn", "options", "urlRegex", "_linkProvider", "registerLinkProvider", "WebLinkProvider", "dispose", "import_react", "import_jsx_dev_runtime", "_s", "_s", "_c"]
}
