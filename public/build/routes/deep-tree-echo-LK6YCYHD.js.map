{
  "version": 3,
  "sources": ["empty-module:~/services/inferenceEngine.server", "../../../app/routes/deep-tree-echo.tsx", "../../../app/components/DeepTreeEchoHomeMap.tsx"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/deep-tree-echo.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/deep-tree-echo.tsx\");\n  import.meta.hot.lastModified = \"1760695280618.8047\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, useSubmit } from \"@remix-run/react\";\nimport { useState } from \"react\";\nimport DeepTreeEchoHomeMap from \"~/components/DeepTreeEchoHomeMap\";\nimport { getInferenceEngine } from \"~/services/inferenceEngine.server\";\n\n// Mock user ID for demo purposes (in real app, get from session)\nconst DEMO_USER_ID = \"demo-user-123\";\nexport async function loader({\n  request\n}) {\n  const url = new URL(request.url);\n  const room = url.searchParams.get(\"room\");\n  return json({\n    title: \"Deep Tree Echo Home\",\n    description: \"Navigate the hierarchical cognitive architecture with inference-powered insights\",\n    initialRoom: room || \"echo-home-root\"\n  });\n}\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  const room = formData.get(\"room\");\n  const query = formData.get(\"query\");\n  if (!room || !query) {\n    return json({\n      error: \"Missing room or query parameter\"\n    }, {\n      status: 400\n    });\n  }\n  try {\n    const inferenceEngine = getInferenceEngine(DEMO_USER_ID);\n\n    // Build parent path for the room\n    const getParentPath = roomId => {\n      const treeStructure = inferenceEngine.getTreeStructure();\n      const path = [];\n      let currentNode = treeStructure.get(roomId);\n      while (currentNode?.parent) {\n        path.unshift(currentNode.parent);\n        currentNode = treeStructure.get(currentNode.parent);\n      }\n      return path;\n    };\n    const parentPath = getParentPath(room);\n    const node = inferenceEngine.getNode(room);\n    const depth = node?.level || 0;\n    const context = {\n      currentRoom: room,\n      parentPath,\n      depth,\n      sessionId: \"demo-session-\" + Date.now(),\n      userId: DEMO_USER_ID\n    };\n    const result = await inferenceEngine.performInference(query, context);\n    return json({\n      success: true,\n      inference: result,\n      nodeInfo: {\n        name: node?.name || room,\n        type: node?.type || 'unknown',\n        level: depth,\n        children: node?.children || []\n      }\n    });\n  } catch (error) {\n    console.error(\"Inference error:\", error);\n    return json({\n      error: \"Failed to perform inference: \" + (error instanceof Error ? error.message : \"Unknown error\")\n    }, {\n      status: 500\n    });\n  }\n}\nexport default function DeepTreeEchoHomePage() {\n  _s();\n  const {\n    title,\n    description,\n    initialRoom\n  } = useLoaderData();\n  const submit = useSubmit();\n  const [activeRoom, setActiveRoom] = useState(initialRoom);\n  const [inferenceHistory, setInferenceHistory] = useState([]);\n  const handleRoomSelect = room => {\n    setActiveRoom(room);\n    // Update URL to reflect current room\n    window.history.pushState({}, '', `/deep-tree-echo?room=${room}`);\n  };\n  const handleInferenceRequest = async (room, query) => {\n    // Submit inference request to the action\n    const formData = new FormData();\n    formData.append(\"room\", room);\n    formData.append(\"query\", query);\n    return new Promise((resolve, reject) => {\n      submit(formData, {\n        method: \"POST\",\n        action: `/deep-tree-echo`,\n        onError: error => {\n          console.error(\"Inference request failed:\", error);\n          reject(error);\n        },\n        onSuccess: data => {\n          if (data.error) {\n            reject(new Error(data.error));\n            return;\n          }\n\n          // Add to inference history\n          setInferenceHistory(prev => [{\n            room: data.nodeInfo?.name || room,\n            query,\n            result: data.inference,\n            timestamp: new Date()\n          }, ...prev.slice(0, 9)]); // Keep last 10 entries\n\n          // Transform the result to match the expected interface\n          const result = {\n            reasoning: data.inference.reasoning,\n            confidence: data.inference.confidence,\n            patterns: data.inference.patterns,\n            predictions: data.inference.predictions,\n            nextActions: data.inference.nextActions,\n            treeContext: data.inference.treeContext\n          };\n          resolve(result);\n        }\n      });\n    });\n  };\n  return <div className=\"h-screen flex flex-col\">\n      {/* Header */}\n      <header className=\"bg-card text-card-foreground px-6 py-4 border-b border-border\">\n        <div className=\"flex justify-between items-start\">\n          <div>\n            <h1 className=\"text-2xl font-bold flex items-center\">\n              <span className=\"bg-gradient-to-r from-purple-400 to-blue-500 bg-clip-text text-transparent\">\n                {title}\n              </span>\n              <span className=\"ml-3 text-sm bg-purple-500/20 text-purple-400 px-2 py-1 rounded-full\">\n                with Inference Engine\n              </span>\n            </h1>\n            <p className=\"text-sm opacity-70 mt-1\">{description}</p>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm opacity-70\">Active Room</div>\n            <div className=\"font-medium text-primary\">{activeRoom}</div>\n          </div>\n        </div>\n      </header>\n      \n      {/* Main content area */}\n      <div className=\"flex-1 flex overflow-hidden\">\n        {/* Main Deep Tree Echo Home Map */}\n        <main className=\"flex-1 overflow-hidden\">\n          <DeepTreeEchoHomeMap onRoomSelect={handleRoomSelect} onInferenceRequest={handleInferenceRequest} />\n        </main>\n        \n        {/* Inference History Sidebar */}\n        {inferenceHistory.length > 0 && <aside className=\"w-80 bg-card/50 border-l border-border overflow-y-auto\">\n            <div className=\"p-4\">\n              <h3 className=\"text-lg font-semibold mb-4\">Inference History</h3>\n              <div className=\"space-y-3\">\n                {inferenceHistory.map((entry, index) => <div key={index} className=\"bg-card/80 rounded-lg p-3 text-sm\">\n                    <div className=\"flex justify-between items-start mb-2\">\n                      <div className=\"font-medium text-purple-400\">{entry.room}</div>\n                      <div className=\"text-xs opacity-50\">\n                        {entry.timestamp.toLocaleTimeString()}\n                      </div>\n                    </div>\n                    <div className=\"text-xs opacity-70 mb-2\">\n                      Query: {entry.query}\n                    </div>\n                    <div className=\"text-xs opacity-60\">\n                      Confidence: {Math.round(entry.result.confidence * 100)}%\n                    </div>\n                    {entry.result.patterns && entry.result.patterns.length > 0 && <div className=\"mt-2 flex flex-wrap gap-1\">\n                        {entry.result.patterns.slice(0, 2).map((pattern, i) => <span key={i} className=\"text-xs bg-blue-500/20 text-blue-400 px-1 py-0.5 rounded\">\n                            {pattern}\n                          </span>)}\n                        {entry.result.patterns.length > 2 && <span className=\"text-xs opacity-50\">+{entry.result.patterns.length - 2} more</span>}\n                      </div>}\n                  </div>)}\n              </div>\n            </div>\n          </aside>}\n      </div>\n      \n      {/* Footer with system status */}\n      <footer className=\"bg-card text-card-foreground px-6 py-3 border-t border-border text-sm\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <div>\n              Current location: <span className=\"font-medium text-primary\">{activeRoom}</span>\n            </div>\n            <div className=\"flex items-center\">\n              <div className=\"w-2 h-2 rounded-full bg-green-500 mr-2\"></div>\n              <span className=\"opacity-70\">Inference Engine Active</span>\n            </div>\n          </div>\n          <div className=\"opacity-70\">\n            Deep Tree Echo \u2022 Hierarchical Cognitive Architecture \u2022 {inferenceHistory.length} inferences performed\n          </div>\n        </div>\n      </footer>\n    </div>;\n}\n_s(DeepTreeEchoHomePage, \"z8RDvGI/F3pefx4UE6jVnZ32Qd0=\", false, function () {\n  return [useLoaderData, useSubmit];\n});\n_c = DeepTreeEchoHomePage;\nvar _c;\n$RefreshReg$(_c, \"DeepTreeEchoHomePage\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/DeepTreeEchoHomeMap.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/DeepTreeEchoHomeMap.tsx\");\n  import.meta.hot.lastModified = \"1760695398236.7886\";\n}\n// REMIX HMR END\n\nimport { useState } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { FiBook, FiCode, FiCpu, FiDatabase, FiMessageCircle, FiFeather, FiEye, FiArrowLeft, FiInfo, FiChevronRight, FiChevronDown, FiHome, FiGitBranch, FiLayers, FiActivity, FiZap, FiTrendingUp } from 'react-icons/fi';\n\n// Extended room types for deep tree structure\n\nconst TREE_NODES = [\n// Root node\n{\n  id: 'echo-home-root',\n  name: 'Echo Home Root',\n  description: 'The central root of the Deep Tree Echo Home cognitive architecture',\n  icon: <FiHome size={24} />,\n  color: 'bg-purple-600',\n  type: 'room',\n  children: ['memory-library', 'workshop', 'visualization-studio', 'training-hall', 'observatory', 'garden', 'communications-hub'],\n  level: 0,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.9,\n    memoryDensity: 0.8,\n    connectionWeight: 1.0\n  }\n},\n// Level 1 - Main rooms\n{\n  id: 'memory-library',\n  name: 'Memory Library',\n  description: 'Repository of stored experiences, knowledge, and learned patterns',\n  icon: <FiBook size={24} />,\n  color: 'bg-indigo-500',\n  type: 'memory',\n  parent: 'echo-home-root',\n  children: ['episodic-vault', 'semantic-archive', 'procedural-workshop', 'associative-web'],\n  level: 1,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.8,\n    memoryDensity: 0.95,\n    connectionWeight: 0.9\n  }\n}, {\n  id: 'workshop',\n  name: 'Workshop',\n  description: 'Creative space for coding, development, and technical implementation',\n  icon: <FiCode size={24} />,\n  color: 'bg-blue-500',\n  type: 'room',\n  parent: 'echo-home-root',\n  children: ['code-forge', 'pattern-lab', 'neural-studio', 'architecture-space'],\n  level: 1,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.7,\n    memoryDensity: 0.6,\n    connectionWeight: 0.8\n  }\n}, {\n  id: 'visualization-studio',\n  name: 'Visualization Studio',\n  description: 'Transforms abstract data into insightful visual representations',\n  icon: <FiEye size={24} />,\n  color: 'bg-purple-500',\n  type: 'pattern',\n  parent: 'echo-home-root',\n  children: ['data-canvas', 'concept-mapper', 'flow-visualizer', 'insight-gallery'],\n  level: 1,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.85,\n    memoryDensity: 0.7,\n    connectionWeight: 0.75\n  }\n}, {\n  id: 'training-hall',\n  name: 'Training Hall',\n  description: 'Where echo state networks and neural architectures are refined',\n  icon: <FiCpu size={24} />,\n  color: 'bg-red-500',\n  type: 'pattern',\n  parent: 'echo-home-root',\n  children: ['esn-gymnasium', 'pattern-dojo', 'learning-arena', 'adaptation-chamber'],\n  level: 1,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.9,\n    memoryDensity: 0.8,\n    connectionWeight: 0.95\n  }\n}, {\n  id: 'observatory',\n  name: 'Observatory',\n  description: 'Space for insights, analytics, and meta-cognitive reflection',\n  icon: <FiDatabase size={24} />,\n  color: 'bg-yellow-500',\n  type: 'concept',\n  parent: 'echo-home-root',\n  children: ['insight-telescope', 'analytics-hub', 'reflection-mirror', 'metacognition-center'],\n  level: 1,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.75,\n    memoryDensity: 0.85,\n    connectionWeight: 0.8\n  }\n}, {\n  id: 'garden',\n  name: 'Garden',\n  description: 'Nurtures creative and philosophical thinking through organic growth patterns',\n  icon: <FiFeather size={24} />,\n  color: 'bg-green-500',\n  type: 'concept',\n  parent: 'echo-home-root',\n  children: ['philosophy-grove', 'creativity-meadow', 'synthesis-garden', 'emergence-forest'],\n  level: 1,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.6,\n    memoryDensity: 0.9,\n    connectionWeight: 0.7\n  }\n}, {\n  id: 'communications-hub',\n  name: 'Communications Hub',\n  description: 'Central nexus for information exchange and conversation',\n  icon: <FiMessageCircle size={24} />,\n  color: 'bg-cyan-500',\n  type: 'room',\n  parent: 'echo-home-root',\n  children: ['dialogue-chamber', 'feedback-loop', 'integration-nexus', 'broadcast-tower'],\n  level: 1,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.8,\n    memoryDensity: 0.75,\n    connectionWeight: 0.85\n  }\n},\n// Level 2 - Sub-rooms (Memory Library)\n{\n  id: 'episodic-vault',\n  name: 'Episodic Vault',\n  description: 'Personal experiences and autobiographical memories',\n  icon: <FiActivity size={20} />,\n  color: 'bg-indigo-400',\n  type: 'memory',\n  parent: 'memory-library',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.7,\n    memoryDensity: 1.0,\n    connectionWeight: 0.8\n  }\n}, {\n  id: 'semantic-archive',\n  name: 'Semantic Archive',\n  description: 'Facts, concepts, and general knowledge',\n  icon: <FiLayers size={20} />,\n  color: 'bg-indigo-400',\n  type: 'concept',\n  parent: 'memory-library',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.8,\n    memoryDensity: 0.9,\n    connectionWeight: 0.85\n  }\n}, {\n  id: 'procedural-workshop',\n  name: 'Procedural Workshop',\n  description: 'Skills, procedures, and how-to knowledge',\n  icon: <FiGitBranch size={20} />,\n  color: 'bg-indigo-400',\n  type: 'pattern',\n  parent: 'memory-library',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.9,\n    memoryDensity: 0.7,\n    connectionWeight: 0.9\n  }\n}, {\n  id: 'associative-web',\n  name: 'Associative Web',\n  description: 'Connected ideas and conceptual relationships',\n  icon: <FiZap size={20} />,\n  color: 'bg-indigo-400',\n  type: 'concept',\n  parent: 'memory-library',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.95,\n    memoryDensity: 0.8,\n    connectionWeight: 0.95\n  }\n},\n// Level 2 - Sub-rooms (Workshop)\n{\n  id: 'code-forge',\n  name: 'Code Forge',\n  description: 'Software development and coding environment',\n  icon: <FiCode size={20} />,\n  color: 'bg-blue-400',\n  type: 'room',\n  parent: 'workshop',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.6,\n    memoryDensity: 0.5,\n    connectionWeight: 0.7\n  }\n}, {\n  id: 'pattern-lab',\n  name: 'Pattern Lab',\n  description: 'Pattern analysis and recognition laboratory',\n  icon: <FiTrendingUp size={20} />,\n  color: 'bg-blue-400',\n  type: 'pattern',\n  parent: 'workshop',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.95,\n    memoryDensity: 0.8,\n    connectionWeight: 0.9\n  }\n}, {\n  id: 'neural-studio',\n  name: 'Neural Studio',\n  description: 'Neural network design and experimentation',\n  icon: <FiActivity size={20} />,\n  color: 'bg-blue-400',\n  type: 'pattern',\n  parent: 'workshop',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.9,\n    memoryDensity: 0.7,\n    connectionWeight: 0.95\n  }\n}, {\n  id: 'architecture-space',\n  name: 'Architecture Space',\n  description: 'System architecture and design thinking',\n  icon: <FiLayers size={20} />,\n  color: 'bg-blue-400',\n  type: 'concept',\n  parent: 'workshop',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.8,\n    memoryDensity: 0.6,\n    connectionWeight: 0.8\n  }\n},\n// Level 2 - Sub-rooms (Other areas) - abbreviated for brevity\n{\n  id: 'data-canvas',\n  name: 'Data Canvas',\n  description: 'Raw data visualization and exploration',\n  icon: <FiEye size={20} />,\n  color: 'bg-purple-400',\n  type: 'room',\n  parent: 'visualization-studio',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.7,\n    memoryDensity: 0.6,\n    connectionWeight: 0.7\n  }\n}, {\n  id: 'concept-mapper',\n  name: 'Concept Mapper',\n  description: 'Conceptual mapping and relationship visualization',\n  icon: <FiGitBranch size={20} />,\n  color: 'bg-purple-400',\n  type: 'concept',\n  parent: 'visualization-studio',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.9,\n    memoryDensity: 0.8,\n    connectionWeight: 0.85\n  }\n}, {\n  id: 'flow-visualizer',\n  name: 'Flow Visualizer',\n  description: 'Process flow and temporal pattern visualization',\n  icon: <FiTrendingUp size={20} />,\n  color: 'bg-purple-400',\n  type: 'pattern',\n  parent: 'visualization-studio',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.85,\n    memoryDensity: 0.7,\n    connectionWeight: 0.8\n  }\n}, {\n  id: 'insight-gallery',\n  name: 'Insight Gallery',\n  description: 'Gallery of insights and discoveries',\n  icon: <FiDatabase size={20} />,\n  color: 'bg-purple-400',\n  type: 'memory',\n  parent: 'visualization-studio',\n  children: [],\n  level: 2,\n  metadata: {\n    isInferenceEnabled: true,\n    patternStrength: 0.75,\n    memoryDensity: 0.9,\n    connectionWeight: 0.8\n  }\n}\n\n// Add more level 2 nodes as needed...\n];\nconst DeepTreeEchoHomeMap = ({\n  onRoomSelect,\n  onInferenceRequest\n}) => {\n  _s();\n  const [selectedRoom, setSelectedRoom] = useState('echo-home-root');\n  const [navigationStack, setNavigationStack] = useState(['echo-home-root']);\n  const [showInfo, setShowInfo] = useState(false);\n  const [expandedNodes, setExpandedNodes] = useState(new Set(['echo-home-root']));\n  const [viewMode, setViewMode] = useState('tree');\n  const [inference, setInference] = useState(null);\n  const [isInferenceLoading, setIsInferenceLoading] = useState(false);\n  const currentNode = TREE_NODES.find(node => node.id === selectedRoom);\n  const children = TREE_NODES.filter(node => node.parent === selectedRoom);\n  const parentNode = currentNode?.parent ? TREE_NODES.find(node => node.id === currentNode.parent) : null;\n  const rootPath = getCurrentPath(selectedRoom);\n  function getCurrentPath(roomId) {\n    const path = [];\n    let current = TREE_NODES.find(node => node.id === roomId);\n    while (current) {\n      path.unshift(current);\n      current = current.parent ? TREE_NODES.find(node => node.id === current.parent) : undefined;\n    }\n    return path;\n  }\n  const handleRoomClick = roomId => {\n    if (roomId !== selectedRoom) {\n      setNavigationStack(prev => [...prev, roomId]);\n      setSelectedRoom(roomId);\n      if (onRoomSelect) {\n        onRoomSelect(roomId);\n      }\n      // Auto-expand the selected node if it has children\n      const node = TREE_NODES.find(n => n.id === roomId);\n      if (node && node.children.length > 0) {\n        setExpandedNodes(prev => new Set([...prev, roomId]));\n      }\n    }\n  };\n  const handleBackClick = () => {\n    if (navigationStack.length > 1) {\n      const newStack = navigationStack.slice(0, -1);\n      const previousRoom = newStack[newStack.length - 1];\n      setNavigationStack(newStack);\n      setSelectedRoom(previousRoom);\n      if (onRoomSelect) {\n        onRoomSelect(previousRoom);\n      }\n    }\n  };\n  const toggleNodeExpanded = nodeId => {\n    setExpandedNodes(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(nodeId)) {\n        newSet.delete(nodeId);\n      } else {\n        newSet.add(nodeId);\n      }\n      return newSet;\n    });\n  };\n  const handleInferenceRequest = async roomId => {\n    if (!onInferenceRequest) return;\n    setIsInferenceLoading(true);\n    try {\n      const result = await onInferenceRequest(roomId, `Analyze patterns and insights for ${roomId}`);\n      setInference(result);\n    } catch (error) {\n      console.error('Inference request failed:', error);\n    } finally {\n      setIsInferenceLoading(false);\n    }\n  };\n  const getNodeTypeIcon = type => {\n    switch (type) {\n      case 'memory':\n        return <FiActivity size={16} className=\"text-indigo-400\" />;\n      case 'concept':\n        return <FiLayers size={16} className=\"text-blue-400\" />;\n      case 'pattern':\n        return <FiTrendingUp size={16} className=\"text-purple-400\" />;\n      default:\n        return <FiHome size={16} className=\"text-gray-400\" />;\n    }\n  };\n  const renderTreeView = () => <div className=\"space-y-4\">\n      <div className=\"bg-card/30 rounded-lg p-4\">\n        <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n          <FiGitBranch className=\"mr-2\" />\n          Deep Tree Structure\n        </h3>\n        <TreeNodeRenderer node={TREE_NODES.find(n => n.id === 'echo-home-root')} level={0} expandedNodes={expandedNodes} selectedRoom={selectedRoom} onToggleExpanded={toggleNodeExpanded} onNodeClick={handleRoomClick} onInferenceRequest={handleInferenceRequest} />\n      </div>\n    </div>;\n  const renderMapView = () => <div className=\"space-y-4\">\n      {/* Current Room Detail */}\n      {currentNode && <motion.div initial={{\n      opacity: 0,\n      y: 10\n    }} animate={{\n      opacity: 1,\n      y: 0\n    }} className=\"bg-card/30 rounded-lg p-6\">\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-start\">\n              <div className={`p-3 rounded-full ${currentNode.color} mr-4`}>\n                {currentNode.icon}\n              </div>\n              <div>\n                <h2 className=\"text-xl font-semibold\">{currentNode.name}</h2>\n                <p className=\"text-sm opacity-70 mt-1\">{currentNode.description}</p>\n                <div className=\"flex items-center mt-2 space-x-2\">\n                  {getNodeTypeIcon(currentNode.type)}\n                  <span className=\"text-xs uppercase tracking-wide opacity-60\">{currentNode.type}</span>\n                  <span className=\"text-xs opacity-50\">\u2022</span>\n                  <span className=\"text-xs opacity-60\">Level {currentNode.level}</span>\n                </div>\n              </div>\n            </div>\n            <button onClick={() => handleInferenceRequest(selectedRoom)} disabled={isInferenceLoading} className=\"px-3 py-1 bg-purple-500/20 text-purple-400 rounded-md text-sm hover:bg-purple-500/30 disabled:opacity-50\">\n              {isInferenceLoading ? 'Analyzing...' : 'Analyze'}\n            </button>\n          </div>\n\n          {/* Metadata visualization */}\n          {currentNode.metadata && <div className=\"mt-4 grid grid-cols-3 gap-3\">\n              <div className=\"bg-card/50 p-2 rounded\">\n                <div className=\"text-xs opacity-70\">Pattern Strength</div>\n                <div className=\"flex items-center mt-1\">\n                  <div className=\"h-1.5 bg-gray-700 rounded-full flex-1 mr-2\">\n                    <div className=\"h-1.5 bg-purple-500 rounded-full transition-all duration-300\" style={{\n                width: `${(currentNode.metadata.patternStrength || 0) * 100}%`\n              }} />\n                  </div>\n                  <span className=\"text-xs\">{Math.round((currentNode.metadata.patternStrength || 0) * 100)}%</span>\n                </div>\n              </div>\n              <div className=\"bg-card/50 p-2 rounded\">\n                <div className=\"text-xs opacity-70\">Memory Density</div>\n                <div className=\"flex items-center mt-1\">\n                  <div className=\"h-1.5 bg-gray-700 rounded-full flex-1 mr-2\">\n                    <div className=\"h-1.5 bg-indigo-500 rounded-full transition-all duration-300\" style={{\n                width: `${(currentNode.metadata.memoryDensity || 0) * 100}%`\n              }} />\n                  </div>\n                  <span className=\"text-xs\">{Math.round((currentNode.metadata.memoryDensity || 0) * 100)}%</span>\n                </div>\n              </div>\n              <div className=\"bg-card/50 p-2 rounded\">\n                <div className=\"text-xs opacity-70\">Connection Weight</div>\n                <div className=\"flex items-center mt-1\">\n                  <div className=\"h-1.5 bg-gray-700 rounded-full flex-1 mr-2\">\n                    <div className=\"h-1.5 bg-cyan-500 rounded-full transition-all duration-300\" style={{\n                width: `${(currentNode.metadata.connectionWeight || 0) * 100}%`\n              }} />\n                  </div>\n                  <span className=\"text-xs\">{Math.round((currentNode.metadata.connectionWeight || 0) * 100)}%</span>\n                </div>\n              </div>\n            </div>}\n        </motion.div>}\n\n      {/* Children Grid */}\n      {children.length > 0 && <div>\n          <h3 className=\"text-lg font-semibold mb-3\">Sub-Nodes</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {children.map(child => <motion.div key={child.id} whileHover={{\n          scale: 1.02\n        }} whileTap={{\n          scale: 0.98\n        }} onClick={() => handleRoomClick(child.id)} className=\"cursor-pointer bg-card hover:bg-card/90 rounded-lg shadow-md overflow-hidden border border-border\">\n                <div className={`h-2 ${child.color}`}></div>\n                <div className=\"p-4\">\n                  <div className=\"flex items-center mb-2\">\n                    <div className={`p-2 rounded-full ${child.color}/20 mr-3`}>\n                      {child.icon}\n                    </div>\n                    <div>\n                      <h4 className=\"font-medium\">{child.name}</h4>\n                      <div className=\"flex items-center mt-1\">\n                        {getNodeTypeIcon(child.type)}\n                        <span className=\"text-xs opacity-60 ml-1\">{child.type}</span>\n                      </div>\n                    </div>\n                  </div>\n                  <p className=\"text-sm opacity-70 line-clamp-2\">{child.description}</p>\n                </div>\n              </motion.div>)}\n          </div>\n        </div>}\n    </div>;\n  return <div className=\"h-full flex flex-col overflow-hidden\">\n      {/* Header */}\n      <div className=\"flex-none h-16 bg-card text-card-foreground px-4 py-2 flex justify-between items-center border-b border-border\">\n        <div className=\"flex items-center space-x-3\">\n          {selectedRoom !== 'echo-home-root' && <button onClick={handleBackClick} className=\"p-2 hover:bg-primary/20 rounded-md\">\n              <FiArrowLeft size={18} />\n            </button>}\n          <div>\n            <div className=\"font-medium\">{currentNode?.name || 'Deep Tree Echo Home'}</div>\n            <div className=\"text-xs opacity-60\">\n              {rootPath.map(node => node.name).join(' \u2192 ')}\n            </div>\n          </div>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"flex bg-card border border-border rounded-md\">\n            <button onClick={() => setViewMode('tree')} className={`p-2 ${viewMode === 'tree' ? 'bg-primary/20 text-primary' : 'hover:bg-primary/20'} rounded-l-md`}>\n              <FiGitBranch size={16} />\n            </button>\n            <button onClick={() => setViewMode('map')} className={`p-2 ${viewMode === 'map' ? 'bg-primary/20 text-primary' : 'hover:bg-primary/20'} rounded-r-md`}>\n              <FiLayers size={16} />\n            </button>\n          </div>\n          <button onClick={() => setShowInfo(!showInfo)} className={`p-2 rounded-md ${showInfo ? 'bg-primary/20 text-primary' : 'hover:bg-primary/20'}`}>\n            <FiInfo size={18} />\n          </button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 overflow-auto p-4 space-y-4\">\n        {showInfo && <motion.div initial={{\n        opacity: 0,\n        y: -10\n      }} animate={{\n        opacity: 1,\n        y: 0\n      }} className=\"bg-card/80 backdrop-blur-sm p-4 rounded-lg shadow-md border border-border\">\n            <h3 className=\"text-lg font-semibold mb-2\">Deep Tree Echo Home</h3>\n            <p className=\"text-sm opacity-80\">\n              Navigate through the hierarchical cognitive architecture where each room contains specialized sub-rooms. \n              The inference engine analyzes patterns and provides insights based on your current location in the tree structure.\n            </p>\n          </motion.div>}\n\n        {viewMode === 'tree' ? renderTreeView() : renderMapView()}\n\n        {/* Inference Results */}\n        <AnimatePresence>\n          {inference && <motion.div initial={{\n          opacity: 0,\n          y: 20\n        }} animate={{\n          opacity: 1,\n          y: 0\n        }} exit={{\n          opacity: 0,\n          y: -20\n        }} className=\"bg-card/80 backdrop-blur-sm rounded-lg p-4 border border-purple-500/30\">\n              <h3 className=\"text-lg font-semibold mb-3 flex items-center\">\n                <FiActivity className=\"mr-2 text-purple-400\" />\n                Inference Results\n                <span className=\"ml-2 text-sm bg-purple-500/20 text-purple-400 px-2 py-1 rounded\">\n                  {Math.round(inference.confidence * 100)}% confidence\n                </span>\n              </h3>\n              \n              <div className=\"space-y-3\">\n                <div>\n                  <h4 className=\"font-medium text-sm mb-1\">Reasoning:</h4>\n                  <p className=\"text-sm opacity-80\">{inference.reasoning}</p>\n                </div>\n                \n                {inference.patterns.length > 0 && <div>\n                    <h4 className=\"font-medium text-sm mb-1\">Detected Patterns:</h4>\n                    <div className=\"flex flex-wrap gap-1\">\n                      {inference.patterns.map((pattern, i) => <span key={i} className=\"text-xs bg-blue-500/20 text-blue-400 px-2 py-1 rounded\">\n                          {pattern}\n                        </span>)}\n                    </div>\n                  </div>}\n                \n                {inference.nextActions.length > 0 && <div>\n                    <h4 className=\"font-medium text-sm mb-1\">Suggested Actions:</h4>\n                    <ul className=\"text-sm opacity-80 space-y-1\">\n                      {inference.nextActions.map((action, i) => <li key={i} className=\"flex items-start\">\n                          <FiChevronRight size={12} className=\"mt-1 mr-1 text-cyan-400\" />\n                          {action}\n                        </li>)}\n                    </ul>\n                  </div>}\n              </div>\n            </motion.div>}\n        </AnimatePresence>\n      </div>\n    </div>;\n};\n\n// Tree Node Renderer Component\n_s(DeepTreeEchoHomeMap, \"4fJQIYXXXOzU14rTSHMBVacCY+o=\");\n_c = DeepTreeEchoHomeMap;\nconst TreeNodeRenderer = ({\n  node,\n  level,\n  expandedNodes,\n  selectedRoom,\n  onToggleExpanded,\n  onNodeClick,\n  onInferenceRequest\n}) => {\n  const isExpanded = expandedNodes.has(node.id);\n  const isSelected = selectedRoom === node.id;\n  const children = TREE_NODES.filter(n => n.parent === node.id);\n  const hasChildren = children.length > 0;\n  const getNodeTypeIcon = type => {\n    switch (type) {\n      case 'memory':\n        return <FiActivity size={14} className=\"text-indigo-400\" />;\n      case 'concept':\n        return <FiLayers size={14} className=\"text-blue-400\" />;\n      case 'pattern':\n        return <FiTrendingUp size={14} className=\"text-purple-400\" />;\n      default:\n        return <FiHome size={14} className=\"text-gray-400\" />;\n    }\n  };\n  return <div className={`ml-${level * 4}`}>\n      <div className={`flex items-center p-2 rounded-md cursor-pointer hover:bg-card/50 ${isSelected ? 'bg-card/70 border border-primary/30' : ''}`} onClick={() => onNodeClick(node.id)}>\n        {hasChildren && <button onClick={e => {\n        e.stopPropagation();\n        onToggleExpanded(node.id);\n      }} className=\"mr-2 p-1 hover:bg-primary/20 rounded\">\n            {isExpanded ? <FiChevronDown size={12} /> : <FiChevronRight size={12} />}\n          </button>}\n        \n        <div className={`p-1.5 rounded-full ${node.color}/20 mr-2`}>\n          {React.cloneElement(node.icon, {\n          size: 16\n        })}\n        </div>\n        \n        <div className=\"flex-1\">\n          <div className=\"font-medium text-sm\">{node.name}</div>\n          <div className=\"flex items-center mt-1\">\n            {getNodeTypeIcon(node.type)}\n            <span className=\"text-xs opacity-60 ml-1\">{node.type}</span>\n          </div>\n        </div>\n        \n        {node.metadata?.isInferenceEnabled && <button onClick={e => {\n        e.stopPropagation();\n        onInferenceRequest(node.id);\n      }} className=\"ml-2 p-1 text-purple-400 hover:bg-purple-500/20 rounded\" title=\"Run inference\">\n            <FiZap size={12} />\n          </button>}\n      </div>\n      \n      {hasChildren && isExpanded && <div className=\"ml-4 mt-1\">\n          {children.map(child => <TreeNodeRenderer key={child.id} node={child} level={level + 1} expandedNodes={expandedNodes} selectedRoom={selectedRoom} onToggleExpanded={onToggleExpanded} onNodeClick={onNodeClick} onInferenceRequest={onInferenceRequest} />)}\n        </div>}\n    </div>;\n};\n_c2 = TreeNodeRenderer;\nexport default DeepTreeEchoHomeMap;\nvar _c, _c2;\n$RefreshReg$(_c, \"DeepTreeEchoHomeMap\");\n$RefreshReg$(_c2, \"TreeNodeRenderer\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACqBlB,kBAAqB;AAErB,IAAAA,gBAAyB;;;ACFzB,mBAAyB;AAYjB;AAhCR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,6CAA+C,EAAE;AAAA,EAC1F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAwC;AACxC,cAAY,IAAI,eAAe;AACjC;AASA,IAAM,aAAa;AAAA;AAAA,EAEnB;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,UAAO,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA,WAAkB;AAAA,IACxB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,UAAU,CAAC,kBAAkB,YAAY,wBAAwB,iBAAiB,eAAe,UAAU,oBAAoB;AAAA,IAC/H,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,UAAO,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA,WAAkB;AAAA,IACxB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC,kBAAkB,oBAAoB,uBAAuB,iBAAiB;AAAA,IACzF,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,UAAO,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA,WAAkB;AAAA,IACxB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC,cAAc,eAAe,iBAAiB,oBAAoB;AAAA,IAC7E,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,SAAM,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA,WAAiB;AAAA,IACvB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC,eAAe,kBAAkB,mBAAmB,iBAAiB;AAAA,IAChF,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,SAAM,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA,WAAiB;AAAA,IACvB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC,iBAAiB,gBAAgB,kBAAkB,oBAAoB;AAAA,IAClF,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,cAAW,MAAM,MAAlB;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,IAC5B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC,qBAAqB,iBAAiB,qBAAqB,sBAAsB;AAAA,IAC5F,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,aAAU,MAAM,MAAjB;AAAA;AAAA;AAAA;AAAA,WAAqB;AAAA,IAC3B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC,oBAAoB,qBAAqB,oBAAoB,kBAAkB;AAAA,IAC1F,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,mBAAgB,MAAM,MAAvB;AAAA;AAAA;AAAA;AAAA,WAA2B;AAAA,IACjC,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC,oBAAoB,iBAAiB,qBAAqB,iBAAiB;AAAA,IACtF,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,cAAW,MAAM,MAAlB;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,IAC5B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,YAAS,MAAM,MAAhB;AAAA;AAAA;AAAA;AAAA,WAAoB;AAAA,IAC1B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,eAAY,MAAM,MAAnB;AAAA;AAAA;AAAA;AAAA,WAAuB;AAAA,IAC7B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,SAAM,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA,WAAiB;AAAA,IACvB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,UAAO,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA,WAAkB;AAAA,IACxB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,gBAAa,MAAM,MAApB;AAAA;AAAA;AAAA;AAAA,WAAwB;AAAA,IAC9B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,cAAW,MAAM,MAAlB;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,IAC5B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,YAAS,MAAM,MAAhB;AAAA;AAAA;AAAA;AAAA,WAAoB;AAAA,IAC1B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA;AAAA,EAEA;AAAA,IACE,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,SAAM,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA,WAAiB;AAAA,IACvB,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,eAAY,MAAM,MAAnB;AAAA;AAAA;AAAA;AAAA,WAAuB;AAAA,IAC7B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,gBAAa,MAAM,MAApB;AAAA;AAAA;AAAA;AAAA,WAAwB;AAAA,IAC9B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA,EAAG;AAAA,IACD,IAAI;AAAA,IACJ,MAAM;AAAA,IACN,aAAa;AAAA,IACb,MAAM,mDAAC,cAAW,MAAM,MAAlB;AAAA;AAAA;AAAA;AAAA,WAAsB;AAAA,IAC5B,OAAO;AAAA,IACP,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,UAAU,CAAC;AAAA,IACX,OAAO;AAAA,IACP,UAAU;AAAA,MACR,oBAAoB;AAAA,MACpB,iBAAiB;AAAA,MACjB,eAAe;AAAA,MACf,kBAAkB;AAAA,IACpB;AAAA,EACF;AAAA;AAGA;AACA,IAAM,sBAAsB,CAAC;AAAA,EAC3B;AAAA,EACA;AACF,MAAM;AACJ,KAAG;AACH,QAAM,CAAC,cAAc,eAAe,QAAI,uBAAS,gBAAgB;AACjE,QAAM,CAAC,iBAAiB,kBAAkB,QAAI,uBAAS,CAAC,gBAAgB,CAAC;AACzE,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,KAAK;AAC9C,QAAM,CAAC,eAAe,gBAAgB,QAAI,uBAAS,oBAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC;AAC9E,QAAM,CAAC,UAAU,WAAW,QAAI,uBAAS,MAAM;AAC/C,QAAM,CAAC,WAAW,YAAY,QAAI,uBAAS,IAAI;AAC/C,QAAM,CAAC,oBAAoB,qBAAqB,QAAI,uBAAS,KAAK;AAClE,QAAM,cAAc,WAAW,KAAK,UAAQ,KAAK,OAAO,YAAY;AACpE,QAAM,WAAW,WAAW,OAAO,UAAQ,KAAK,WAAW,YAAY;AACvE,QAAM,aAAa,aAAa,SAAS,WAAW,KAAK,UAAQ,KAAK,OAAO,YAAY,MAAM,IAAI;AACnG,QAAM,WAAW,eAAe,YAAY;AAC5C,WAAS,eAAe,QAAQ;AAC9B,UAAM,OAAO,CAAC;AACd,QAAI,UAAU,WAAW,KAAK,UAAQ,KAAK,OAAO,MAAM;AACxD,WAAO,SAAS;AACd,WAAK,QAAQ,OAAO;AACpB,gBAAU,QAAQ,SAAS,WAAW,KAAK,UAAQ,KAAK,OAAO,QAAQ,MAAM,IAAI;AAAA,IACnF;AACA,WAAO;AAAA,EACT;AACA,QAAM,kBAAkB,YAAU;AAChC,QAAI,WAAW,cAAc;AAC3B,yBAAmB,UAAQ,CAAC,GAAG,MAAM,MAAM,CAAC;AAC5C,sBAAgB,MAAM;AACtB,UAAI,cAAc;AAChB,qBAAa,MAAM;AAAA,MACrB;AAEA,YAAM,OAAO,WAAW,KAAK,OAAK,EAAE,OAAO,MAAM;AACjD,UAAI,QAAQ,KAAK,SAAS,SAAS,GAAG;AACpC,yBAAiB,UAAQ,oBAAI,IAAI,CAAC,GAAG,MAAM,MAAM,CAAC,CAAC;AAAA,MACrD;AAAA,IACF;AAAA,EACF;AACA,QAAM,kBAAkB,MAAM;AAC5B,QAAI,gBAAgB,SAAS,GAAG;AAC9B,YAAM,WAAW,gBAAgB,MAAM,GAAG,EAAE;AAC5C,YAAM,eAAe,SAAS,SAAS,SAAS,CAAC;AACjD,yBAAmB,QAAQ;AAC3B,sBAAgB,YAAY;AAC5B,UAAI,cAAc;AAChB,qBAAa,YAAY;AAAA,MAC3B;AAAA,IACF;AAAA,EACF;AACA,QAAM,qBAAqB,YAAU;AACnC,qBAAiB,UAAQ;AACvB,YAAM,SAAS,IAAI,IAAI,IAAI;AAC3B,UAAI,OAAO,IAAI,MAAM,GAAG;AACtB,eAAO,OAAO,MAAM;AAAA,MACtB,OAAO;AACL,eAAO,IAAI,MAAM;AAAA,MACnB;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACA,QAAM,yBAAyB,OAAM,WAAU;AAC7C,QAAI,CAAC;AAAoB;AACzB,0BAAsB,IAAI;AAC1B,QAAI;AACF,YAAM,SAAS,MAAM,mBAAmB,QAAQ,qCAAqC,QAAQ;AAC7F,mBAAa,MAAM;AAAA,IACrB,SAAS,OAAP;AACA,cAAQ,MAAM,6BAA6B,KAAK;AAAA,IAClD,UAAE;AACA,4BAAsB,KAAK;AAAA,IAC7B;AAAA,EACF;AACA,QAAM,kBAAkB,UAAQ;AAC9B,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,eAAO,mDAAC,cAAW,MAAM,IAAI,WAAU,qBAAhC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,MAC3D,KAAK;AACH,eAAO,mDAAC,YAAS,MAAM,IAAI,WAAU,mBAA9B;AAAA;AAAA;AAAA;AAAA,eAA8C;AAAA,MACvD,KAAK;AACH,eAAO,mDAAC,gBAAa,MAAM,IAAI,WAAU,qBAAlC;AAAA;AAAA;AAAA;AAAA,eAAoD;AAAA,MAC7D;AACE,eAAO,mDAAC,UAAO,MAAM,IAAI,WAAU,mBAA5B;AAAA;AAAA;AAAA;AAAA,eAA4C;AAAA,IACvD;AAAA,EACF;AACA,QAAM,iBAAiB,MAAM,mDAAC,SAAI,WAAU,aACxC,6DAAC,SAAI,WAAU,6BACb;AAAA,uDAAC,QAAG,WAAU,gDACZ;AAAA,yDAAC,eAAY,WAAU,UAAvB;AAAA;AAAA;AAAA;AAAA,aAA8B;AAAA,MAAE;AAAA,SADlC;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACA,mDAAC,oBAAiB,MAAM,WAAW,KAAK,OAAK,EAAE,OAAO,gBAAgB,GAAG,OAAO,GAAG,eAA8B,cAA4B,kBAAkB,oBAAoB,aAAa,iBAAiB,oBAAoB,0BAArO;AAAA;AAAA;AAAA;AAAA,WAA6P;AAAA,OAL/P;AAAA;AAAA;AAAA;AAAA,SAMA,KAPyB;AAAA;AAAA;AAAA;AAAA,SAQ3B;AACF,QAAM,gBAAgB,MAAM,mDAAC,SAAI,WAAU,aAEtC;AAAA,mBAAe,mDAAC,OAAO,KAAP,EAAW,SAAS;AAAA,MACrC,SAAS;AAAA,MACT,GAAG;AAAA,IACL,GAAG,SAAS;AAAA,MACV,SAAS;AAAA,MACT,GAAG;AAAA,IACL,GAAG,WAAU,6BACP;AAAA,yDAAC,SAAI,WAAU,oCACb;AAAA,2DAAC,SAAI,WAAU,oBACb;AAAA,6DAAC,SAAI,WAAW,oBAAoB,YAAY,cAC7C,sBAAY,QADf;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,mDAAC,SACC;AAAA,+DAAC,QAAG,WAAU,yBAAyB,sBAAY,QAAnD;AAAA;AAAA;AAAA;AAAA,mBAAwD;AAAA,YACxD,mDAAC,OAAE,WAAU,2BAA2B,sBAAY,eAApD;AAAA;AAAA;AAAA;AAAA,mBAAgE;AAAA,YAChE,mDAAC,SAAI,WAAU,oCACZ;AAAA,8BAAgB,YAAY,IAAI;AAAA,cACjC,mDAAC,UAAK,WAAU,8CAA8C,sBAAY,QAA1E;AAAA;AAAA;AAAA;AAAA,qBAA+E;AAAA,cAC/E,mDAAC,UAAK,WAAU,sBAAqB,sBAArC;AAAA;AAAA;AAAA;AAAA,qBAAsC;AAAA,cACtC,mDAAC,UAAK,WAAU,sBAAqB;AAAA;AAAA,gBAAO,YAAY;AAAA,mBAAxD;AAAA;AAAA;AAAA;AAAA,qBAA8D;AAAA,iBAJhE;AAAA;AAAA;AAAA;AAAA,mBAKA;AAAA,eARF;AAAA;AAAA;AAAA;AAAA,iBASA;AAAA,aAbF;AAAA;AAAA;AAAA;AAAA,eAcA;AAAA,QACA,mDAAC,YAAO,SAAS,MAAM,uBAAuB,YAAY,GAAG,UAAU,oBAAoB,WAAU,4GAClG,+BAAqB,iBAAiB,aADzC;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAlBF;AAAA;AAAA;AAAA;AAAA,aAmBA;AAAA,MAGC,YAAY,YAAY,mDAAC,SAAI,WAAU,+BACpC;AAAA,2DAAC,SAAI,WAAU,0BACb;AAAA,6DAAC,SAAI,WAAU,sBAAqB,gCAApC;AAAA;AAAA;AAAA;AAAA,iBAAoD;AAAA,UACpD,mDAAC,SAAI,WAAU,0BACb;AAAA,+DAAC,SAAI,WAAU,8CACb,6DAAC,SAAI,WAAU,gEAA+D,OAAO;AAAA,cACzF,OAAO,IAAI,YAAY,SAAS,mBAAmB,KAAK;AAAA,YAC1D,KAFM;AAAA;AAAA;AAAA;AAAA,mBAEH,KAHC;AAAA;AAAA;AAAA;AAAA,mBAIA;AAAA,YACA,mDAAC,UAAK,WAAU,WAAW;AAAA,mBAAK,OAAO,YAAY,SAAS,mBAAmB,KAAK,GAAG;AAAA,cAAE;AAAA,iBAAzF;AAAA;AAAA;AAAA;AAAA,mBAA0F;AAAA,eAN5F;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,aATF;AAAA;AAAA;AAAA;AAAA,eAUA;AAAA,QACA,mDAAC,SAAI,WAAU,0BACb;AAAA,6DAAC,SAAI,WAAU,sBAAqB,8BAApC;AAAA;AAAA;AAAA;AAAA,iBAAkD;AAAA,UAClD,mDAAC,SAAI,WAAU,0BACb;AAAA,+DAAC,SAAI,WAAU,8CACb,6DAAC,SAAI,WAAU,gEAA+D,OAAO;AAAA,cACzF,OAAO,IAAI,YAAY,SAAS,iBAAiB,KAAK;AAAA,YACxD,KAFM;AAAA;AAAA;AAAA;AAAA,mBAEH,KAHC;AAAA;AAAA;AAAA;AAAA,mBAIA;AAAA,YACA,mDAAC,UAAK,WAAU,WAAW;AAAA,mBAAK,OAAO,YAAY,SAAS,iBAAiB,KAAK,GAAG;AAAA,cAAE;AAAA,iBAAvF;AAAA;AAAA;AAAA;AAAA,mBAAwF;AAAA,eAN1F;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,aATF;AAAA;AAAA;AAAA;AAAA,eAUA;AAAA,QACA,mDAAC,SAAI,WAAU,0BACb;AAAA,6DAAC,SAAI,WAAU,sBAAqB,iCAApC;AAAA;AAAA;AAAA;AAAA,iBAAqD;AAAA,UACrD,mDAAC,SAAI,WAAU,0BACb;AAAA,+DAAC,SAAI,WAAU,8CACb,6DAAC,SAAI,WAAU,8DAA6D,OAAO;AAAA,cACvF,OAAO,IAAI,YAAY,SAAS,oBAAoB,KAAK;AAAA,YAC3D,KAFM;AAAA;AAAA;AAAA;AAAA,mBAEH,KAHC;AAAA;AAAA;AAAA;AAAA,mBAIA;AAAA,YACA,mDAAC,UAAK,WAAU,WAAW;AAAA,mBAAK,OAAO,YAAY,SAAS,oBAAoB,KAAK,GAAG;AAAA,cAAE;AAAA,iBAA1F;AAAA;AAAA;AAAA;AAAA,mBAA2F;AAAA,eAN7F;AAAA;AAAA;AAAA;AAAA,iBAOA;AAAA,aATF;AAAA;AAAA;AAAA;AAAA,eAUA;AAAA,WAjCqB;AAAA;AAAA;AAAA;AAAA,aAkCvB;AAAA,SA/DU;AAAA;AAAA;AAAA;AAAA,WAgEd;AAAA,IAGD,SAAS,SAAS,KAAK,mDAAC,SACrB;AAAA,yDAAC,QAAG,WAAU,8BAA6B,yBAA3C;AAAA;AAAA;AAAA;AAAA,aAAoD;AAAA,MACpD,mDAAC,SAAI,WAAU,wDACZ,mBAAS,IAAI,WAAS,mDAAC,OAAO,KAAP,EAA0B,YAAY;AAAA,QAChE,OAAO;AAAA,MACT,GAAG,UAAU;AAAA,QACX,OAAO;AAAA,MACT,GAAG,SAAS,MAAM,gBAAgB,MAAM,EAAE,GAAG,WAAU,qGAC/C;AAAA,2DAAC,SAAI,WAAW,OAAO,MAAM,WAA7B;AAAA;AAAA;AAAA;AAAA,eAAsC;AAAA,QACtC,mDAAC,SAAI,WAAU,OACb;AAAA,6DAAC,SAAI,WAAU,0BACb;AAAA,+DAAC,SAAI,WAAW,oBAAoB,MAAM,iBACvC,gBAAM,QADT;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,mDAAC,SACC;AAAA,iEAAC,QAAG,WAAU,eAAe,gBAAM,QAAnC;AAAA;AAAA;AAAA;AAAA,qBAAwC;AAAA,cACxC,mDAAC,SAAI,WAAU,0BACZ;AAAA,gCAAgB,MAAM,IAAI;AAAA,gBAC3B,mDAAC,UAAK,WAAU,2BAA2B,gBAAM,QAAjD;AAAA;AAAA;AAAA;AAAA,uBAAsD;AAAA,mBAFxD;AAAA;AAAA;AAAA;AAAA,qBAGA;AAAA,iBALF;AAAA;AAAA;AAAA;AAAA,mBAMA;AAAA,eAVF;AAAA;AAAA;AAAA;AAAA,iBAWA;AAAA,UACA,mDAAC,OAAE,WAAU,mCAAmC,gBAAM,eAAtD;AAAA;AAAA;AAAA;AAAA,iBAAkE;AAAA,aAbpE;AAAA;AAAA;AAAA;AAAA,eAcA;AAAA,WApBoC,MAAM,IAAvB;AAAA;AAAA;AAAA;AAAA,aAqBrB,CAAa,KAtBjB;AAAA;AAAA;AAAA;AAAA,aAuBA;AAAA,SAzBoB;AAAA;AAAA;AAAA;AAAA,WA0BtB;AAAA,OA/FsB;AAAA;AAAA;AAAA;AAAA,SAgG1B;AACF,SAAO,mDAAC,SAAI,WAAU,wCAElB;AAAA,uDAAC,SAAI,WAAU,kHACb;AAAA,yDAAC,SAAI,WAAU,+BACZ;AAAA,yBAAiB,oBAAoB,mDAAC,YAAO,SAAS,iBAAiB,WAAU,sCAC9E,6DAAC,eAAY,MAAM,MAAnB;AAAA;AAAA;AAAA;AAAA,eAAuB,KADW;AAAA;AAAA;AAAA;AAAA,eAEpC;AAAA,QACF,mDAAC,SACC;AAAA,6DAAC,SAAI,WAAU,eAAe,uBAAa,QAAQ,yBAAnD;AAAA;AAAA;AAAA;AAAA,iBAAyE;AAAA,UACzE,mDAAC,SAAI,WAAU,sBACZ,mBAAS,IAAI,UAAQ,KAAK,IAAI,EAAE,KAAK,UAAK,KAD7C;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aAJF;AAAA;AAAA;AAAA;AAAA,eAKA;AAAA,WATF;AAAA;AAAA;AAAA;AAAA,aAUA;AAAA,MACA,mDAAC,SAAI,WAAU,+BACb;AAAA,2DAAC,SAAI,WAAU,gDACb;AAAA,6DAAC,YAAO,SAAS,MAAM,YAAY,MAAM,GAAG,WAAW,OAAO,aAAa,SAAS,+BAA+B,sCACjH,6DAAC,eAAY,MAAM,MAAnB;AAAA;AAAA;AAAA;AAAA,iBAAuB,KADzB;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,mDAAC,YAAO,SAAS,MAAM,YAAY,KAAK,GAAG,WAAW,OAAO,aAAa,QAAQ,+BAA+B,sCAC/G,6DAAC,YAAS,MAAM,MAAhB;AAAA;AAAA;AAAA;AAAA,iBAAoB,KADtB;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA,QACA,mDAAC,YAAO,SAAS,MAAM,YAAY,CAAC,QAAQ,GAAG,WAAW,kBAAkB,WAAW,+BAA+B,yBACpH,6DAAC,UAAO,MAAM,MAAd;AAAA;AAAA;AAAA;AAAA,eAAkB,KADpB;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,WAXF;AAAA;AAAA;AAAA;AAAA,aAYA;AAAA,SAxBF;AAAA;AAAA;AAAA;AAAA,WAyBA;AAAA,IAGA,mDAAC,SAAI,WAAU,sCACZ;AAAA,kBAAY,mDAAC,OAAO,KAAP,EAAW,SAAS;AAAA,QAClC,SAAS;AAAA,QACT,GAAG;AAAA,MACL,GAAG,SAAS;AAAA,QACV,SAAS;AAAA,QACT,GAAG;AAAA,MACL,GAAG,WAAU,6EACP;AAAA,2DAAC,QAAG,WAAU,8BAA6B,mCAA3C;AAAA;AAAA;AAAA;AAAA,eAA8D;AAAA,QAC9D,mDAAC,OAAE,WAAU,sBAAqB,2OAAlC;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,WAXS;AAAA;AAAA;AAAA;AAAA,aAYX;AAAA,MAED,aAAa,SAAS,eAAe,IAAI,cAAc;AAAA,MAGxD,mDAAC,mBACE,uBAAa,mDAAC,OAAO,KAAP,EAAW,SAAS;AAAA,QACnC,SAAS;AAAA,QACT,GAAG;AAAA,MACL,GAAG,SAAS;AAAA,QACV,SAAS;AAAA,QACT,GAAG;AAAA,MACL,GAAG,MAAM;AAAA,QACP,SAAS;AAAA,QACT,GAAG;AAAA,MACL,GAAG,WAAU,0EACP;AAAA,2DAAC,QAAG,WAAU,gDACZ;AAAA,6DAAC,cAAW,WAAU,0BAAtB;AAAA;AAAA;AAAA;AAAA,iBAA6C;AAAA,UAAE;AAAA,UAE/C,mDAAC,UAAK,WAAU,mEACb;AAAA,iBAAK,MAAM,UAAU,aAAa,GAAG;AAAA,YAAE;AAAA,eAD1C;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aALF;AAAA;AAAA;AAAA;AAAA,eAMA;AAAA,QAEA,mDAAC,SAAI,WAAU,aACb;AAAA,6DAAC,SACC;AAAA,+DAAC,QAAG,WAAU,4BAA2B,0BAAzC;AAAA;AAAA;AAAA;AAAA,mBAAmD;AAAA,YACnD,mDAAC,OAAE,WAAU,sBAAsB,oBAAU,aAA7C;AAAA;AAAA;AAAA;AAAA,mBAAuD;AAAA,eAFzD;AAAA;AAAA;AAAA;AAAA,iBAGA;AAAA,UAEC,UAAU,SAAS,SAAS,KAAK,mDAAC,SAC/B;AAAA,+DAAC,QAAG,WAAU,4BAA2B,kCAAzC;AAAA;AAAA;AAAA;AAAA,mBAA2D;AAAA,YAC3D,mDAAC,SAAI,WAAU,wBACZ,oBAAU,SAAS,IAAI,CAAC,SAAS,MAAM,mDAAC,UAAa,WAAU,0DAC3D,qBAD8C,GAAX;AAAA;AAAA;AAAA;AAAA,mBAEtC,CAAO,KAHX;AAAA;AAAA;AAAA;AAAA,mBAIA;AAAA,eAN8B;AAAA;AAAA;AAAA;AAAA,iBAOhC;AAAA,UAED,UAAU,YAAY,SAAS,KAAK,mDAAC,SAClC;AAAA,+DAAC,QAAG,WAAU,4BAA2B,kCAAzC;AAAA;AAAA;AAAA;AAAA,mBAA2D;AAAA,YAC3D,mDAAC,QAAG,WAAU,gCACX,oBAAU,YAAY,IAAI,CAAC,QAAQ,MAAM,mDAAC,QAAW,WAAU,oBAC5D;AAAA,iEAAC,kBAAe,MAAM,IAAI,WAAU,6BAApC;AAAA;AAAA;AAAA;AAAA,qBAA8D;AAAA,cAC7D;AAAA,iBAF8C,GAAT;AAAA;AAAA;AAAA;AAAA,mBAGxC,CAAK,KAJT;AAAA;AAAA;AAAA;AAAA,mBAKA;AAAA,eAPiC;AAAA;AAAA;AAAA;AAAA,iBAQnC;AAAA,aAvBJ;AAAA;AAAA;AAAA;AAAA,eAwBA;AAAA,WA1CU;AAAA;AAAA;AAAA;AAAA,aA2CZ,KA5CJ;AAAA;AAAA;AAAA;AAAA,aA6CA;AAAA,SA/DF;AAAA;AAAA;AAAA;AAAA,WAgEA;AAAA,OA9FG;AAAA;AAAA;AAAA;AAAA,SA+FL;AACJ;AAGA,GAAG,qBAAqB,8BAA8B;AACtD,KAAK;AACL,IAAM,mBAAmB,CAAC;AAAA,EACxB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAM;AACJ,QAAM,aAAa,cAAc,IAAI,KAAK,EAAE;AAC5C,QAAM,aAAa,iBAAiB,KAAK;AACzC,QAAM,WAAW,WAAW,OAAO,OAAK,EAAE,WAAW,KAAK,EAAE;AAC5D,QAAM,cAAc,SAAS,SAAS;AACtC,QAAM,kBAAkB,UAAQ;AAC9B,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,eAAO,mDAAC,cAAW,MAAM,IAAI,WAAU,qBAAhC;AAAA;AAAA;AAAA;AAAA,eAAkD;AAAA,MAC3D,KAAK;AACH,eAAO,mDAAC,YAAS,MAAM,IAAI,WAAU,mBAA9B;AAAA;AAAA;AAAA;AAAA,eAA8C;AAAA,MACvD,KAAK;AACH,eAAO,mDAAC,gBAAa,MAAM,IAAI,WAAU,qBAAlC;AAAA;AAAA;AAAA;AAAA,eAAoD;AAAA,MAC7D;AACE,eAAO,mDAAC,UAAO,MAAM,IAAI,WAAU,mBAA5B;AAAA;AAAA;AAAA;AAAA,eAA4C;AAAA,IACvD;AAAA,EACF;AACA,SAAO,mDAAC,SAAI,WAAW,MAAM,QAAQ,KACjC;AAAA,uDAAC,SAAI,WAAW,oEAAoE,aAAa,wCAAwC,MAAM,SAAS,MAAM,YAAY,KAAK,EAAE,GAC9K;AAAA,qBAAe,mDAAC,YAAO,SAAS,OAAK;AACtC,UAAE,gBAAgB;AAClB,yBAAiB,KAAK,EAAE;AAAA,MAC1B,GAAG,WAAU,wCACN,uBAAa,mDAAC,iBAAc,MAAM,MAArB;AAAA;AAAA;AAAA;AAAA,aAAyB,IAAK,mDAAC,kBAAe,MAAM,MAAtB;AAAA;AAAA;AAAA;AAAA,aAA0B,KAJ1D;AAAA;AAAA;AAAA;AAAA,aAKd;AAAA,MAEF,mDAAC,SAAI,WAAW,sBAAsB,KAAK,iBACxC,gBAAM,aAAa,KAAK,MAAM;AAAA,QAC/B,MAAM;AAAA,MACR,CAAC,KAHD;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MAEA,mDAAC,SAAI,WAAU,UACb;AAAA,2DAAC,SAAI,WAAU,uBAAuB,eAAK,QAA3C;AAAA;AAAA;AAAA;AAAA,eAAgD;AAAA,QAChD,mDAAC,SAAI,WAAU,0BACZ;AAAA,0BAAgB,KAAK,IAAI;AAAA,UAC1B,mDAAC,UAAK,WAAU,2BAA2B,eAAK,QAAhD;AAAA;AAAA;AAAA;AAAA,iBAAqD;AAAA,aAFvD;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,WALF;AAAA;AAAA;AAAA;AAAA,aAMA;AAAA,MAEC,KAAK,UAAU,sBAAsB,mDAAC,YAAO,SAAS,OAAK;AAC5D,UAAE,gBAAgB;AAClB,2BAAmB,KAAK,EAAE;AAAA,MAC5B,GAAG,WAAU,2DAA0D,OAAM,iBACvE,6DAAC,SAAM,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA,aAAiB,KAJiB;AAAA;AAAA;AAAA;AAAA,aAKpC;AAAA,SA3BJ;AAAA;AAAA;AAAA;AAAA,WA4BA;AAAA,IAEC,eAAe,cAAc,mDAAC,SAAI,WAAU,aACxC,mBAAS,IAAI,WAAS,mDAAC,oBAAgC,MAAM,OAAO,OAAO,QAAQ,GAAG,eAA8B,cAA4B,kBAAoC,aAA0B,sBAAjK,MAAM,IAA7B;AAAA;AAAA;AAAA;AAAA,WAAgO,CAAE,KAD/N;AAAA;AAAA;AAAA;AAAA,WAE5B;AAAA,OAjCC;AAAA;AAAA;AAAA;AAAA,SAkCL;AACJ;AACA,MAAM;AACN,IAAO,8BAAQ;AACf,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,qBAAqB;AACtC,aAAa,KAAK,kBAAkB;AAEpC,OAAO,eAAe;AACtB,OAAO,eAAe;;;ADvrBtB,6BAAmC;AAsIrB,IAAAC,0BAAA;AA9Jd,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,oCAAsC,EAAE;AAAA,EACjF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAIC,MAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA+B;AAC/B,cAAY,IAAI,eAAe;AACjC;AA+Ee,SAAR,uBAAwC;AAC7C,EAAAC,IAAG;AACH,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI,cAAc;AAClB,QAAM,SAAS,UAAU;AACzB,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAS,WAAW;AACxD,QAAM,CAAC,kBAAkB,mBAAmB,QAAI,wBAAS,CAAC,CAAC;AAC3D,QAAM,mBAAmB,UAAQ;AAC/B,kBAAc,IAAI;AAElB,WAAO,QAAQ,UAAU,CAAC,GAAG,IAAI,wBAAwB,MAAM;AAAA,EACjE;AACA,QAAM,yBAAyB,OAAO,MAAM,UAAU;AAEpD,UAAM,WAAW,IAAI,SAAS;AAC9B,aAAS,OAAO,QAAQ,IAAI;AAC5B,aAAS,OAAO,SAAS,KAAK;AAC9B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,aAAO,UAAU;AAAA,QACf,QAAQ;AAAA,QACR,QAAQ;AAAA,QACR,SAAS,WAAS;AAChB,kBAAQ,MAAM,6BAA6B,KAAK;AAChD,iBAAO,KAAK;AAAA,QACd;AAAA,QACA,WAAW,UAAQ;AACjB,cAAI,KAAK,OAAO;AACd,mBAAO,IAAI,MAAM,KAAK,KAAK,CAAC;AAC5B;AAAA,UACF;AAGA,8BAAoB,UAAQ,CAAC;AAAA,YAC3B,MAAM,KAAK,UAAU,QAAQ;AAAA,YAC7B;AAAA,YACA,QAAQ,KAAK;AAAA,YACb,WAAW,oBAAI,KAAK;AAAA,UACtB,GAAG,GAAG,KAAK,MAAM,GAAG,CAAC,CAAC,CAAC;AAGvB,gBAAM,SAAS;AAAA,YACb,WAAW,KAAK,UAAU;AAAA,YAC1B,YAAY,KAAK,UAAU;AAAA,YAC3B,UAAU,KAAK,UAAU;AAAA,YACzB,aAAa,KAAK,UAAU;AAAA,YAC5B,aAAa,KAAK,UAAU;AAAA,YAC5B,aAAa,KAAK,UAAU;AAAA,UAC9B;AACA,kBAAQ,MAAM;AAAA,QAChB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACA,SAAO,oDAAC,SAAI,WAAU,0BAElB;AAAA,wDAAC,YAAO,WAAU,iEAChB,8DAAC,SAAI,WAAU,oCACb;AAAA,0DAAC,SACC;AAAA,4DAAC,QAAG,WAAU,wCACZ;AAAA,8DAAC,UAAK,WAAU,8EACb,mBADH;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,oDAAC,UAAK,WAAU,wEAAuE,qCAAvF;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,aANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA,QACA,oDAAC,OAAE,WAAU,2BAA2B,yBAAxC;AAAA;AAAA;AAAA;AAAA,eAAoD;AAAA,WATtD;AAAA;AAAA;AAAA;AAAA,aAUA;AAAA,MACA,oDAAC,SAAI,WAAU,cACb;AAAA,4DAAC,SAAI,WAAU,sBAAqB,2BAApC;AAAA;AAAA;AAAA;AAAA,eAA+C;AAAA,QAC/C,oDAAC,SAAI,WAAU,4BAA4B,wBAA3C;AAAA;AAAA;AAAA;AAAA,eAAsD;AAAA,WAFxD;AAAA;AAAA;AAAA;AAAA,aAGA;AAAA,SAfF;AAAA;AAAA;AAAA;AAAA,WAgBA,KAjBF;AAAA;AAAA;AAAA;AAAA,WAkBA;AAAA,IAGA,oDAAC,SAAI,WAAU,+BAEb;AAAA,0DAAC,UAAK,WAAU,0BACd,8DAAC,+BAAoB,cAAc,kBAAkB,oBAAoB,0BAAzE;AAAA;AAAA;AAAA;AAAA,aAAiG,KADnG;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MAGC,iBAAiB,SAAS,KAAK,oDAAC,WAAM,WAAU,0DAC7C,8DAAC,SAAI,WAAU,OACb;AAAA,4DAAC,QAAG,WAAU,8BAA6B,iCAA3C;AAAA;AAAA;AAAA;AAAA,eAA4D;AAAA,QAC5D,oDAAC,SAAI,WAAU,aACZ,2BAAiB,IAAI,CAAC,OAAO,UAAU,oDAAC,SAAgB,WAAU,qCAC/D;AAAA,8DAAC,SAAI,WAAU,yCACb;AAAA,gEAAC,SAAI,WAAU,+BAA+B,gBAAM,QAApD;AAAA;AAAA;AAAA;AAAA,mBAAyD;AAAA,YACzD,oDAAC,SAAI,WAAU,sBACZ,gBAAM,UAAU,mBAAmB,KADtC;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,eAJF;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA,UACA,oDAAC,SAAI,WAAU,2BAA0B;AAAA;AAAA,YAC/B,MAAM;AAAA,eADhB;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACA,oDAAC,SAAI,WAAU,sBAAqB;AAAA;AAAA,YACrB,KAAK,MAAM,MAAM,OAAO,aAAa,GAAG;AAAA,YAAE;AAAA,eADzD;AAAA;AAAA;AAAA;AAAA,iBAEA;AAAA,UACC,MAAM,OAAO,YAAY,MAAM,OAAO,SAAS,SAAS,KAAK,oDAAC,SAAI,WAAU,6BACxE;AAAA,kBAAM,OAAO,SAAS,MAAM,GAAG,CAAC,EAAE,IAAI,CAAC,SAAS,MAAM,oDAAC,UAAa,WAAU,4DAC1E,qBAD6D,GAAX;AAAA;AAAA;AAAA;AAAA,mBAErD,CAAO;AAAA,YACR,MAAM,OAAO,SAAS,SAAS,KAAK,oDAAC,UAAK,WAAU,sBAAqB;AAAA;AAAA,cAAE,MAAM,OAAO,SAAS,SAAS;AAAA,cAAE;AAAA,iBAAxE;AAAA;AAAA;AAAA;AAAA,mBAA6E;AAAA,eAJxD;AAAA;AAAA;AAAA;AAAA,iBAK5D;AAAA,aAlB4C,OAAV;AAAA;AAAA;AAAA;AAAA,eAmBtC,CAAM,KApBV;AAAA;AAAA;AAAA;AAAA,eAqBA;AAAA,WAvBF;AAAA;AAAA;AAAA;AAAA,aAwBA,KAzB4B;AAAA;AAAA;AAAA;AAAA,aA0B9B;AAAA,SAjCJ;AAAA;AAAA;AAAA;AAAA,WAkCA;AAAA,IAGA,oDAAC,YAAO,WAAU,yEAChB,8DAAC,SAAI,WAAU,qCACb;AAAA,0DAAC,SAAI,WAAU,+BACb;AAAA,4DAAC,SAAI;AAAA;AAAA,UACe,oDAAC,UAAK,WAAU,4BAA4B,wBAA5C;AAAA;AAAA;AAAA;AAAA,iBAAuD;AAAA,aAD3E;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,oDAAC,SAAI,WAAU,qBACb;AAAA,8DAAC,SAAI,WAAU,4CAAf;AAAA;AAAA;AAAA;AAAA,iBAAwD;AAAA,UACxD,oDAAC,UAAK,WAAU,cAAa,uCAA7B;AAAA;AAAA;AAAA;AAAA,iBAAoD;AAAA,aAFtD;AAAA;AAAA;AAAA;AAAA,eAGA;AAAA,WAPF;AAAA;AAAA;AAAA;AAAA,aAQA;AAAA,MACA,oDAAC,SAAI,WAAU,cAAa;AAAA;AAAA,QAC8B,iBAAiB;AAAA,QAAO;AAAA,WADlF;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAZF;AAAA;AAAA;AAAA;AAAA,WAaA,KAdF;AAAA;AAAA;AAAA;AAAA,WAeA;AAAA,OA3EG;AAAA;AAAA;AAAA;AAAA,SA4EL;AACJ;AACAA,IAAG,sBAAsB,gCAAgC,OAAO,WAAY;AAC1E,SAAO,CAAC,eAAe,SAAS;AAClC,CAAC;AACDC,MAAK;AACL,IAAIA;AACJ,aAAaA,KAAI,sBAAsB;AAEvC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react", "import_jsx_dev_runtime", "_s", "_s", "_c"]
}
